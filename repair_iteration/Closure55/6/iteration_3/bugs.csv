bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  savings  +=  reduction.prototypeCost.estimateSuccess();  [CE]  cannot  find  symbol  prototypeCost  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.prototypeCost.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.prototypeCost.estimateSuccess();	  savings    +=    reduction.prototype.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  prototypeCost	52	None	replace
2	[BUG]  [BUGGY]  savings  +=  reduction.getPrototype().estimateSuccess();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getPrototype().estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getPrototype().estimateSuccess();	  savings    +=    reduction.prototype.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
3	[BUG]  [BUGGY]  Savings  +=  reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.prototype.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.prototype.estimateSuccess();	  savings    +=    reduction.prototype.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	52	None	replace
4	[BUG]  [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	97	None	replace
5	[BUG]  [BUGGY]  Savings  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
6	[BUG]  [BUGGY]  reducer  +=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	97	None	replace
7	[BUG]  [BUGGY]  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	97	None	replace
8	[BUG]  [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reductionCost);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reductionCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reduction  =  compiler.getNodeForCodeInsertion(reductionCost);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	97	None	replace
9	[BUG]  [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	97	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,GetterReducer)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,GetterReducer)	72	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,GetterReducer)  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,GetterReducer)	72	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  new  GetterReducer());  [CE]  cannot  find  symbol  helpingRoot  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	72	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	72	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.class,  new  GetterReducer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.class,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.class,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  r  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  r	72	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction,GetterReducer)  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction,GetterReducer)	72	None	replace
17	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,FunctionRewriter.Reduction)  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,FunctionRewriter.Reduction)	70	None	replace
18	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	70	None	replace
19	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	70	None	replace
20	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	70	None	replace
21	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	70	None	replace
22	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	70	None	replace
23	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
24	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  saverCodeCost;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  saverCodeCost;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
25	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  HelperCodeCost;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
26	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  aiderCodeCost;  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  aiderCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  aiderCodeCost;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
27	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  helperCodeCost;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
28	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  helpingRoot;  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  helpingRoot;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  helpingRoot;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,<null>)	17	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  null);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	17	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,<null>)	17	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,<null>)  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,<null>)	17	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  null);  [CE]  cannot  find  symbol  roots  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  roots	17	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,<null>)  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,<null>)	17	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving,  null);  [CE]  cannot  find  symbol  saving  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  saving,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  saving	17	None	replace
36	[BUG]  [BUGGY]  reducers  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducers  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
37	[BUG]  [BUGGY]  reductions  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reductions  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
38	[BUG]  [BUGGY]  reduction  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
39	[BUG]  [BUGGY]  reduction.estimateSavings();  reducers  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.estimateSavings();  reducers  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction.estimateSavings();  reducers  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
40	[BUG]  [BUGGY]  Reducer  reducer  -=  reduction.estimateSavings();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  ';'  expected	92	None	replace
41	[BUG]  [BUGGY]  réductions  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réductions  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réductions  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  r	92	None	replace
42	[BUG]  [BUGGY]  réduirs  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduirs  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducers    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  r	92	None	replace
43	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	21	None	replace
44	[BUG]  [BUGGY]  savers  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  savers  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savers  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savers  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  savers	21	None	replace
45	[BUG]  [BUGGY]  savings  -=  reduction.estimateSeconds();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSeconds();	  savings    -=    reduction.estimateSavings();    savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
46	[BUG]  [BUGGY]  savings  -=  reduction.estimateStructure();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateStructure();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateStructure();	  savings    -=    reduction.estimateSavings();    savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
47	[BUG]  [BUGGY]  Savings  +=  reduction.reductionMap.getSavings();  [CE]  cannot  find  symbol  Savings  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.reductionMap.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.reductionMap.getSavings();	  savings    +=    reduction.reductionMap.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	98	None	replace
48	[BUG]  [BUGGY]  Savings  savings  +=  reduction.reductionMap.getSavings();  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.reductionMap.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.reductionMap.getSavings();	  savings    +=    reduction.reductionMap.getSavings();    	non-compiled	[CE]  ';'  expected	98	None	replace
49	[BUG]  [BUGGY]  reducer  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducer    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	91	None	replace
50	[BUG]  [BUGGY]  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducer    -=    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	91	None	replace
51	[BUG]  [BUGGY]  réduir  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduir  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducer    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  r	91	None	replace
52	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reducer    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	91	None	replace
53	[BUG]  [BUGGY]  Saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	22	None	replace
54	[BUG]  [BUGGY]  savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSeconds();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSeconds();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
55	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
56	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();  Saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
57	[BUG]  [BUGGY]  savings  -=  reduction.getSize()  +  helperCodeCost;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize()  +  helperCodeCost;	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
58	[BUG]  [BUGGY]  savings  -=  reduction.getSize()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize()  +  1;	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
59	[BUG]  [BUGGY]  Savings  -=  reduction.getSize();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSize();	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	42	None	replace
60	[BUG]  [BUGGY]  savings  -=  reduction.getSize()  *  reduction.getSize();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize()  *  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize()  *  reduction.getSize();	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
61	[BUG]  [BUGGY]  savings  -=  reduction.getSize()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize()  -  helperCodeCost;	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
62	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getLength();  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSize()  -  reduction.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getLength();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  reduction.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
64	[BUG]  [BUGGY]  savings  +=  reduction.getLength()  -  reduction.getSize();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getLength()  -  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLength()  -  reduction.getSize();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getLength();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSize()  -  reduction.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
66	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reducer.getLength();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reducer.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reducer.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
67	[BUG]  [BUGGY]  réduction  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduction  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  r	23	None	replace
68	[BUG]  [BUGGY]  Saving  +=  reduction.getSuccess();  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSuccess();	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
69	[BUG]  [BUGGY]  Saving  +=  reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  Saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.prototype.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.prototype.estimateSuccess();	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
70	[BUG]  [BUGGY]  Saving  +=  reduction.reduction.estimateSuccess();  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.reduction.estimateSuccess();	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
71	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
72	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSuccess()  -  helperCodeCost;  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.estimateSuccess()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSuccess()  -  helperCodeCost;	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
73	[BUG]  [BUGGY]  Saving  +=  reduction.getReductionSuccess();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getReductionSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getReductionSuccess();	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
74	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getFirstChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getFirstChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  ';'  expected	6	None	replace
76	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduced.getLastChild();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduced.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduced.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
77	[BUG]  [BUGGY]  saving  +=  reduction.getSize()  -  reduction.getLastChild();  [CE]  cannot  find  symbol  saving  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.getSize()  -  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  saving	6	None	replace
78	[BUG]  [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getLastChild();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
79	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings()  -  helperCodeCost;	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
80	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
81	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings()  -  1;	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
82	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings()  -  saverCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSavings()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings()  -  saverCodeCost;	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
83	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings(),  savings;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSavings(),  savings;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings(),  savings;	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	11	None	replace
84	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	57	None	replace
85	[BUG]  [BUGGY]  savings  +=  reduction.estimateSeconds()  -  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSeconds()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    +=    reduction.estimateSavings()    *    1;    savings  +=  reduction.estimateSavings()  *  1;	  	compilable	  [FE]  AssertionFailedError  	30	9	add
87	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  1;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    savings  +=  reduction.estimateSavings()  *  1;	  	compilable	  [FE]  AssertionFailedError  	30	9	add
88	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings  +=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  Savings  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    Savings  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	30	None	add
89	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings  -=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  Savings  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings  -=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    Savings  -=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	30	None	add
90	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reduction  +=  reduction.estimateSavings()  *  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reduction  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    reduction  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	30	None	add
91	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savers  +=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  savers  [FE]            IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savers  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    savers  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  cannot  find  symbol  savers	30	None	add
92	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reduction.estimateSavings()  *  1;  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  not  a  statement	30	None	add
93	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  saving  +=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  saving  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    saving  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	30	None	add
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    +=    reduction.estimateSavings()    *    1;    savings  +=  reduction.estimateSavings()  *  2;	  	compilable	  [FE]  AssertionFailedError  	30	9	add
95	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  2;  [FE]  AssertionFailedError  [FE]                  IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  savings  +=  reduction.estimateSavings()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    savings  +=  reduction.estimateSavings()  *  2;	  	compilable	  [FE]  AssertionFailedError  	30	9	add
96	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.estimateSavings();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  helperCodeCost  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  helperCodeCost  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	25	None	replace
97	[BUG]  [BUGGY]  if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  incompatible  types	25	None	replace
98	[BUG]  [BUGGY]  if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  incompatible  types	25	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	25	8	replace
100	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	25	8	replace
101	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	25	None	replace
102	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(helperCodeCost!=  null)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	25	None	replace
103	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	25	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReturnStatementReducer());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReturnStatementReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReturnStatementReducer());	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reduction);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reduction);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnStatementReducer());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnStatementReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnStatementReducer());	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  saving);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  saving);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reducer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  reducer);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helperCodeCost);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction)	15	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	15	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node)	15	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  [CE]  cannot  find  symbol  pruningRoot  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	15	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction);  [CE]  cannot  find  symbol  roots  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  roots	15	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	15	None	replace
116	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  saverCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  saverCodeCost;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
117	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  HelperCodeCost;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
118	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
119	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helpingRoot;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helpingRoot;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  helpingRoot;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
120	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  saving;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  saving;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  saving;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
121	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  *  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  *  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  *  helperCodeCost;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReturnReducer());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReturnReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReturnReducer());	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reduction);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reduction);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  saving);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  saving);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnReducer());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  null,  new  ReturnReducer());	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reducer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  reducer);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helperCodeCost);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
128	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSuccess();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
129	[BUG]  [BUGGY]  Savings  savings  +=  reduction.reduction.estimateSuccess();  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.reduction.estimateSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
130	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
131	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  -  1;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSuccess()  -  1;	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
132	[BUG]  [BUGGY]  Savings  savings  +=  reduction.computeSuccess();  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.computeSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.computeSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
133	[BUG]  [BUGGY]  savings  +=  reduction.getSuccess()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSuccess()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSuccess()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSuccess();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
134	[BUG]  [BUGGY]  savings  +=  reduction.getSuccess()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSuccess()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSuccess()  -  helperCodeCost;	  savings    +=    reduction.getSuccess();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
135	[BUG]  [BUGGY]  savings  +=  reduction.getSuccess()  -  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSuccess()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSuccess()  -  1;	  savings    +=    reduction.getSuccess();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
136	[BUG]  [BUGGY]  savings  +=  reduction.reduction.getSuccess();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.getSuccess();	  savings    +=    reduction.getSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
137	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  saving	99	None	replace
138	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	99	None	replace
139	[BUG]  [BUGGY]  saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  saving	99	None	replace
140	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	99	None	replace
141	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getSize()  -  1;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getSize()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  reduction.getSize()  -  1;	  savings    +=    reduction.getSize()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
142	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  1;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  1;	  savings    +=    reduction.getSize()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
143	[BUG]  [BUGGY]  savings  +=  reduction.getLength()  -  1;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getLength()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLength()  -  1;	  savings    +=    reduction.getSize()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
144	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  2;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  2;	  savings    +=    reduction.getSize()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
145	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  reduction.getSavings()  -  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  reduction.getSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  reduction.getSavings()  -  1;	  savings    +=    reduction.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
146	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  1;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  1;	  savings    +=    reduction.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
147	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  helpingRoot;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  helpingRoot;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  helpingRoot;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
148	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  saverCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  saverCodeCost;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
149	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  HelperCodeCost;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
150	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  saving;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  saving;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  saving;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
151	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  reducerCodeCost;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  reducerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  reducerCodeCost;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
152	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(helperCodeCost,  reduction);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
153	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(saving);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings(saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(saving);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	86	None	replace
154	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(reduction);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
155	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings(helperCodeCost,  reduction);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySavings(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings(helperCodeCost,  reduction);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  ';'  expected	86	None	replace
156	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings(helperCodeCost);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings(helperCodeCost);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  ';'  expected	86	None	replace
157	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  1;	  savings    +=    reduction.estimateSuccess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  aiderCodeCost);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  aiderCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  aiderCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
164	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Savings  -=  reduction.estimateSavings()  +  1;  [CE]  cannot  find  symbol  Savings  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    Savings  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	79	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    -=    reduction.estimateSavings()    +    1;    savings  -=  reduction.estimateSavings()  +  1;	  	compilable	  [FE]  AssertionFailedError  	79	8	add
166	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  savings  -=  reduction.estimateSavings()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    savings  -=  reduction.estimateSavings()  +  1;	  	compilable	  [FE]  AssertionFailedError  	79	8	add
167	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Saving  -=  reduction.estimateSavings()  +  1;  [CE]  cannot  find  symbol  Saving  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Saving  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    Saving  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Saving	79	None	add
168	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  savings  -=  reduction.estimateSavings()  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    int  savings  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  ';'  expected	79	None	add
169	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	79	None	add
170	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  -=  reduction.estimateSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
171	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings()  +  1);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings()  +  1);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings()  +  1);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	79	None	add
172	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reduction.estimateSavings()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  not  a  statement	79	None	add
173	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  *  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  *  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  *  SAVINGS_THRESHOLD;	  savings    +=    reduction.estimateSuccess()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
174	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  /  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  HELPER_SOURCE;	  savings    +=    reduction.estimateSuccess()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
175	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  /  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  helperCodeCost;	  savings    +=    reduction.estimateSuccess()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
176	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  /  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  HelperCodeCost;	  savings    +=    reduction.estimateSuccess()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
177	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	58	None	replace
178	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	58	None	replace
179	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSavings()  *  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	58	None	replace
180	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,int)  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,int)	110	None	replace
181	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	110	None	replace
182	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCodeCost);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	110	None	replace
183	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	110	None	replace
184	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  reduction.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
185	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  *  reduction.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	50	None	replace
186	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  reducer.getSeconds();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  reducer.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  reducer.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
187	[BUG]  [BUGGY]  savings  +=  reductions.getSeconds()  *  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSeconds()  *  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSeconds()  *  reduction.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
188	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getSeconds()  -  1;  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  reduction.getSeconds()  -  1;	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
189	[BUG]  [BUGGY]  savings  -=  reduction.getLength()  +  helperCodeCost;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getLength()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLength()  +  helperCodeCost;	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
190	[BUG]  [BUGGY]  savings  -=  reduction.getLength()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getLength()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLength()  +  1;	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
191	[BUG]  [BUGGY]  savings  -=  reduction.getLength()  +  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getLength()  +  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLength()  +  SAVINGS_THRESHOLD;	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
192	[BUG]  [BUGGY]  Savings  -=  reduction.getLength();  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getLength();	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol  Savings	111	None	replace
193	[BUG]  [BUGGY]  savings  -=  reduction.getLength()  +  2;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getLength()  +  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLength()  +  2;	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
194	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
195	[BUG]  [BUGGY]  savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSeconds();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSeconds();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
196	[BUG]  [BUGGY]  savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSeconds();  Savings  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
197	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();  Savings  -=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  /  2;	  savings    +=    reduction.estimateSavings()    /    1;    	compilable	  [FE]  AssertionFailedError  	77	9	replace
199	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  2;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  /  2;	  savings    +=    reduction.estimateSavings()    /    1;    	compilable	  [FE]  AssertionFailedError  	77	9	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  *  2;	  savings    +=    reduction.estimateSavings()    /    1;    	compilable	  [FE]  AssertionFailedError  	77	9	replace
201	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  2;  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  *  2;	  savings    +=    reduction.estimateSavings()    /    1;    	compilable	  [FE]  AssertionFailedError  	77	9	replace
202	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds().apply();  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds().apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds().apply();	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
203	[BUG]  [BUGGY]  Saving  +=  reduction.apply(helperCodeCost);  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(helperCodeCost);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
204	[BUG]  [BUGGY]  Saving  +=  reduction.reduction.apply();  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.reduction.apply();	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
205	[BUG]  [BUGGY]  Saving  +=  reduction.getSavings();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSavings();	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
206	[BUG]  [BUGGY]  Saving  -=  reduction.apply();  [CE]  cannot  find  symbol  Saving  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.apply();	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
207	[BUG]  [BUGGY]  Saving  +=  reduction.getSecond();  [CE]  cannot  find  symbol  Saving  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSecond();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSecond();	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
208	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSeconds()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
209	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  HELPER_SOURCE;	  savings    +=    reduction.getSeconds()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
210	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSeconds()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol  Savings	46	None	replace
211	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  helperCodeCost;	  savings    +=    reduction.getSeconds()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
212	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
213	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  HelperCodeCost;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
214	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  saverCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  saverCodeCost;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
215	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  helperCodeCost;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  savings  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    +=    reduction.estimateSavings()    /    1;    savings  +=  reduction.estimateSavings()  /  1;	  	compilable	  [FE]  AssertionFailedError  	76	9	add
217	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  savings  +=  reduction.estimateSavings()  /  1;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  savings  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    savings  +=  reduction.estimateSavings()  /  1;	  	compilable	  [FE]  AssertionFailedError  	76	9	add
218	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  +=  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  Savings  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    Savings  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	76	None	add
219	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  -=  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  Savings  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  -=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    Savings  -=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	76	None	add
220	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  savers  +=  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  savers  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  savers  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    savers  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  savers	76	None	add
221	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reduction  +=  reduction.estimateSavings()  /  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reduction  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    reduction  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	76	None	add
222	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reduction.estimateSavings()  /  1;  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  not  a  statement	76	None	add
223	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  /  1  =  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Savings  /  1  =  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    Savings  /  1  =  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	76	None	add
224	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.applySavings();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  +=  reduction.applySavings();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
225	[BUG]  [BUGGY]  reduction  +=  reduction.applySavings();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  +=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  +=  reduction.applySavings();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  -=  reduction.estimateSavings()  *  1;	  savings    -=    reduction.estimateSavings()    +    1;    	compilable	  [FE]  AssertionFailedError  	80	8	replace
227	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSavings()  *  1;	  savings    -=    reduction.estimateSavings()    +    1;    	compilable	  [FE]  AssertionFailedError  	80	8	replace
228	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings()  /  SAVINGS_THRESHOLD;  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings()  /  SAVINGS_THRESHOLD;	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
229	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings()  -  helperCodeCost;  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings()  -  helperCodeCost;	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
230	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings()  -  1;  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings()  -  1;	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
231	[BUG]  [BUGGY]  Savings  savings  -=  reduction.applySavings();  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  -=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  -=  reduction.applySavings();	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
232	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySuccess();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applySuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySuccess();	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
233	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	74	None	replace
234	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	74	None	replace
235	[BUG]  [BUGGY]  réduir  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  r  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduir  =  compiler.getNodeForCodeInsertion(reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  r	74	None	replace
236	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [CE]  cannot  find  symbol  reductionCost  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reductionCost);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reductionCost	74	None	replace
237	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  null);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	74	None	replace
238	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  null);  [CE]  cannot  find  symbol  reductionCost  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  null);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reductionCost	74	None	replace
239	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings()  +  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings()  +  helperCodeCost;	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
240	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings()  +  1;  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings()  +  1;	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
241	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings()  *  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings()  *  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings()  *  helperCodeCost;	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
242	[BUG]  [BUGGY]  Savings  -=  reduction.getSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSeconds();	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
243	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings()  +  saverCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings()  +  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings()  +  saverCodeCost;	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
244	[BUG]  [BUGGY]  Savings  -=  reduction.getReductions();  [CE]  cannot  find  symbol  Savings  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getReductions();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getReductions();	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
245	[BUG]  [BUGGY]  Savings  saving  +=  reduction.getSeconds();  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  saving  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  saving  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	109	None	replace
246	[BUG]  [BUGGY]  Savings  saver  +=  reduction.getSeconds();  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  saver  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  saver  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	109	None	replace
247	[BUG]  [BUGGY]  Saving  saver  +=  reduction.getSeconds();  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  saver  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  saver  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	109	None	replace
248	[BUG]  [BUGGY]  Savings  saver  =  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  saver  =  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  saver  =  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
249	[BUG]  [BUGGY]  Saving  +=  reduction.getSize()  -  1;  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSize()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSize()  -  1;	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
250	[BUG]  [BUGGY]  Saving  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
251	[BUG]  [BUGGY]  Saving  +=  reduction.getLowerCost();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getLowerCost();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getLowerCost();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
252	[BUG]  [BUGGY]  Saving  +=  reduction.getSize()  -  reduction.getLength();  [CE]  cannot  find  symbol  Saving  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSize()  -  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSize()  -  reduction.getLength();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
253	[BUG]  [BUGGY]  Saving  +=  reduction.getReductionSize();  [CE]  cannot  find  symbol  Saving  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getReductionSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getReductionSize();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
254	[BUG]  [BUGGY]  Saving  +=  reduction.getLength();  [CE]  cannot  find  symbol  Saving  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getLength();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
255	[BUG]  [BUGGY]  savings  +=  reduction.apply(helperCodeCost,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(helperCodeCost,  reduction);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	88	None	replace
256	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  contributingRoot);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	88	None	replace
257	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  helpingRoot);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	88	None	replace
258	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  saving);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	88	None	replace
259	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	88	None	replace
260	[BUG]  [BUGGY]  savings  +=  reduction.apply(saverCodeCost,  reduction);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(saverCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(saverCodeCost,  reduction);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	88	None	replace
261	[BUG]  [BUGGY]  savings  +=  reduction.apply(root,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(root,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(root,  reduction);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	88	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  contributingRoot  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	73	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer(),  helperCodeCost);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer(),  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer(),  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  null,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
269	[BUG]  [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	90	None	replace
270	[BUG]  [BUGGY]  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  =  compiler.getNodeForCodeInsertion(null);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  incompatible  types	90	None	replace
271	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  /  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  /  1;	  savings    +=    reduction.applySavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
272	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings();  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	60	1	replace
273	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	60	1	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	compilable	  [FE]  AssertionFailedError  	60	8	replace
275	[BUG]  [BUGGY]  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	compilable	  [FE]  AssertionFailedError  	60	8	replace
276	[BUG]  [BUGGY]  Savings.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.estimateSavings();  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	60	None	replace
277	[BUG]  [BUGGY]  Savings.estimateSavings()  -  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  not  a  statement	60	None	replace
278	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  reduction.estimateSavings()  -  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  not  a  statement	60	None	replace
279	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reduction  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reduction  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	93	None	replace
280	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccessors();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors();	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
281	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors()  /  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccessors()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors()  /  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
282	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors()  *  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccessors()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors()  *  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
283	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccessors()  *  2  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors()  *  2  -  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
284	[BUG]  [BUGGY]  savings  +=  reduction.getSuccessors()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSuccessors()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSuccessors()  -  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
285	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSuccessors()  -  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSuccessors()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSuccessors()  -  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
286	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Savings	26	None	add
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	26	8	add
288	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	26	8	add
289	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    Saving  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Saving	26	None	add
290	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	26	None	add
291	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  int  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  int  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    int  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  ';'  expected	26	None	add
292	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
293	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Reducer  reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Reducer  reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    Reducer  reduction  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  ';'  expected	26	None	add
294	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	26	None	add
295	[BUG]  [BUGGY]  Saving  +=  reduction.applySuccess();  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applySuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applySuccess();	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
296	[BUG]  [BUGGY]  Saving  +=  reduction.applySeconds();  [CE]  cannot  find  symbol  Saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applySeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applySeconds();	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
297	[BUG]  [BUGGY]  Saving  +=  reduction.applyStructure();  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyStructure();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyStructure();	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
298	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  2  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  2  -  1;	  savings    +=    reduction.getSeconds()    -    1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
299	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  1;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  1;	  savings    +=    reduction.getSeconds()    -    1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
300	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  1;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  1;	  savings    +=    reduction.getSeconds()    -    1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
301	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  -  1;  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  -  1;	  savings    +=    reduction.getSeconds()    -    1;    	non-compiled	[CE]  ';'  expected	47	None	replace
302	[BUG]  [BUGGY]  Savings  +=  reduction.applySuccess();  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySuccess();	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
303	[BUG]  [BUGGY]  Savings  +=  reduction.applySavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySavings()  -  helperCodeCost;	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
304	[BUG]  [BUGGY]  Savings  +=  reduction.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySavings(helperCodeCost);	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
305	[BUG]  [BUGGY]  Savings  +=  reduction.apply(helperCodeCost);  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.apply(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.apply(helperCodeCost);	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
306	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  1;  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  -  1;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
307	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  helperCodeCost;  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  -  helperCodeCost;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
308	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
309	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  2;  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  -  2;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
310	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  /  2;  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  /  2;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
311	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  +  1;  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  +  1;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
312	[BUG]  [BUGGY]  savings  -=  reduction.getSavings()  +  helperCodeCost;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSavings()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSavings()  +  helperCodeCost;	  savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
313	[BUG]  [BUGGY]  savings  -=  reduction.getSavings()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSavings()  +  1;	  savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
314	[BUG]  [BUGGY]  savings  -=  reduction.getSavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSavings()  -  helperCodeCost;	  savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
315	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getSize();  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSize()  -  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSize()  -  reduction.getSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  ';'  expected	3	None	replace
316	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLimit();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLimit();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getLimit();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
317	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getSize();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  reduction.getSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
318	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLowerCost();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLowerCost();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getLowerCost();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
319	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  2;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  2;	  savings    +=    reduction.getSeconds()    -    2;    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
320	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  2;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  2;	  savings    +=    reduction.getSeconds()    -    2;    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
321	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  -  2;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  -  2;	  savings    +=    reduction.getSeconds()    -    2;    	non-compiled	[CE]  ';'  expected	68	None	replace
322	[BUG]  [BUGGY]  savings  -=  reduction.getSuccess();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSuccess();	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
323	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  Savings  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	81	None	replace
324	[BUG]  [BUGGY]  savings  -=  reduction.reduction.estimateSuccess();  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.reduction.estimateSuccess();	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	81	None	replace
325	[BUG]  [BUGGY]  savings  -=  reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  prototype  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.prototype.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.prototype.estimateSuccess();	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  prototype	81	None	replace
326	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess()  +  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess()  +  helperCodeCost;	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,FunctionRewriter)  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,FunctionRewriter)	106	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,FunctionRewriter)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,FunctionRewriter)	106	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  this);  [CE]  cannot  find  symbol  contributingRoot  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	106	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter)	106	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  this);  [CE]  cannot  find  symbol  roots  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	106	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  this);  [CE]  cannot  find  symbol  helpingRoot  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	106	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  this);  [CE]  cannot  find  symbol  r  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  r	106	None	replace
334	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
335	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  saverCodeCost;  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  saverCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
336	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  HelperCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
337	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  helperCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
338	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  -  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  -  helperCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  Savings	49	None	replace
339	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  helpingRoot;  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  helpingRoot;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  helpingRoot;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
340	[BUG]  [BUGGY]  saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  saving	103	None	replace
341	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  +  1;  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  +  1;	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
342	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
343	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  2;  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  *  2;	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
344	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  /  2;  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  /  2;	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
345	[BUG]  [BUGGY]  savings  +=  reduction.getLength()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getLength()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLength()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
346	[BUG]  [BUGGY]  savings  +=  reduction.getLength()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getLength()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLength()  -  helperCodeCost;	  savings    +=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
347	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getLength();  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getLength();	  savings    +=    reduction.getLength();    	non-compiled	[CE]  ';'  expected	83	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  4;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  *  4;	  savings    +=    reduction.estimateSavings()    *    1;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
349	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  4;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  4;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  *  4;	  savings    +=    reduction.estimateSavings()    *    1;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
350	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  1;  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  1;	  savings    +=    reduction.estimateSavings()    *    1;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
351	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  1;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
352	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
353	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  helperCodeCost;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
354	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  +  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  +  helperCodeCost;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
355	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  /  2;  [CE]  cannot  find  symbol  Savings  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  /  2;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
356	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  2;  [CE]  cannot  find  symbol  Savings  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  2;	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
357	[BUG]  [BUGGY]  Savings.apply(reduction.getCost());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getCost());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getCost());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
358	[BUG]  [BUGGY]  Savings.apply(reduction.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getName());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getName());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
359	[BUG]  [BUGGY]  Savings.apply(reduction.get());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.get());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.get());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
360	[BUG]  [BUGGY]  Savings.apply(reduction.getReduction());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getReduction());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getReduction());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
361	[BUG]  [BUGGY]  Savings.apply(reduction.getSecond());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getSecond());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getSecond());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
362	[BUG]  [BUGGY]  Savings.apply(reduction.getType());  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getType());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getType());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
363	[BUG]  [BUGGY]  Savings.apply(reduction.getSample());  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getSample());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getSample());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
364	[BUG]  [BUGGY]  Savings.applySavings(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	38	None	replace
365	[BUG]  [BUGGY]  Savings.applySavings(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction,  saving);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saving	38	None	replace
366	[BUG]  [BUGGY]  Savings.applySavings(reductionCost);  [CE]  cannot  find  symbol  reductionCost  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reductionCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reductionCost);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  reductionCost	38	None	replace
367	[BUG]  [BUGGY]  Savings.apply(reduction.getSavings());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getSavings());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getSavings());	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
368	[BUG]  [BUGGY]  Savings.apply(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	38	None	replace
369	[BUG]  [BUGGY]  Savings.applySavings(reduction,  savings);  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction,  savings);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	38	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	14	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  helpingRoot  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	14	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int)  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int)	14	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  saving,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	14	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	14	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	14	None	replace
376	[BUG]  [BUGGY]  Savings.checkState(reduction.estimateSavings());  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.checkState(reduction.estimateSavings());  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.checkState(reduction.estimateSavings());  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	27	None	replace
377	[BUG]  [BUGGY]  savings  -=  reduction.applySavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.applySavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.applySavings();  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
378	[BUG]  [BUGGY]  reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	27	None	replace
379	[BUG]  [BUGGY]  savings  -=  reduction.apply();  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply();  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	27	None	replace
380	[BUG]  [BUGGY]  Savings.checkState(reduction.estimateSavings()  }  );  reduction.estimateSavings();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.checkState(reduction.estimateSavings()  }  );  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.checkState(reduction.estimateSavings()  }  );  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  ')'  expected	27	None	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	reduction.apply();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	27	9	replace
382	[BUG]  [BUGGY]  reduction.apply();  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction.apply();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	27	9	replace
383	[BUG]  [BUGGY]  Savings.checkState(reduction.estimateSavings());  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.checkState(reduction.estimateSavings());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.checkState(reduction.estimateSavings());	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	27	None	replace
384	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  -  1;  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  -  1;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
385	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
386	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  -  helperCodeCost;  [CE]  cannot  find  symbol  Saving  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  -  helperCodeCost;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
387	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  -  2;  [CE]  cannot  find  symbol  Saving  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  -  2;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
388	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds(),  savings;  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds(),  savings;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds(),  savings;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	108	None	replace
389	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  /  2;  [CE]  cannot  find  symbol  Saving  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  /  2;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction)  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction)	12	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,FunctionRewriter.Reduction)  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,FunctionRewriter.Reduction)	12	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	12	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction,  saving);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	12	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	12	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  reduction);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	12	None	replace
396	[BUG]  [BUGGY]  Savings  -=  reduction.applySavings();  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.applySavings();	  savings    -=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	40	None	replace
397	[BUG]  [BUGGY]  savings  -=  reduction.reduction.applySavings();  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.reduction.applySavings();	  savings    -=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
398	[BUG]  [BUGGY]  saving  -=  reduction.applySavings();  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  -=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  -=  reduction.applySavings();	  savings    -=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saving	40	None	replace
399	[BUG]  [BUGGY]  Savings  +=  reduction.getSuccess();  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSuccess();	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
400	[BUG]  [BUGGY]  Savings  +=  reduction.reduction.estimateSuccess();  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.reduction.estimateSuccess();	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
401	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
402	[BUG]  [BUGGY]  savings  +=  reduction.getReductionSize()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getReductionSize()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReductionSize()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
403	[BUG]  [BUGGY]  savings  +=  reduction.getReductionSize()  -  1;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getReductionSize()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReductionSize()  -  1;	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
404	[BUG]  [BUGGY]  savings  +=  reduction.getReductionSize()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getReductionSize()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReductionSize()  -  helperCodeCost;	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
405	[BUG]  [BUGGY]  SavingSize  +=  reduction.getReductionSize();  [CE]  cannot  find  symbol  SavingSize  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  SavingSize  +=  reduction.getReductionSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	SavingSize  +=  reduction.getReductionSize();	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol  SavingSize	85	None	replace
406	[BUG]  [BUGGY]  Savings  =  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  =  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  =  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    =    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	62	None	replace
407	[BUG]  [BUGGY]  Savings  =  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  =  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings    =    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	62	None	replace
408	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings    =    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	62	None	replace
409	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  =  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    =    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	62	None	replace
410	[BUG]  [BUGGY]  savings  +=  reduction.reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.prototype.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.prototype.estimateSuccess();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
411	[BUG]  [BUGGY]  savings  +=  reduction.reduction.applySuccess();  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.applySuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.applySuccess();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
412	[BUG]  [BUGGY]  savings  +=  reduction.reduction.apply();  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.apply();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
413	[BUG]  [BUGGY]  savings  +=  reduction.reduction.acceptSuccess();  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.acceptSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.acceptSuccess();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,int)	18	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	18	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);  [CE]  cannot  find  symbol  saving  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	18	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  helpingRoot  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helpingRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	18	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,int)  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,int)	18	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  helperCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	18	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  contributingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  contributingRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  contributingRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	18	None	replace
421	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSavings()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
422	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  /  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  HELPER_SOURCE;	  savings    +=    reduction.getSavings()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
423	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  /  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  helperCodeCost;	  savings    +=    reduction.getSavings()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
424	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  /  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  HelperCodeCost;	  savings    +=    reduction.getSavings()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
431	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	69	None	replace
432	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	69	None	replace
433	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	69	None	replace
434	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	69	None	replace
435	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	69	None	replace
436	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	69	None	replace
437	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	69	None	replace
438	[BUG]  [BUGGY]  int  savings  =  reduction.estimateSavings();  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  savings  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  savings  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
439	[BUG]  [BUGGY]  int  savings  =  reduction.estimateSavings()  -  helperCodeCost;  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  savings  =  reduction.estimateSavings()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  savings  =  reduction.estimateSavings()  -  helperCodeCost;	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
440	[BUG]  [BUGGY]  Integer  savings  =  reduction.estimateSavings();  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Integer  savings  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Integer  savings  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
441	[BUG]  [BUGGY]  int  savings  =  reduction.estimateSuccess();  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  savings  =  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  savings  =  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
442	[BUG]  [BUGGY]  int  savings  =  reduction.estimateSavings()  -  1;  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  savings  =  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  savings  =  reduction.estimateSavings()  -  1;	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
443	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    -=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	59	None	replace
444	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings    -=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	59	None	replace
445	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings    -=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	59	None	replace
446	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    -=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	59	None	replace
447	[BUG]  [BUGGY]  savings  +=  reduction.getMeanSize()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getMeanSize()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getMeanSize()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
448	[BUG]  [BUGGY]  savings  +=  reduction.getMeanSize()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getMeanSize()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getMeanSize()  -  helperCodeCost;	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
449	[BUG]  [BUGGY]  savings  +=  reduction.getMeanSize()  -  1;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getMeanSize()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getMeanSize()  -  1;	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
450	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getMeanSize();  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getMeanSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getMeanSize();	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  ';'  expected	84	None	replace
451	[BUG]  [BUGGY]  Savings  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  reduction  =  compiler.getNodeForCodeInsertion(null);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
452	[BUG]  [BUGGY]  Savings  savings  -=  reduction.apply();  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  -=  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  -=  reduction.apply();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
453	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply(helperCodeCost);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.apply(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply(helperCodeCost);	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
454	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSize();  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSize();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
455	[BUG]  [BUGGY]  Savings  savings  /=  reduction.apply();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  /=  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  /=  reduction.apply();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
456	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply(),  saving);  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.apply(),  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply(),  saving);	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
457	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applyTo(reduction);  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.applyTo(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applyTo(reduction);	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
458	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  -  1;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
459	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  -  2;  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  -  2;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
460	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  /  2;  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  /  2;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
461	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds(),  savings;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds(),  savings;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds(),  savings;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	67	None	replace
462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,Reducer)  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,Reducer)	13	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reducer);  [CE]  cannot  find  symbol  helpingRoot  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	13	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  contributingRoot  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	13	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reducer);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	13	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  reducer);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	13	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,<null>)  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int,<null>)	16	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int,<null>)	16	None	replace
469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  null);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  helperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	16	None	replace
470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  null);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	16	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  null);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	16	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  null);  [CE]  cannot  find  symbol  r  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  r	16	None	replace
473	[BUG]  [BUGGY]  Savings  -=  reduction.apply();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.apply();	  savings    -=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	34	None	replace
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	20	8	add
475	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	20	8	add
476	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    Savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Savings	20	None	add
477	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    reduction  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	add
478	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savers  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  savers  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  savers  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    savers  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  savers	20	None	add
479	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    Saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Saving	20	None	add
480	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
481	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Savings	20	None	add
482	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saver  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saver  [FE]                  AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saver  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    saver  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  saver	20	None	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	compilable	  [FE]  AssertionFailedError  	56	9	add
484	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	compilable	  [FE]  AssertionFailedError  	56	9	add
485	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    Savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	56	None	add
486	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    Savings  -=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	56	None	add
487	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    Savings  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  ';'  expected	56	None	add
488	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  =  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  =  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    Savings  =  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	56	None	add
489	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	56	None	add
490	[BUG]  [BUGGY]  savings  -=  reduction.getSeconds()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSeconds()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSeconds()  +  1;	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
491	[BUG]  [BUGGY]  savings  -=  reduction.getSeconds()  +  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSeconds()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSeconds()  +  helperCodeCost;	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
492	[BUG]  [BUGGY]  savings  -=  reduction.getSeconds()  *  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSeconds()  *  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSeconds()  *  reduction.getSeconds();	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
493	[BUG]  [BUGGY]  savings  -=  reduction.getSeconds()  +  2;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSeconds()  +  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSeconds()  +  2;	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
494	[BUG]  [BUGGY]  savings  -=  reduction.apply(helperCodeCost,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(helperCodeCost,  reduction);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	45	None	replace
495	[BUG]  [BUGGY]  savings  -=  reduction.apply(root,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(root,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(root,  helperCodeCost);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	45	None	replace
496	[BUG]  [BUGGY]  savings  -=  reduction.apply(root,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(root,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(root,  helpingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	45	None	replace
497	[BUG]  [BUGGY]  savings  -=  reduction.apply(root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(root,  HelperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(root,  HelperCodeCost);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	45	None	replace
498	[BUG]  [BUGGY]  Savings  -=  reduction.apply(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  Savings  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.apply(helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.apply(helperCodeCost,  reduction);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Savings	45	None	replace
499	[BUG]  [BUGGY]  savings  -=  reduction.apply(root,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(root,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(root,  contributingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	45	None	replace
500	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction,  helpingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	45	None	replace
501	[BUG]  [BUGGY]  Savings.Savings.size();  [CE]  package  Savings  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.Savings.size();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.Savings.size();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  package  Savings  does  not  exist	63	None	replace
502	[BUG]  [BUGGY]  Savings.Savings.size()  -  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.Savings.size()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.Savings.size()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  not  a  statement	63	None	replace
503	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  Savings.Savings.size();  [CE]  package  Savings  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  Savings.Savings.size();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  Savings.Savings.size();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  package  Savings  does  not  exist	63	None	replace
504	[BUG]  [BUGGY]  Savings.Savings.size()  *=  reduction.estimateSavings();  [CE]  package  Savings  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.Savings.size()  *=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.Savings.size()  *=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  package  Savings  does  not  exist	63	None	replace
505	[BUG]  [BUGGY]  Savings.Savings.size()  :  reduction.estimateSavings();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.Savings.size()  :  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.Savings.size()  :  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  ';'  expected	63	None	replace
506	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds().apply();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds().apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds().apply();	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
507	[BUG]  [BUGGY]  Savings  +=  reduction.reduction.apply();  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.reduction.apply();	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,GetterReducer)  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,GetterReducer)	71	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	71	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,GetterReducer)  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,GetterReducer)	71	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  GetterReducer());  [CE]  cannot  find  symbol  contributingRoot  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  contributingRoot,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	71	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,GetterReducer)  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,GetterReducer)	71	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  roots  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  roots	71	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  new  GetterReducer());  [CE]  cannot  find  symbol  r  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  r	71	None	replace
515	[BUG]  [BUGGY]  reducers  +=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducers  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
516	[BUG]  [BUGGY]  reductions  +=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reductions  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
517	[BUG]  [BUGGY]  reductions  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reductions  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
518	[BUG]  [BUGGY]  reducers  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducers  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
519	[BUG]  [BUGGY]  réductions  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réductions  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réductions  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  r	94	None	replace
520	[BUG]  [BUGGY]  réduirs  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduirs  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  r	94	None	replace
521	[BUG]  [BUGGY]  Reducer  reducer  +=  reduction.estimateSavings();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	94	None	replace
522	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  2;  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  /  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  2;	  savings    +=    reduction.getSavings()    -    2;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
523	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  2;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  2;	  savings    +=    reduction.getSavings()    -    2;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
524	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
525	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  /  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  HELPER_SOURCE;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
526	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  /  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  helperCodeCost;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
527	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  ';'  expected	1	None	replace
528	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  HelperCodeCost;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  /  HelperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  HelperCodeCost;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
529	[BUG]  [BUGGY]  reduction  +=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
530	[BUG]  [BUGGY]  reduction  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
531	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
532	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
533	[BUG]  [BUGGY]  reduction  +=  reduction.estimateSavings()  *  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  +=  reduction.estimateSavings()  *  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reduction  +=  reduction.estimateSavings()  *  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
534	[BUG]  [BUGGY]  réduction  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduction  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  r	61	None	replace
535	[BUG]  [BUGGY]  -=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	-=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    -=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
536	[BUG]  [BUGGY]  -=  reduction.estimateSuccess();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	-=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    -=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
537	[BUG]  [BUGGY]  -=  reduction.estimateSeconds();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  -=  reduction.estimateSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	-=  reduction.estimateSeconds();	  savings    -=    reduction.estimateSavings();    -=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  3;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  *  3;	  savings    +=    reduction.estimateSavings()    *    1;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
539	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  3;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  3;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  *  3;	  savings    +=    reduction.estimateSavings()    *    1;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
540	[BUG]  [BUGGY]  saving  +=  reduction.applySeconds();  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.applySeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.applySeconds();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saving	101	None	replace
541	[BUG]  [BUGGY]  saver  +=  reduction.applySavings();  [CE]  cannot  find  symbol  saver  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saver  +=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saver  +=  reduction.applySavings();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saver	101	None	replace
542	[BUG]  [BUGGY]  saving  +=  reduction.apply();  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.apply();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saving	101	None	replace
543	[BUG]  [BUGGY]  Savings.applySavings(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction,  helperCodeCost);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	38	None	replace
544	[BUG]  [BUGGY]  Savings.applySavings(reduction.getSavings());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction.getSavings());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction.getSavings());	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
545	[BUG]  [BUGGY]  Savings.applySavings(reduction,  saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction,  saverCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction,  saverCodeCost);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	38	None	replace
546	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getLength();  [CE]  cannot  find  symbol  Savings  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  reduction.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol  Savings	5	None	replace
547	[BUG]  [BUGGY]  Saving  savings  +=  reduction.getSize()  -  reduction.getLength();  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  savings  +=  reduction.getSize()  -  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  savings  +=  reduction.getSize()  -  reduction.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  ';'  expected	5	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  roots  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  roots	14	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  addingRoot  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	14	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,int)  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,int)	14	None	replace
551	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	79	None	add
552	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reducer  -=  reduction.estimateSavings()  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reducer  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    reducer  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	79	None	add
553	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reduction  -=  reduction.estimateSavings()  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  reduction  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    reduction  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	79	None	add
554	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	79	None	add
555	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  *  2  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  *  2  -  1;	  savings    +=    reduction.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
556	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getLastChild();  [CE]  cannot  find  symbol  Savings  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Savings	6	None	replace
557	[BUG]  [BUGGY]  Saving  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  savings  +=  reduction.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  ';'  expected	6	None	replace
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  null);  [CE]  cannot  find  symbol  roots  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  roots	16	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  null);  [CE]  cannot  find  symbol  addingRoot  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	16	None	replace
560	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSuccessors()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSuccessors()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSuccessors()  -  1;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	112	None	replace
561	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reducers  +=  reduction.estimateSavings()  *  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  reducers  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    reducers  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	30	None	add
562	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  saves  +=  reduction.estimateSavings()  *  1;  [CE]  cannot  find  symbol  saves  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  saves  +=  reduction.estimateSavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    saves  +=  reduction.estimateSavings()  *  1;	  	non-compiled	[CE]  cannot  find  symbol  saves	30	None	add
563	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	30	None	add
564	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    *    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	30	None	add
565	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  saving  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  saving	99	None	replace
566	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings()  -  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSavings();  reduction  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
567	[BUG]  [BUGGY]  Savings.apply(helperCodeCost.apply());  [CE]  int  cannot  be  dereferenced  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(helperCodeCost.apply());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(helperCodeCost.apply());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
568	[BUG]  [BUGGY]  Savings.apply(reduction.toString());  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.toString());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.toString());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol  Savings	33	None	replace
569	[BUG]  [BUGGY]  Savings.apply(reduction.getNode());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getNode());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getNode());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
570	[BUG]  [BUGGY]  Savings  +=  reduction.getReductionSize();  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getReductionSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getReductionSize();	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	85	None	replace
571	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    reducer  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	26	None	add
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    reduction.estimateSavings();  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	26	8	add
573	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reduction.estimateSavings();  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    reduction.estimateSavings();  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	26	8	add
574	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	26	None	add
575	[BUG]  [BUGGY]  savings  -=  reduction.estimateStructure();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateStructure();  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateStructure();  Savings  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
576	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSuccessors();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSuccessors();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSuccessors();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
577	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccessors();  Savings  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
578	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
579	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();  [CE]  cannot  find  symbol  Savings  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSuccess();  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	27	None	replace
580	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccessors();  reduction.estimateSuccessors();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccessors();  reduction.estimateSuccessors();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccessors();  reduction.estimateSuccessors();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
581	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSavings();  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	27	None	replace
582	[BUG]  [BUGGY]  savings  -=  reduction.estimateReduction();  reduction.estimateReductions();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateReduction();  reduction.estimateReductions();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateReduction();  reduction.estimateReductions();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
583	[BUG]  [BUGGY]  savings  +=  reduction.estimateSeconds()  /  1;  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSeconds()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSeconds()  /  1;	  savings    +=    reduction.estimateSavings()    /    1;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
584	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  aiderCodeCost;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  aiderCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  aiderCodeCost;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
585	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  helpingerCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  helpingerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  helpingerCodeCost;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
586	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings.Savings.size();  [CE]  package  Savings  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings.Savings.size();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  -  1;  Savings.Savings.size();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  package  Savings  does  not  exist	63	None	replace
587	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings.Savings.size()  *  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  Savings.Savings.size()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  *  1;  Savings.Savings.size()  *  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  not  a  statement	63	None	replace
588	[BUG]  [BUGGY]  Savings  +=  reduction.applySeconds();  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySeconds();	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
589	[BUG]  [BUGGY]  savings  -=  reduction.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.applySavings(helperCodeCost);	  savings    -=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
590	[BUG]  [BUGGY]  Saving  -=  reduction.applySavings();  [CE]  cannot  find  symbol  Saving  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.applySavings();	  savings    -=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	40	None	replace
591	[BUG]  [BUGGY]  Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	103	None	replace
592	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply()  -  helperCodeCost;  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.apply()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply()  -  helperCodeCost;	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
593	[BUG]  [BUGGY]  Savings  savings  +=  reduction.remove();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.remove();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.remove();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
594	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply()  -  saverCodeCost;  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.apply()  -  saverCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply()  -  saverCodeCost;	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
595	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  *  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  *  1;	  savings    +=    reduction.estimateSuccess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
596	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSuccess()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSuccess()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSuccess()  -  1;	  savings    +=    reduction.estimateSuccess()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	66	None	replace
597	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSuccess()  -  1;  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.estimateSuccess()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSuccess()  -  1;	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
598	[BUG]  [BUGGY]  Saving  +=  reduction.reductions.getSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.reductions.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.reductions.getSeconds();	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
599	[BUG]  [BUGGY]  Saving  +=  reduction.reduction.getSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.reduction.getSeconds();	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
600	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  -  4;  [CE]  cannot  find  symbol  Saving  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  -  4;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  -  4;	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
601	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  no  suitable  method  found  for  getCost(Reducer)  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reducer);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer)	110	None	replace
602	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,Node)  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction,Node)	110	None	replace
603	[BUG]  [BUGGY]  savings  -=  reduction.estimateStructure();  Saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateStructure();  Saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateStructure();  Saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
604	[BUG]  [BUGGY]  savings  +=  reduction.propertyNode.estimateSuccess();  [CE]  cannot  find  symbol  propertyNode  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.propertyNode.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.propertyNode.estimateSuccess();	  savings    +=    reduction.prototype.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  propertyNode	52	None	replace
605	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  addingRoot);  [CE]  cannot  find  symbol  addingRoot  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  addingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  addingRoot);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	88	None	replace
606	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  savingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  savingRoot);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	88	None	replace
607	[BUG]  [BUGGY]  Saving  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
608	[BUG]  [BUGGY]  Saver  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saver  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saver  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
609	[BUG]  [BUGGY]  Saving  +=  reduction.applyTo(reduction);  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyTo(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyTo(reduction);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
610	[BUG]  [BUGGY]  Saving  +=  reduction.applyTo(helperCodeCost);  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyTo(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyTo(helperCodeCost);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
611	[BUG]  [BUGGY]  Saving  +=  reduction.apply(helperCodeCost,  savings);  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(helperCodeCost,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(helperCodeCost,  savings);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
612	[BUG]  [BUGGY]  Saving  +=  reduction.applyTo(saveerCodeCost);  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyTo(saveerCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyTo(saveerCodeCost);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
613	[BUG]  [BUGGY]  Saving  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  reduction  =  compiler.getNodeForCodeInsertion(null);	  savings    -=    reduction.estimateSavings();    Reducer    reduction    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
614	[BUG]  [BUGGY]  savings  +=  reduction.nameMap.getSavings();  [CE]  cannot  find  symbol  nameMap  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.nameMap.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.nameMap.getSavings();	  savings    +=    reduction.reductionMap.getSavings();    	non-compiled	[CE]  cannot  find  symbol  nameMap	98	None	replace
615	[BUG]  [BUGGY]  savings  +=  reduction.reductionMap.getSeconds();  [CE]  cannot  find  symbol  reductionMap  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reductionMap.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reductionMap.getSeconds();	  savings    +=    reduction.reductionMap.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reductionMap	98	None	replace
616	[BUG]  [BUGGY]  Savings  savings  =  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  =  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
617	[BUG]  [BUGGY]  savings  +=  reduction.estimateSeconds();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSeconds();	  savings    +=    reduction.estimateSavings()    -    1;    savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
618	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  aiderCodeCost;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  aiderCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  aiderCodeCost;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
619	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  *  reduction.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	50	None	replace
620	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getMeanSeconds();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getMeanSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  reduction.getMeanSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
621	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  reduced.getSeconds();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  reduced.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  reduced.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
623	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
625	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
626	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  saving)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [CE]  cannot  find  symbol  saving  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  saving)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  saving)  {  savings  -=  reduction.estimateSavings();  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  saving	28	None	replace
627	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  0)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
628	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
629	[BUG]  [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getSize();  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSize()  -  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize()  -  reduction.getSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	3	None	replace
630	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getMeanSize();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getMeanSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getMeanSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
631	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getReductionSize();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getReductionSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getReductionSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
632	[BUG]  [BUGGY]  Savings  savings  -=  reduction.estimateSuccess();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  -=  reduction.estimateSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
633	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSuccess()  -  helperCodeCost;	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
634	[BUG]  [BUGGY]  Savings  savings  +=  reduction.prependSuccess();  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.prependSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.prependSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
635	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings(helperCodeCost);  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings(helperCodeCost);	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
636	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings()  +  saves;  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getSavings()  +  saves;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings()  +  saves;	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
637	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction,  contributingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	45	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reduction);  [CE]  cannot  find  symbol  roots  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  roots	12	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	12	None	replace
640	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helpingRoot);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer(),  helpingRoot);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
641	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  aiderCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  aiderCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  aiderCodeCost;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
642	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccessors();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccessors();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccessors();	  savings    -=    reduction.estimateSavings();    savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
643	[BUG]  [BUGGY]  saving  +=  reduction.getSeconds()  -  1;  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.getSeconds()  -  1;	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  saving	109	None	replace
644	[BUG]  [BUGGY]  saver  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  saver  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saver  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saver  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  saver	109	None	replace
645	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSavings();  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	60	None	replace
646	[BUG]  [BUGGY]  Savings.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	60	None	replace
647	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings()  +  helperCodeCost;  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSavings()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings()  +  helperCodeCost;	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
648	[BUG]  [BUGGY]  Savings  savings  -=  reduction.getSavings();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  -=  reduction.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  -=  reduction.getSavings();	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
649	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getReductions();  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getReductions();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getReductions();	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
650	[BUG]  [BUGGY]  savings  -=  reduction.apply()  +  helperCodeCost;  [CE]  'void'  type  not  allowed  here  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply()  +  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply()  +  helperCodeCost;	  savings    -=    reduction.apply();    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
651	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  HELPER_SOURCE;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
652	[BUG]  [BUGGY]  Savings  +=  reduction.applyTo(helperCodeCost);  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applyTo(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applyTo(helperCodeCost);	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
653	[BUG]  [BUGGY]  Savings  +=  reduction.applyTo(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applyTo(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applyTo(reduction);	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
654	[BUG]  [BUGGY]  Savings  +=  reduction.apply(helperCodeCost,  savings);  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.apply(helperCodeCost,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.apply(helperCodeCost,  savings);	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
655	[BUG]  [BUGGY]  Savings  +=  saving.apply();  [CE]  cannot  find  symbol  Savings  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  saving.apply();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  saving.apply();	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
656	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  new  GetterReducer());  [CE]  cannot  find  symbol  mitigation  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  mitigation,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  mitigation	71	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceri,  new  GetterReducer());  [CE]  cannot  find  symbol  reduceri  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceri,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduceri,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduceri	71	None	replace
658	[BUG]  [BUGGY]  Savings  +=  reduction.getMeanSize();  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getMeanSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getMeanSize();	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	84	None	replace
659	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)	15	None	replace
660	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction);  [CE]  cannot  find  symbol  r  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	15	None	replace
661	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  reduction);  [CE]  cannot  find  symbol  Root  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  Root,  reduction);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  Root	15	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation);  [CE]  cannot  find  symbol  mitigation  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  mitigation);	  NodeTraversal.traverse(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  mitigation	15	None	replace
663	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  *  1;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  *  1;	  savings    +=    reduction.getSize()    -    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
664	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  -  4;  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  -  4;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  -  4;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
665	[BUG]  [BUGGY]  Savings  +=  reduction.reduction.getSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.reduction.getSeconds();	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
666	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSuccess()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess()  +  1;	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
667	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  saves  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  saves  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    saves  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  saves	56	None	add
668	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saving  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    saving  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	56	None	add
669	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    Savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	56	None	add
670	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  not  a  statement	56	None	add
671	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	25	None	replace
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	25	8	replace
673	[BUG]  [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(reduction.estimateSavings()  >  savings)  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	25	8	replace
674	[BUG]  [BUGGY]  savers  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [CE]  cannot  find  symbol  savers  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savers  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savers  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  savers	25	None	replace
675	[BUG]  [BUGGY]  Savings  +=  reduction.getLocalSavings();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getLocalSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getLocalSavings();	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
676	[BUG]  [BUGGY]  Savings  +=  reduction.getReductions();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getReductions();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getReductions();	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
677	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSuccess()  -  helperCodeCost;	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
678	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
679	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);	  reducer    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	69	None	replace
680	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saves  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saves  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    saves  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  saves	20	None	add
681	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saving  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    saving  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  saving	20	None	add
682	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        savings    -=    reduction.estimateSavings();    Saving  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Saving	20	None	add
683	[BUG]  [BUGGY]  Saving  +=  reduction.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applySavings(helperCodeCost);	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
684	[BUG]  [BUGGY]  Saving  +=  reduction.applyFields();  [CE]  cannot  find  symbol  Saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyFields();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyFields();	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
685	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  roots  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  roots	73	None	replace
686	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  new  ReductionGatherer());  [CE]  cannot  find  symbol  mitigation  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  mitigation,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  mitigation	73	None	replace
687	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  r  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  r	73	None	replace
688	[BUG]  [BUGGY]  savings  +=  reduction.estimateSeconds()  -  1;  Savings  =  reduction.estimateSeconds()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSeconds()  -  1;  Savings  =  reduction.estimateSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSeconds()  -  1;  Savings  =  reduction.estimateSeconds()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    Savings    =    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
689	[BUG]  [BUGGY]  savings  -=  reduction.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLastChild();	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
690	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  *  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  *  1;	  savings    +=    reduction.applySavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
691	[BUG]  [BUGGY]  Savings  +=  reduction.applySavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySavings()  -  1;	  savings    +=    reduction.applySavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	29	None	replace
692	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  null);  [CE]  cannot  find  symbol  r  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  r	17	None	replace
693	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceri,  null);  [CE]  cannot  find  symbol  reduceri  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceri,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduceri,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  reduceri	17	None	replace
694	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helpingRoot);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer(),  helpingRoot);	          NodeTraversal.traverse(compiler,    reduction,    new    ReturnStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
695	[BUG]  [BUGGY]  Savings  +=  reduction.getLength();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getLength();	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
696	[BUG]  [BUGGY]  Savings  +=  reduction.getName();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getName();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getName();	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
697	[BUG]  [BUGGY]  Savings  +=  reduction.getLowerSize();  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getLowerSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getLowerSize();	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
698	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  savings);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	18	None	replace
699	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  saver);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  saver);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	18	None	replace
700	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  roots  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  roots	13	None	replace
701	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  r  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
702	[BUG]  [BUGGY]  savings  -=  reduction.reduction.getSize();  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.reduction.getSize();	  savings    -=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
703	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    saves    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  saves	95	None	replace
704	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saves  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings();  saves  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    saves    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  saves	95	None	replace
705	[BUG]  [BUGGY]  savings  +=  reduction.getReduction().estimateSuccess();  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getReduction().estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReduction().estimateSuccess();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
706	[BUG]  [BUGGY]  savings  +=  reduction.getReductionSuccess();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getReductionSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReductionSuccess();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
707	[BUG]  [BUGGY]  savings  +=  reduction.reduction.getSeconds();  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.getSeconds();	  savings    +=    reduction.reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
708	[BUG]  [BUGGY]  savings  +=  reduction.getLastChild();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLastChild();	  savings    +=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
709	[BUG]  [BUGGY]  savings  +=  reduction.getChildCount();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getChildCount();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getChildCount();	  savings    +=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
710	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	70	None	replace
711	[BUG]  [BUGGY]  Saving  +=  reduction.getLowerSize();  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getLowerSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getLowerSize();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
712	[BUG]  [BUGGY]  Saving  +=  reduction.getPosition();  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getPosition();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getPosition();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
713	[BUG]  [BUGGY]  Saving  +=  reduction.getName();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getName();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getName();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
714	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  roots  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  roots	72	None	replace
715	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	72	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  helperCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  mitigation  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigation,  helperCodeCost,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  mitigation,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  mitigation	72	None	replace
717	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,FunctionRewriter)  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,FunctionRewriter)	106	None	replace
718	[BUG]  [BUGGY]  réductions  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  r  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réductions  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réductions  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  r	94	None	replace
719	[BUG]  [BUGGY]  Savings  savings  -=  reduction.getSeconds();  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  -=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  -=  reduction.getSeconds();	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
720	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  1;  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getSeconds()  *  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds()  *  1;	  Savings    savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	48	None	replace
721	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reducers  +=  reduction.estimateSavings()  /  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  reducers  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    reducers  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	76	None	add
722	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  saves  +=  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  saves  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  saves  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    saves  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  saves	76	None	add
723	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	76	None	add
724	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	76	None	add
725	[BUG]  [BUGGY]  savings  +=  contributingRoot.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  contributingRoot.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  contributingRoot.applySavings(helperCodeCost);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	86	None	replace
726	[BUG]  [BUGGY]  savings  +=  helpingRoot.applySavings(reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  helpingRoot.applySavings(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  helpingRoot.applySavings(reduction);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	86	None	replace
727	[BUG]  [BUGGY]  savings  +=  addingRoot.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  addingRoot  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  addingRoot.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  addingRoot.applySavings(helperCodeCost);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	86	None	replace
728	[BUG]  [BUGGY]  savings  +=  saving.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  saving.applySavings(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  saving.applySavings(helperCodeCost);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	86	None	replace
729	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(helperCodeCost,  saving);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	86	None	replace
730	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  HELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  HELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  HELPER_SOURCE;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
731	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  aiderCodeCost;  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  aiderCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  aiderCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helpingRoot);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helpingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helpingRoot);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
735	[BUG]  [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getSize();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSize()  -  reduction.getSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSize()  -  reduction.getSize();	  savings    +=    reduction.getSize()    -    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
736	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  saving  -=  reduction.estimateSavings()  +  1;  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  saving  -=  reduction.estimateSavings()  +  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings()    +    1;    saving  -=  reduction.estimateSavings()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	79	None	add
737	[BUG]  [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  reduction  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;  reduction  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        +=        reduction.estimateSavings()        -        1;        savings    +=    reduction.estimateSavings()    -    1;    reduction  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	56	None	add
738	[BUG]  [BUGGY]  savings  +=  reduction.getInitializingSize();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getInitializingSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getInitializingSize();	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
739	[BUG]  [BUGGY]  savings  +=  reduction.getImmediateParentNode();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getImmediateParentNode();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getImmediateParentNode();	  savings    +=    reduction.getReductionSize();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  saving  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	int  saving  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
741	[BUG]  [BUGGY]  int  saving  =  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  saving  =  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  saving  =  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	28	8	replace
742	[BUG]  [BUGGY]  int  savings  =  reductions.estimateSavings();  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  int  savings  =  reductions.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	int  savings  =  reductions.estimateSavings();	  savings    -=    reduction.estimateSavings();    int    savings    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	28	None	replace
743	[BUG]  [BUGGY]  savings  +=  reductions.getSavings()  -  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSavings()  -  1;	  savings    +=    reduction.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
744	[BUG]  [BUGGY]  Savings.apply(reduction.getParent());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getParent());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getParent());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
745	[BUG]  [BUGGY]  Savings.apply(reduction.getStandardReduction());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.apply(reduction.getStandardReduction());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.getStandardReduction());	  Savings.apply(reduction.apply());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
746	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  CHELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  /  CHELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  CHELPER_SOURCE;	  savings    +=    reduction.estimateSuccess()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
747	[BUG]  [BUGGY]  Saving  +=  reduction.applyStandardSavings();  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.applyStandardSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applyStandardSavings();	  Saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	100	None	replace
748	[BUG]  [BUGGY]  savings  +=  reduction.savedMap.getSavings();  [CE]  cannot  find  symbol  savedMap  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.savedMap.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.savedMap.getSavings();	  savings    +=    reduction.reductionMap.getSavings();    	non-compiled	[CE]  cannot  find  symbol  savedMap	98	None	replace
749	[BUG]  [BUGGY]  savings  +=  reduction.getMeanSize()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getMeanSize()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getMeanSize()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.getMeanSize();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
750	[BUG]  [BUGGY]  Savings  +=  reduction.getStandardSuccess();  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getStandardSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getStandardSuccess();	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
751	[BUG]  [BUGGY]  Savings  +=  reduction.assertSuccess();  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.assertSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.assertSuccess();	  Savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	64	None	replace
752	[BUG]  [BUGGY]  Saving  -=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  Saving  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	81	None	replace
753	[BUG]  [BUGGY]  Savings  savings  +=  reduction.removeSavings();  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.removeSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.removeSavings();	  Savings    savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	37	None	replace
754	[BUG]  [BUGGY]  Savings.assertSavings(reduction.estimateSavings());  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.assertSavings(reduction.estimateSavings());  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.assertSavings(reduction.estimateSavings());  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Savings	60	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	18	None	replace
756	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds()  *  reduction.getSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getSeconds()  *  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds()  *  reduction.getSeconds();	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
757	[BUG]  [BUGGY]  Saving  +=  reduction.getMeanSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getMeanSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getMeanSeconds();	  Saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	108	None	replace
758	[BUG]  [BUGGY]  Savings.checkSavings(reduction.getSavings());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.checkSavings(reduction.getSavings());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.checkSavings(reduction.getSavings());	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
759	[BUG]  [BUGGY]  Savings.applySavings(reduction.getValue());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.applySavings(reduction.getValue());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings(reduction.getValue());	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
760	[BUG]  [BUGGY]  Savings.checkSavings(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.checkSavings(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.checkSavings(reduction);	  Savings.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	38	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
762	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  4;  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  4;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  4;	  savings    +=    reduction.getSavings()    -    2;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
763	[BUG]  [BUGGY]  Savings  +=  reduction.applyingRoot();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applyingRoot();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applyingRoot();	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
764	[BUG]  [BUGGY]  Savings  +=  reduction.apply(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.apply(reduction);	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
765	[BUG]  [BUGGY]  Savings  +=  reduction.apply(savings);  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.apply(savings);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.apply(savings);	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
766	[BUG]  [BUGGY]  Savings  +=  reduction.toString();  [CE]  cannot  find  symbol  Savings  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.toString();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.toString();	  Savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	35	None	replace
767	[BUG]  [BUGGY]  Saving  -=  reduction.getSavings();  [CE]  cannot  find  symbol  Saving  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.getSavings();	  savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	41	None	replace
768	[BUG]  [BUGGY]  savings  -=  reductions.getSavings();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reductions.getSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reductions.getSavings();	  savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  null);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	17	None	replace
770	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,<null>,int)  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  null,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,<null>,int)	17	None	replace
771	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  null);  [CE]  cannot  find  symbol  pruningRoot  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	17	None	replace
772	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Saving  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reduction    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Saving	61	None	replace
773	[BUG]  [BUGGY]  Savings  +=  reduction.applyStandardSavings();  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applyStandardSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applyStandardSavings();	  Savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	39	None	replace
774	[BUG]  [BUGGY]  réduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  r  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduction  =  compiler.getNodeForCodeInsertion(null);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  r	96	None	replace
775	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  helpingerCodeCost;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  helpingerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  helpingerCodeCost;	  savings    +=    reduction.getSize()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
776	[BUG]  [BUGGY]  savings  +=  reduction.apply(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.apply(reduction,  helpingerCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(reduction,  helpingerCodeCost);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	88	None	replace
777	[BUG]  [BUGGY]  Saving  +=  reduction.apply(reduction,  contributingRoot);  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(reduction,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(reduction,  contributingRoot);	  savings    +=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Saving	88	None	replace
778	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  saving  +=  reduction.estimateSavings()  /  1;  [CE]  cannot  find  symbol  saving  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  saving  +=  reduction.estimateSavings()  /  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    /    1;    saving  +=  reduction.estimateSavings()  /  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	76	None	add
779	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  null);  [CE]  cannot  find  symbol  helpingRoot  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  null);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helpingRoot,  null);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    null);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	16	None	replace
780	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  root);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  root);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	74	None	replace
781	[BUG]  [BUGGY]  savings  -=  reduction.getSize();  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize();  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
782	[BUG]  [BUGGY]  savings  -=  reduction.getSize();  reduction.setSavings(saved);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.getSize();  reduction.setSavings(saved);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize();  reduction.setSavings(saved);	  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
783	[BUG]  [BUGGY]  savings  +=  reductions.getSeconds()  -  2;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSeconds()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSeconds()  -  2;	  savings    +=    reduction.getSeconds()    -    2;    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
784	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
785	[BUG]  [BUGGY]  save  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  save  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  save  +=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	save  +=  reduction.getSeconds();	  saving    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  save	109	None	replace
786	[BUG]  [BUGGY]  Savings  savings  +=  reduction.toString();  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.toString();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.toString();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
787	[BUG]  [BUGGY]  Savings  savings  +=  reduction.get();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.get();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.get();	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
788	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply(reduction);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply(reduction);	  Savings    savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	32	None	replace
789	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  this);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  this);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	106	None	replace
790	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	106	None	replace
791	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCode);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCode);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	106	None	replace
792	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,int,Reducer)  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,Node,int,Reducer)	13	None	replace
793	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  pruningRoot  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	13	None	replace
794	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  addingRoot  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost,  reducer);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	13	None	replace
795	[BUG]  [BUGGY]  savings  +=  reductions.getSeconds()  -  1;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reductions.getSeconds()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reductions.getSeconds()  -  1;	  savings    +=    reduction.getSeconds()    -    1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
796	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reductions.getLastChild();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reductions.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reductions.getLastChild();	  savings    +=    reduction.getSize()    -    reduction.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
797	[BUG]  [BUGGY]  saving  +=  reduction.getSuccess();  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.getSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.getSuccess();	  savings    +=    reduction.getSuccess();    	non-compiled	[CE]  cannot  find  symbol  saving	51	None	replace
798	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	110	None	replace
799	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCodeCost);	          helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	110	None	replace
800	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helpingerCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helpingerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  helpingerCodeCost;	  savings    +=    reduction.estimateSuccess()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
801	[BUG]  [BUGGY]  Savings  -=  reduction.getLeastSavings();  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getLeastSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getLeastSavings();	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
802	[BUG]  [BUGGY]  Savings  -=  reduction.getMeanSavings();  [CE]  cannot  find  symbol  Savings  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getMeanSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getMeanSavings();	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
803	[BUG]  [BUGGY]  Savings  -=  reduction.getValues();  [CE]  cannot  find  symbol  Savings  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  -=  reduction.getValues();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getValues();	  Savings    -=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	43	None	replace
804	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getLocalSavings();  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getLocalSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getLocalSavings();	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
805	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getMillis();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getMillis();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getMillis();	  Savings    savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	9	None	replace
806	[BUG]  [BUGGY]  Reducer  reducer  +=  reduction.estimateSavings()  -  1;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  +=  reduction.estimateSavings()  -  1;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Reducer  reducer  +=  reduction.estimateSavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    reducers    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  ';'  expected	94	None	replace
807	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings()  -  SAVINGS_THRESHOLD;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  SAVINGS_THRESHOLD;	  savings    +=    reduction.applySavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
808	[BUG]  [BUGGY]  Saving  +=  reduction.reductions.estimateSuccess();  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.reductions.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.reductions.estimateSuccess();	  Saving    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	107	None	replace
809	[BUG]  [BUGGY]  savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSeconds();  Saving  -=  reduction.estimateSavings();	  savings    -=    reduction.estimateSavings();    Saving    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
810	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD,  helperCodeCost;  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD,  helperCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD,  helperCodeCost;	  savings    +=    reduction.getSeconds()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  ';'  expected	46	None	replace
811	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  helpingerCodeCost;  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSavings()  -  helpingerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  helpingerCodeCost;	  savings    +=    reduction.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
812	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	25	None	replace
813	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  if(helperCodeCost  ==  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	if(helperCodeCost  ==  null)  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	25	None	replace
814	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	for(Reduction  reduction  :  reductions.values())  {  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  }	  savings    -=    reduction.estimateSavings();    int    helperCodeCost    =    reduction.estimateSavings();    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	25	None	replace
815	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction,  helpingerCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction,  helpingerCodeCost);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	45	None	replace
816	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction,  saving);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction,  saving);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	45	None	replace
817	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	45	None	replace
818	[BUG]  [BUGGY]  savings  -=  reduction.apply(reduction,  addingRoot);  [CE]  cannot  find  symbol  addingRoot  [FE]                        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(reduction,  addingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(reduction,  addingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	45	None	replace
819	[BUG]  [BUGGY]  savings  -=  reduction.apply(savedRoot,  contributingRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]                          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.apply(savedRoot,  contributingRoot);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(savedRoot,  contributingRoot);	  savings    -=    reduction.apply(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	45	None	replace
820	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.applySavings(saverCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(saverCodeCost);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	86	None	replace
821	[BUG]  [BUGGY]  Savings  +=  reduction.applySavings(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.applySavings(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySavings(reduction);	  savings    +=    reduction.applySavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Savings	86	None	replace
822	[BUG]  [BUGGY]  Savings  +=  reduction.getMeanSavings();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getMeanSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getMeanSavings();	  Savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	11	None	replace
823	[BUG]  [BUGGY]  savings.add(reduction.estimateSavings());  Savings.Savings.size();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings.add(reduction.estimateSavings());  Savings.Savings.size();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings.add(reduction.estimateSavings());  Savings.Savings.size();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
824	[BUG]  [BUGGY]  savings.add(reduction.estimateSavings()  -  1);  Savings.Savings.size();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings.add(reduction.estimateSavings()  -  1);  Savings.Savings.size();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings.add(reduction.estimateSavings()  -  1);  Savings.Savings.size();	  savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
825	[BUG]  [BUGGY]  Saving  +=  reduction.apply(reduction.getLastChild());  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(reduction.getLastChild());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(reduction.getLastChild());	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
826	[BUG]  [BUGGY]  Saving  +=  reduction.apply(reduction);  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(reduction);	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
827	[BUG]  [BUGGY]  Saving  +=  reduction.apply(reduction.getFirstChild());  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(reduction.getFirstChild());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(reduction.getFirstChild());	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
828	[BUG]  [BUGGY]  Saving  +=  reduction.apply(reduction.getParent());  [CE]  cannot  find  symbol  Saving  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.apply(reduction.getParent());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply(reduction.getParent());	  Saving    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	89	None	replace
829	[BUG]  [BUGGY]  Savings  +=  reduction.getMeanSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getMeanSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getMeanSeconds();	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
830	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds()  *  savings;  [CE]  cannot  find  symbol  Savings  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getSeconds()  *  savings;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds()  *  savings;	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
831	[BUG]  [BUGGY]  Savings  +=  reduction.getLeastSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getLeastSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getLeastSeconds();	  Savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	67	None	replace
832	[BUG]  [BUGGY]  save  +=  reduction.applySavings();  [CE]  cannot  find  symbol  save  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  save  +=  reduction.applySavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	save  +=  reduction.applySavings();	  saving    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  save	101	None	replace
833	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  HELPER_SOURCE.getSeconds();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  *  HELPER_SOURCE.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  HELPER_SOURCE.getSeconds();	  savings    +=    reduction.getSeconds()    *    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
834	[BUG]  [BUGGY]  savings  -=  reduction.applyTo(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.applyTo(helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.applyTo(helperCodeCost);	  savings    -=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
835	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost);  [CE]  cannot  find  symbol  pruningRoot  [FE]            AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	14	None	replace
836	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduced.getLength();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  -  reduced.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduced.getLength();	  savings    +=    reduction.getSize()    -    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
837	[BUG]  [BUGGY]  Saving  +=  reduction.getValue();  [CE]  cannot  find  symbol  Saving  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getValue();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getValue();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
838	[BUG]  [BUGGY]  Saving  +=  reduction.getMeanSize();  [CE]  cannot  find  symbol  Saving  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.getMeanSize();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getMeanSize();	  Saving    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	102	None	replace
839	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getStandardSuccess();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  savings  +=  reduction.getStandardSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getStandardSuccess();	  Savings    savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	55	None	replace
840	[BUG]  [BUGGY]  saving  +=  reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  saving  +=  reduction.prototype.estimateSuccess();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.prototype.estimateSuccess();	  savings    +=    reduction.prototype.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  saving	52	None	replace
841	[BUG]  [BUGGY]  savings  -=  reduction.reduction.getLength();  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reduction.reduction.getLength();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.reduction.getLength();	  savings    -=    reduction.getLength();    	non-compiled	[CE]  cannot  find  symbol  reduction	111	None	replace
842	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  +=  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSavings();	  savings    +=    reduction.estimateSavings()    -    1;    saving    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  Saving	99	None	replace
843	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  2;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccess()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  2;	  savings    +=    reduction.estimateSuccess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
844	[BUG]  [BUGGY]  Savings  +=  reduction.getLastChild();  [CE]  cannot  find  symbol  Savings  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getLastChild();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getLastChild();	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
845	[BUG]  [BUGGY]  Savings  +=  reduction.getValue();  [CE]  cannot  find  symbol  Savings  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings  +=  reduction.getValue();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getValue();	  Savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	82	None	replace
846	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,reducing);  [CE]  cannot  find  symbol  reducing  [FE]          AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,reducing);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,reducing);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	70	None	replace
847	[BUG]  [BUGGY]  réduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	réduction  =  compiler.getNodeForCodeInsertion(reduction);	  savings    +=    reduction.estimateSavings()    -    1;    Reducer    reduction    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	97	None	replace
848	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  helpingerCodeCost;  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSeconds()  -  helpingerCodeCost;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  helpingerCodeCost;	  savings    +=    reduction.getSeconds()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
849	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	73	None	replace
850	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  CHELPER_SOURCE;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.getSize()  /  CHELPER_SOURCE;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  CHELPER_SOURCE;	  savings    +=    reduction.getSize()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
851	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.DEFAULT_SOURCE,  new  GetterReducer());  [CE]  cannot  find  symbol  HelperReducer  [FE]              AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.DEFAULT_SOURCE,  new  GetterReducer());  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperReducer.DEFAULT_SOURCE,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	72	None	replace
852	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    saving  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  saving	26	None	add
853	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  discounts  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  discounts  [FE]      AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  discounts  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    discounts  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  discounts	26	None	add
854	[BUG]  [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  réduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [CE]  cannot  find  symbol  r  [FE]        AssertionFailedError    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings    -=    reduction.estimateSavings();    reduction.estimateSavings();  réduction  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings        -=        reduction.estimateSavings();        reduction.estimateSavings();    réduction  -=  reduction.estimateSavings();  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  r	26	None	add
855	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors()  -  2;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  +=  reduction.estimateSuccessors()  -  2;  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors()  -  2;	  savings    +=    reduction.estimateSuccessors()    -    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
856	[BUG]  [BUGGY]  Saving  -=  reduction.getSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Saving  -=  reduction.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  -=  reduction.getSeconds();	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	44	None	replace
857	[BUG]  [BUGGY]  savings  -=  reductions.getSeconds();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings  -=  reductions.getSeconds();  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reductions.getSeconds();	  savings    -=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
858	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost,  reduction);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        AssertionFailedError      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost,  reduction);  [BUGGY]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	12	None	replace
