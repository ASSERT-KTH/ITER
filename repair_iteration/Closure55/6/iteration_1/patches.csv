bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
2	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  1;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  1;	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
3	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getSize();  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getSize();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
4	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  -  helperCodeCost;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  helperCodeCost;	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLength();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLength();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getLength();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSize()  -  reduction.getLastChild();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSize()  -  reduction.getLastChild();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSavings()  -  helperCodeCost;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  helperCodeCost;	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSavings();  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  savings  +=  reduction.getSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSavings();	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  1;  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  1;	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  Savings  +=  reduction.getSavings();  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.getSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSavings();	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	1	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction)  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reduction);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,FunctionRewriter.Reduction)	9	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,Reducer)  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,Reducer)	9	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int)  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int)	9	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction)  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction)	9	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,<null>)  [FE]            AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  null);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  null);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,<null>)	9	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,<null>)  [FE]              AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  null);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,<null>)	9	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int)  [FE]                AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.Reduction,int)	9	None	replace
19	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Savings  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  Savings  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    Savings  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Savings	4	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	4	8	add
21	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  savings  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    savings  -=  reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	4	8	add
22	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  Saving  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  Saving  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    Saving  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  Saving	4	None	add
23	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  reduction  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    reduction  -=  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	add
24	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  -=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    -=  reduction.estimateSavings();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
25	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    int  helperCodeCost  =  reduction.estimateSavings();	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    -=    reduction.estimateSavings();    reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	4	8	add
27	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    reduction.estimateSavings();	  	compilable	  [FE]  AssertionFailedError  	4	8	add
28	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  [CE]  variable  savings  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  int  savings  =  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    int  savings  =  reduction.estimateSavings();	  	non-compiled	[CE]  variable  savings  is  already  defined  in  method  process(Node,Node)	4	None	add
29	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.applySavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
30	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  *  1;	  savings    +=    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	11	1	replace
31	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  *  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  *  1;	  savings    +=    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	11	1	replace
32	[BUG]  [BUGGY]  Savings  savings  +=  reduction.apply();  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  savings  +=  reduction.apply();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.apply();	  savings    +=    reduction.apply();    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  Savings.apply(reduction.apply());  [CE]  'void'  type  not  allowed  here  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings.apply(reduction.apply());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.apply(reduction.apply());	  savings    +=    reduction.apply();    	non-compiled	[CE]  'void'  type  not  allowed  here	3	None	replace
34	[BUG]  [BUGGY]  savings  -=  reduction.apply();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.apply();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply();	  savings    +=    reduction.apply();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
35	[BUG]  [BUGGY]  Savings  +=  reduction.apply();  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.apply();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.apply();	  savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Savings	3	None	replace
36	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]      NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	        NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
37	[BUG]  [BUGGY]  Savings  savings  +=  reduction.applySavings();  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  savings  +=  reduction.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.applySavings();	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  ';'  expected	2	None	replace
38	[BUG]  [BUGGY]  Savings.applySavings();  [CE]  cannot  find  symbol  Savings  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings.applySavings();	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	2	None	replace
39	[BUG]  [BUGGY]  Savings  +=  reduction.applySavings();  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.applySavings();	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	2	None	replace
40	[BUG]  [BUGGY]  savings  -=  reduction.applySavings();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.applySavings();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
41	[BUG]  [BUGGY]  savings  -=  reduction.getSavings();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.getSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSavings();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  savings  -=  reduction.getSize();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.getSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSize();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
43	[BUG]  [BUGGY]  Savings  -=  reduction.getSavings();  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  -=  reduction.getSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  -=  reduction.getSavings();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Savings	5	None	replace
44	[BUG]  [BUGGY]  savings  -=  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getSeconds();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
45	[BUG]  [BUGGY]  savings  -=  reduction.apply(helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.apply(helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.apply(helperCodeCost);	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	5	None	replace
46	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
47	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  1;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSeconds()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  1;	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  Savings  savings  +=  reduction.getSeconds();  [CE]  ';'  expected  [FE]                      IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  savings  +=  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.getSeconds();	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  ';'  expected	7	None	replace
49	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSeconds()  -  helperCodeCost;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  helperCodeCost;	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSeconds()  *  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  *  reduction.getSeconds();	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
51	[BUG]  [BUGGY]  savings  +=  reduction.getSuccess();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
52	[BUG]  [BUGGY]  savings  +=  reduction.prototype.estimateSuccess();  [CE]  cannot  find  symbol  prototype  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.prototype.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.prototype.estimateSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  prototype	12	None	replace
53	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSuccess()  -  helperCodeCost;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  helperCodeCost;	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
54	[BUG]  [BUGGY]  savings  +=  reduction.reduction.estimateSuccess();  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.reduction.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reduction.estimateSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
55	[BUG]  [BUGGY]  Savings  savings  +=  reduction.estimateSuccess();  [CE]  ';'  expected  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  savings  +=  reduction.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  savings  +=  reduction.estimateSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  ';'  expected	12	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	9	add
57	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    savings  +=  reduction.estimateSavings()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	9	add
58	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Savings  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	10	None	add
59	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  -=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Savings  -=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	10	None	add
60	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reduction.estimateSavings()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  not  a  statement	10	None	add
61	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reduction  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reduction  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    reduction  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	add
62	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  =  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings  =  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Savings  =  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Savings	10	None	add
63	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings.Savings.size()  -  1;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Savings.Savings.size()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Savings.Savings.size()  -  1;	  	non-compiled	[CE]  not  a  statement	10	None	add
64	[BUG]  [BUGGY]  Savings  +=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  Savings  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.estimateSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Savings	12	None	replace
65	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  /  SAVINGS_THRESHOLD;	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
66	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccess()  -  1;  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSuccess()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccess()  -  1;	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
67	[BUG]  [BUGGY]  Savings  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  Savings  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSeconds();	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Savings	7	None	replace
68	[BUG]  [BUGGY]  savings  +=  reduction.getSeconds()  -  2;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSeconds()  -  2;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSeconds()  -  2;	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
69	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction);	      	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	9	None	replace
70	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction)  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);	      	non-compiled	[CE]  no  suitable  method  found  for  getCost(FunctionRewriter.Reduction)	9	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,GetterReducer)  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,GetterReducer)	9	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,GetterReducer)  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  new  GetterReducer());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  new  GetterReducer());	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,int,GetterReducer)	9	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	9	None	replace
74	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null);	      	non-compiled	[CE]  incompatible  types	9	None	replace
75	[BUG]  [BUGGY]  savings  +=  reduction.getSavings()  -  2;  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getSavings()  -  2;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getSavings()  -  2;	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
76	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  +=  reduction.estimateSavings()  /  1;	  savings    +=    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	11	1	replace
77	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  /  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSavings()  /  1;	  savings    +=    reduction.estimateSavings()    -    1;    	compilable	  [FE]  IllegalStateException  	11	1	replace
78	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]      NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer());  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	        NodeTraversal.traverse(compiler,  reduction,  new  ReturnReducer());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	savings  -=  reduction.estimateSavings()  +  1;	  savings    -=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	5	8	replace
80	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings()  +  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSavings()  +  1;	  savings    -=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	5	8	replace
81	[BUG]  [BUGGY]  savings  -=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.estimateSuccess();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
82	[BUG]  [BUGGY]  Savings  +=  reduction.getSize();  [CE]  cannot  find  symbol  Savings  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Savings  +=  reduction.getSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Savings  +=  reduction.getSize();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Savings	6	None	replace
83	[BUG]  [BUGGY]  savings  +=  reduction.getLength();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getLength();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getLength();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
84	[BUG]  [BUGGY]  savings  +=  reduction.getMeanSize();  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getMeanSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getMeanSize();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
85	[BUG]  [BUGGY]  savings  +=  reduction.getReductionSize();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.getReductionSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.getReductionSize();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
86	[BUG]  [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.applySavings(helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings(helperCodeCost);	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
87	[BUG]  [BUGGY]  savings  +=  reduction.applySavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.applySavings()  -  helperCodeCost;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.applySavings()  -  helperCodeCost;	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
88	[BUG]  [BUGGY]  savings  +=  reduction.apply(helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.apply(helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.apply(helperCodeCost);	  savings    +=    reduction.apply();    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	3	None	replace
89	[BUG]  [BUGGY]  Saving  +=  reduction.apply();  [CE]  cannot  find  symbol  Saving  [FE]              IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Saving  +=  reduction.apply();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.apply();	  savings    +=    reduction.apply();    	non-compiled	[CE]  cannot  find  symbol  Saving	3	None	replace
90	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	4	None	add
91	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  reducer  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    reducer  -=  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	add
92	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  reducers  -=  reduction.estimateSavings();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  reducers  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    reducers  -=  reduction.estimateSavings();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	add
93	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	4	None	add
94	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reducers  +=  reduction.estimateSavings()  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  reducers  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    reducers  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	add
95	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  saves  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  saves  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    saves  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  saves	10	None	add
96	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	10	None	add
97	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    Reducer  reduction  =  compiler.getNodeForCodeInsertion(reduction);	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	10	None	add
98	[BUG]  [BUGGY]  savings  +=  reduction.reductionMap.getSavings();  [CE]  cannot  find  symbol  reductionMap  [FE]        IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.reductionMap.getSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.reductionMap.getSavings();	  savings    +=    reduction.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reductionMap	1	None	replace
99	[BUG]  [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSavings()  -  1;  saving  +=  reduction.estimateSavings()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    +=    reduction.estimateSavings()    -    1;    saving  +=  reduction.estimateSavings()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  saving	10	None	add
100	[BUG]  [BUGGY]  Saving  +=  reduction.applySavings();  [CE]  cannot  find  symbol  Saving  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Saving  +=  reduction.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.applySavings();	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  Saving	2	None	replace
101	[BUG]  [BUGGY]  saving  +=  reduction.applySavings();  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  saving  +=  reduction.applySavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.applySavings();	  savings    +=    reduction.applySavings();    	non-compiled	[CE]  cannot  find  symbol  saving	2	None	replace
102	[BUG]  [BUGGY]  Saving  +=  reduction.getSize();  [CE]  cannot  find  symbol  Saving  [FE]                IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Saving  +=  reduction.getSize();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSize();	  savings    +=    reduction.getSize();    	non-compiled	[CE]  cannot  find  symbol  Saving	6	None	replace
103	[BUG]  [BUGGY]  savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.estimateSavings();  saving  -=  reduction.estimateSavings();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings    -=    reduction.estimateSavings();    saving  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  saving	4	None	add
104	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,FunctionRewriter)  [FE]        AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  this);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	NodeTraversal.traverse(compiler,  reduction,  this);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,FunctionRewriter.Reduction,FunctionRewriter)	9	None	replace
107	[BUG]  [BUGGY]  Saving  +=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  Saving  [FE]          IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Saving  +=  reduction.estimateSuccess();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.estimateSuccess();	  savings    +=    reduction.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  Saving	12	None	replace
108	[BUG]  [BUGGY]  Saving  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  Saving  +=  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	Saving  +=  reduction.getSeconds();	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  Saving	7	None	replace
109	[BUG]  [BUGGY]  saving  +=  reduction.getSeconds();  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  saving  +=  reduction.getSeconds();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	saving  +=  reduction.getSeconds();	  savings    +=    reduction.getSeconds();    	non-compiled	[CE]  cannot  find  symbol  saving	7	None	replace
110	[BUG]  [BUGGY]      helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  no  suitable  method  found  for  getCost(int)  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]      helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	        helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	8	None	add
111	[BUG]  [BUGGY]  savings  -=  reduction.getLength();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  -=  reduction.getLength();  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  -=  reduction.getLength();	  savings    -=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
112	[BUG]  [BUGGY]  savings  +=  reduction.estimateSuccessors()  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {    [BUGGY]  savings  +=  reduction.estimateSuccessors()  -  1;  [BUGGY]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	savings  +=  reduction.estimateSuccessors()  -  1;	  savings    +=    reduction.estimateSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
