bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
2	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
3	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer);  [CE]  cannot  find  symbol  [FE]        IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reducer);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reduction);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reduction);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
5	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reducer);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reducer);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	1	None	replace
6	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
7	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer);  [CE]  cannot  find  symbol  [FE]                IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  helperCode  [FE]                  IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]    [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	  	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  cannot  find  symbol  helperCode	1	None	replace
9	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]    IllegalStateException  [CONTEXT]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions);  [BUGGY]  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions);	Node  helperCode  =  parseHelperCode(reducer);  	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	1	None	replace
