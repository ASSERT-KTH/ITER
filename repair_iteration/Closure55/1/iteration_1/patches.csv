bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(compiler);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(compiler);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(compiler);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(compiler);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(root,  reduction);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
4	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  reduction);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
5	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
6	[BUG]  [BUGGY]  Node  helperCode  =  reduction.parseHelperCode(compiler);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reduction.parseHelperCode(compiler);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
7	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo());  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
8	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reduction);	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
9	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(root);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root);	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	1	None	replace
10	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getParent());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
11	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getReduction());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
12	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
13	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
14	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
15	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCodeCost);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCodeCost);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	9	None	replace
16	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
17	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCode);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
18	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  result);  [CE]  cannot  find  symbol  result  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  result);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  result);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  result	9	None	replace
19	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  root);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  root);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
20	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
21	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
22	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  mitigation);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  mitigation);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  mitigation);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	8	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions));  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions));	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	replace
25	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
26	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reductions.get(reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reduction);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions),  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions),  reductions);	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions));  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions));	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions));  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions));	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	replace
30	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
31	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reducer);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
32	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reduction);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
33	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reducer);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reducer);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
34	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  reducer);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
35	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root,  reduction);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
36	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(root);	  Node    helperCode    =    compiler.parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
37	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(null);	  Node    helperCode    =    compiler.parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
38	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction;  [CE]  ')'  expected  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction;  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction;	  Node    helperCode    =    compiler.parseHelperCode(reduction);    	non-compiled	[CE]  ')'  expected	6	None	replace
39	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(rededuction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(rededuction);	  Node    helperCode    =    compiler.parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  rededuction	6	None	replace
40	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
41	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	5	None	replace
42	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reduction);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
43	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	5	None	replace
44	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  reducer);  [CE]  cannot  find  symbol  r  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  réduir,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  r	5	None	replace
45	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reducer);  [CE]  cannot  find  symbol  reducerir  [FE]                          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reducer);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerir	5	None	replace
46	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  contributingRoot);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
47	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  SAVINGS_THRESHOLD);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
48	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  parent);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  parent);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  parent);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
49	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer,  reducer);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer,  reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reducer,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
50	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  root);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  root);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  root,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  root,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  root,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
52	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  helperCodeCost);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  helperCodeCost);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	9	None	replace
53	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCode);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCode);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	5	None	replace
54	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCodeCost);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  helperCodeCost);	  Node    helperCode    =    parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	5	None	replace
55	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource());  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getSource());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
56	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction;  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction;  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction;	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  ')'  expected	1	None	replace
57	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
58	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root);	  Node    helperCode    =    parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
59	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  limiter);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  limiter);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  limiter);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
60	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  addr);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  addr);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  addr);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
61	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getSingleReturnStatement();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reducer.getSingleReturnStatement();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getSingleReturnStatement();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
62	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getInitializingReduction();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reducer.getInitializingReduction();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getInitializingReduction();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
63	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getReduction();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reducer.getReduction();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getReduction();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
64	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reducer);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reductions.get(reducer);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reducer);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
65	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings());  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSavings());	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
66	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getHelper();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reducer.getHelper();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getHelper();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  pruning);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  pruning);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  pruning);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
68	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  savings);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  savings);	  Node    helperCode    =    parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
69	[BUG]  [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
70	[BUG]  [BUGGY]  Node  helperCode  =  reduceres.parseHelperCode(compiler);  [CE]  cannot  find  symbol  reduceres  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reduceres.parseHelperCode(compiler);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceres.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduceres	3	None	replace
71	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  aider);  [CE]  cannot  find  symbol  aider  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  aider);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  aider);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aider	9	None	replace
72	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helper);  [CE]  cannot  find  symbol  helper  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helper);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  helper);	  Node    helperCode    =    parseHelperCode(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helper	9	None	replace
73	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction);  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reduction);	  Node    helperCode    =    parseHelperCode(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
74	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
75	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
76	[BUG]  [BUGGY]  Node  helperCode  =  reductions.iterator().next();  [CE]  incompatible  types  [FE]                          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  reductions.iterator().next();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.iterator().next();	      	non-compiled	[CE]  incompatible  types	8	None	replace
77	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings();  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings();  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings();	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
78	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue());  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
79	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName());  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }    [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName());  [BUGGY]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getName());	  Node    helperCode    =    parseHelperCode(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
