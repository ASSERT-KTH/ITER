bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions.size());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions.size());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reductions.size());	  Node    helperCode    =    parseHelperCode(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
2	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
3	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  reductions);	  Node    helperCode    =    parseHelperCode(reduction,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	20	None	replace
4	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reductions,  savings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reductions,  savings);	  Node    helperCode    =    parseHelperCode(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
5	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  extension);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  extension);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  extension);	  Node    helperCode    =    parseHelperCode(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
6	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.parent);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reduction.parent);	  Node    helperCode    =    parseHelperCode(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
7	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reductions);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(compiler,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
8	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductionMap,  reductions);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductionMap,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reductionMap,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
9	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reductions);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
10	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
11	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions,  reductions);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reductions,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
12	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  reductions);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
13	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  null);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  null);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
14	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions).estimateSavings();  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)	77	None	replace
15	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSavings()).estimateSavings();  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSavings()).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSavings()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	77	None	replace
16	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE).estimateSavings();  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	77	None	replace
17	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [CE]  cannot  find  symbol  helperCode  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  helperCode	77	None	replace
18	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction).estimateSavings();  [CE]  cannot  find  symbol  rededuction  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  rededuction	77	None	replace
19	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
20	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction.estimateSavings());  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
21	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reductions.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reductions.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reductions.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
22	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
23	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
24	[BUG]  [BUGGY]  NodehelperCode  resultCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  resultCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  resultCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
25	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getJSDocInfo());  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getJSDocInfo());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.getJSDocInfo());	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
26	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.getParent());	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
27	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.parent);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.parent);	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
28	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  reduction);	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
29	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getReduction());  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.getReduction());	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
30	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(0).next();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(0).next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(0).next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
31	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reductions.size()  -  1);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reductions.size()  -  1);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reductions.size()  -  1);	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
32	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.get(reductions.size()  -  1);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.get(reductions.size()  -  1);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.get(reductions.size()  -  1);	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	76	None	replace
33	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getFirstChild().getNext();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getFirstChild().getNext();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
34	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getFirstChild().next();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getFirstChild().next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getFirstChild().next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCode));  [CE]  cannot  find  symbol  helperCode  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCode));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCode));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCode	24	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root,  reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root,  reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions,  root));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions,  root));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions,  root));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCodeCost));  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCodeCost));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions,  helperCodeCost));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  contributingRoot));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  contributingRoot));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	24	None	replace
42	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getNext());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getNext());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getNext());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
43	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getParent(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
44	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getParent(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
45	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root.getParent());  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	10	None	replace
46	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getLastChild());  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getLastChild());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getLastChild());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
47	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getFirstChild());  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getFirstChild());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getFirstChild());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
48	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reductions);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	73	None	replace
49	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reducer);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	73	None	replace
50	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap.get(reduction));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap.get(reduction));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap.get(reduction));	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
51	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reducedr);  [CE]  cannot  find  symbol  reducedr  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reducedr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reducedr);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducedr	73	None	replace
52	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  réduir);  [CE]  cannot  find  symbol  r  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  réduir);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	73	None	replace
53	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reduction);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
54	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductions);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
55	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  null);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductions,  null);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
56	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  null);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
57	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  null);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(root,  null);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
58	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reductions);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(null,  reductions);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
59	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	14	None	replace
60	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
61	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	14	None	replace
62	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
63	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot,  reducer);  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	14	None	replace
64	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reducer);  [CE]  cannot  find  symbol  extension  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  extension	14	None	replace
65	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root);	  Node    helperCode    =    parseHelperCode(compiler,    reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	21	None	replace
66	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction.reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction.reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction.reduction);	  Node    helperCode    =    parseHelperCode(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
67	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer.reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer.reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer.reduction);	  Node    helperCode    =    parseHelperCode(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
68	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducedr);  [CE]  cannot  find  symbol  reducedr  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducedr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducedr);	  Node    helperCode    =    parseHelperCode(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducedr	21	None	replace
69	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  reducer);	  Node    helperCode    =    parseHelperCode(root);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
70	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  reduction);	  Node    helperCode    =    parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
71	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductions,  root);	  Node    helperCode    =    parseHelperCode(root);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	9	None	replace
72	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer.getParent());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  reducer.getParent());	  Node    helperCode    =    parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
73	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer.getType());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  reducer.getType());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  reducer.getType());	  Node    helperCode    =    parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
74	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)	25	None	replace
75	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  cannot  find  symbol  helperCode  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  helperCode	25	None	replace
76	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	25	None	replace
77	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [CE]  cannot  find  symbol  saver  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saver);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	25	None	replace
78	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction;  [CE]  ')'  expected  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction;  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  ')'  expected	25	None	replace
79	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
80	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  HELPER_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  HELPER_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
81	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  COLLECTION);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  COLLECTION);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  COLLECTION);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
82	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
83	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
84	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getKey());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getKey());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getKey());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
85	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
86	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getType());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getType());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getType());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
87	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
88	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	16	None	replace
89	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	16	None	replace
90	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	16	None	replace
91	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	16	None	replace
92	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	16	None	replace
93	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  contributingRoot);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	16	None	replace
94	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  deductions);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  deductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  deductions);	  Node    helperCode    =    parseHelperCode(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	replace
95	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  saving);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  saving);	  Node    helperCode    =    parseHelperCode(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	replace
96	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  mitigations);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  mitigations);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  mitigations);	  Node    helperCode    =    parseHelperCode(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	replace
97	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	40	None	replace
98	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	40	None	replace
99	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer.reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer.reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  reducer.reduction);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
100	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reductions.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reductions.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reductions.estimateSavings());	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
101	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
102	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
103	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
104	[BUG]  [BUGGY]  InlineCostEstimator.getCost(compiler.estimateSavings());  [CE]  cannot  find  symbol  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(compiler.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(compiler.estimateSavings());	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
105	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSavings(),  saving);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSavings(),  saving);	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
106	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	52	None	replace
107	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	52	None	replace
108	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  HELPER_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	52	None	replace
109	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductions,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	52	None	replace
110	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	13	None	replace
111	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	13	None	replace
112	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	13	None	replace
113	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCodeCost);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCodeCost);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	13	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	28	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer(reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer(reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer(reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	28	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	28	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	28	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer(reductions));  [CE]  cannot  find  symbol  extension  [FE]                                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer(reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer(reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  cannot  find  symbol  extension	28	None	replace
119	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	51	None	replace
120	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  reductions);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  réduir,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  r	51	None	replace
121	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions);  [CE]  cannot  find  symbol  roots  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  roots	51	None	replace
122	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
123	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduceres,  root);  [CE]  cannot  find  symbol  reduceres  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduceres,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduceres,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduceres	51	None	replace
124	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helper);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	72	None	replace
125	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions.size());  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions.size());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reductions.size());	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helper);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	72	None	replace
126	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reduction);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helper);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
127	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.get(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.get(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.get(reduction);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	26	None	replace
128	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(helper);  [CE]  cannot  find  symbol  helper  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(helper);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(helper);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol  helper	26	None	replace
129	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(helperCode);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(helperCode);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
130	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(null);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(null);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
131	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(compiler);  [CE]  cannot  find  symbol  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(compiler);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
132	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
133	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	50	None	replace
134	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  root);  [CE]  cannot  find  symbol  r  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  réduir,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root);    	non-compiled	[CE]  cannot  find  symbol  r	50	None	replace
135	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  root);  [CE]  cannot  find  symbol  reducerir  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerir,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root);    	non-compiled	[CE]  cannot  find  symbol  reducerir	50	None	replace
136	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionr);  [CE]  cannot  find  symbol  reductionr  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductionr);	  Node    helperCode    =    reducer.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reductionr	69	None	replace
137	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.parseHelperCode(reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeHelperCode  helperCode  =  compiler.parseHelperCode(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeHelperCode  helperCode  =  compiler.parseHelperCode(reduction);	  Node    helperCode    =    reducer.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
138	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduer);  [CE]  cannot  find  symbol  reduer  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduer);	  Node    helperCode    =    reducer.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reduer	69	None	replace
139	[BUG]  [BUGGY]  Node  HelperCode  =  compiler.parseHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  HelperCode  =  compiler.parseHelperCode(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  HelperCode  =  compiler.parseHelperCode(reduction);	  Node    helperCode    =    reducer.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
140	[BUG]  [BUGGY]  Node  helperCode  =  root.parseHelperCode(compiler);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  root.parseHelperCode(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  root.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
141	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reductions);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(root,  reductions);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
142	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  root);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductions,  root);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
143	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  root);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	36	None	replace
144	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(compiler,    reducerir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	45	None	replace
145	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  saver);  [CE]  cannot  find  symbol  saver  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  saver);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  saver);	  Node    helperCode    =    parseHelperCode(compiler,    reducerir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  saver	45	None	replace
146	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.get(reducer);  [CE]  incompatible  types  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.get(reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.get(reducer);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  incompatible  types	64	None	replace
147	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reductionr);  [CE]  cannot  find  symbol  reductionr  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reductionr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reductionr);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionr	64	None	replace
148	[BUG]  [BUGGY]  Node  helperCode  =  reductionmap.get(reducer);  [CE]  cannot  find  symbol  reductionmap  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionmap.get(reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionmap.get(reducer);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionmap	64	None	replace
149	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.getType());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.getType());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.getType());	  Node    helperCode    =    parseHelperCode(compiler,    reductions);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
150	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionMap,  root);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionMap,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductionMap,  root);	  Node    helperCode    =    compiler.parseHelperCode(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
151	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reducer);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(root,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(root,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
152	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reduction);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
153	[BUG]  [BUGGY]  Node  helperCode  =  reductions.parseHelperCodeCost(compiler);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.parseHelperCodeCost(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.parseHelperCodeCost(compiler);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
154	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(root,  reduction);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
155	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(root);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
156	[BUG]  [BUGGY]  Node  helperCode  =  reduction.parseHelperCodeCost(compiler);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.parseHelperCodeCost(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.parseHelperCodeCost(compiler);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
157	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reducer);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
158	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reduction,  reduction);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
159	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  eliminatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  eliminatingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  eliminatingRoot);	  Node    helperCode    =    parseHelperCode(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
160	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  addingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  addingRoot);	  Node    helperCode    =    parseHelperCode(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
161	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  contributingRoot);	  Node    helperCode    =    parseHelperCode(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
162	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  eliminating);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  eliminating);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  eliminating);	  Node    helperCode    =    parseHelperCode(reduction,    pruning);    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
163	[BUG]  [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(compiler,  reducer);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(compiler,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.parseHelperCode(compiler,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
164	[BUG]  [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler,  reducer);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.parseHelperCode(compiler,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
165	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(compiler,  reducer);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(compiler,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.parseHelperCode(compiler,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
166	[BUG]  [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.parseHelperCode(compiler,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.parseHelperCode(compiler,  reduction);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
167	[BUG]  [BUGGY]  Node  helperCode  =  reduction.parseHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.parseHelperCode(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.parseHelperCode(reduction);	  Node    helperCode    =    reduction.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
168	[BUG]  [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.parseHelperCode(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.parseHelperCode(reduction);	  Node    helperCode    =    reduction.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
169	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reductions);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root,  reductions);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
170	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reducer);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root,  reducer);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
171	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  root);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	35	None	replace
172	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions,  root);  [CE]  cannot  find  symbol  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reductions,  root);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
173	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductionMap,  root);  [CE]  cannot  find  symbol  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductionMap,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reductionMap,  root);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
174	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reduction.reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reduction.reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root,  reduction.reduction);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	35	None	replace
175	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
176	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  contributingRoot);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
177	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
178	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducedr);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducedr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  reducedr);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
179	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	15	None	replace
180	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reder);  [CE]  cannot  find  symbol  reder  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reder);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reder);	  Node    helperCode    =    compiler.parseHelperCode(rededuction);    	non-compiled	[CE]  cannot  find  symbol  reder	39	None	replace
181	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionMap);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionMap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductionMap);	  Node    helperCode    =    reductionMap.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
182	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redeductionMap);  [CE]  cannot  find  symbol  redeductionMap  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redeductionMap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(redeductionMap);	  Node    helperCode    =    reductionMap.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  redeductionMap	2	None	replace
183	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionmap);  [CE]  cannot  find  symbol  reductionmap  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductionmap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductionmap);	  Node    helperCode    =    reductionMap.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reductionmap	2	None	replace
184	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getHelper();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
185	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.getHelper();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
186	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper();  [CE]  cannot  find  symbol  reduction  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reduction	66	None	replace
187	[BUG]  [BUGGY]  Node  helperCode  =  reducedr.getHelper();  [CE]  cannot  find  symbol  reducedr  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducedr.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducedr.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reducedr	66	None	replace
188	[BUG]  [BUGGY]  Node  helperCode  =  reduceds.getHelper();  [CE]  cannot  find  symbol  reduceds  [FE]                                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceds.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceds.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reduceds	66	None	replace
189	[BUG]  [BUGGY]  Node  helperCode  =  reductionmap.getHelper();  [CE]  cannot  find  symbol  reductionmap  [FE]                                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionmap.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionmap.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reductionmap	66	None	replace
190	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  reductions);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
191	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  HELPER_SOURCE);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
192	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  contributingRoot);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions),    reductions);    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	27	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(root),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions),    reductions);    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	27	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions.size()),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions),    reductions);    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	27	None	replace
196	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
197	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
198	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.reductions);  [CE]  cannot  find  symbol  reductions  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducer.reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    result);    	non-compiled	[CE]  cannot  find  symbol  reductions	18	None	replace
199	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	53	None	replace
200	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	53	None	replace
201	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	53	None	replace
202	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_SOURCE,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	53	None	replace
203	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  SAVINGS_THRESHOLD,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	53	None	replace
204	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getReduction();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
205	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getReduction();  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
206	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.getReduction();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
207	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getInitializingRoot();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.getInitializingRoot();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getInitializingRoot();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
208	[BUG]  [BUGGY]  Node  helperCode  =  reductionmap.getReduction();  [CE]  cannot  find  symbol  reductionmap  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionmap.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionmap.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reductionmap	63	None	replace
209	[BUG]  [BUGGY]  Node  helperCode  =  reduceds.getReduction();  [CE]  cannot  find  symbol  reduceds  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceds.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceds.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reduceds	63	None	replace
210	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  saving);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  saving);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    aider);    	non-compiled	[CE]  cannot  find  symbol  saving	71	None	replace
211	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  helpingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  helpingRoot);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    aider);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	71	None	replace
212	[BUG]  [BUGGY]  Node  helperCode  =  reduceds.parseHelperCode(compiler);  [CE]  cannot  find  symbol  reduceds  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceds.parseHelperCode(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceds.parseHelperCode(compiler);	  Node    helperCode    =    reduceres.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reduceds	70	None	replace
213	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redeductions);  [CE]  cannot  find  symbol  redeductions  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redeductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(redeductions);	  Node    helperCode    =    reduceres.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  redeductions	70	None	replace
214	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	17	None	replace
215	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  HELPER_SOURCE,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	17	None	replace
216	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	17	None	replace
217	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  helperCode);  [CE]  cannot  find  symbol  extension  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  extension	17	None	replace
218	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD,  helperCode);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  SAVINGS_THRESHOLD,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	17	None	replace
219	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducer,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	41	None	replace
220	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	41	None	replace
221	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	41	None	replace
222	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reducer);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(compiler,  reducer);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
223	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reducer);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(reducer,  reducer);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
224	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(compiler,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(compiler,  reduction);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
225	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducer.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  reducer.getParent());	  Node    helperCode    =    parseHelperCodeCost(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
226	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reducer.getParent());  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reducer.getParent());	  Node    helperCode    =    parseHelperCodeCost(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
227	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
228	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
229	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getReduction(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
230	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap.getReduction());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap.getReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
231	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root.getReduction());  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root.getReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
232	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductions.getReduction());  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductions.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductions.getReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
233	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducern,  reducer);  [CE]  cannot  find  symbol  reducern  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducern,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducern,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducern	44	None	replace
234	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionsduir,  reducer);  [CE]  cannot  find  symbol  reductionsduir  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionsduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductionsduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionsduir	44	None	replace
235	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reducer);  [CE]  cannot  find  symbol  reducerduir  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerduir	44	None	replace
236	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  offsetduir,  reducer);  [CE]  cannot  find  symbol  offsetduir  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  offsetduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  offsetduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  offsetduir	44	None	replace
237	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionduir,  reducer);  [CE]  cannot  find  symbol  reductionduir  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductionduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionduir	44	None	replace
238	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerd,  reducer);  [CE]  cannot  find  symbol  reducerd  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerd,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerd,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerd	44	None	replace
239	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reductions);  [CE]  cannot  find  symbol  reducerduir  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerduir,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerduir	44	None	replace
240	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getName(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
241	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getName(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
242	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
243	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root.getName());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root.getName());	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
244	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReductionName());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getReductionName());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getReductionName());	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
245	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer.getType());  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer.getType());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getName(),  reducer.getType());	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
246	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducedr);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducedr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducedr);	  Node    helperCode    =    parseHelperCode(reduction,    limiter);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducers,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducers,  reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducers,  reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	29	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCode));  [CE]  cannot  find  symbol  helperCode  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCode));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCode));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCode	29	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reducers,  root));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reducers,  root));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reducers,  root));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	29	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducer,  reductions));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducer,  reductions));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reducer,  reductions));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	29	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCodeCost));  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCodeCost));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  helperCodeCost));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	29	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	23	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  cannot  find  symbol  helperCode  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCode	23	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	23	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	23	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	23	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	23	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Reducer)  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reducer);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Reducer)	23	None	replace
259	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  mitigation);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  mitigation);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  mitigation);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
260	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  HELPER_THRESHOLD);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	54	None	replace
261	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducerCodeCost);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  reducerCodeCost);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	54	None	replace
262	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions.size());  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions.size());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  reductions.size());	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCodeCost);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	54	None	replace
263	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getHelperCode(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.getHelperCode(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.getHelperCode(reduction);	  Node    helperCode    =    compiler.parseHelperCode(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
264	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getHelperCode();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.getHelperCode();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.getHelperCode();	  Node    helperCode    =    compiler.parseHelperCode(reduction;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
265	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getSource(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
266	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getSource(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
267	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root.getSource());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root.getSource());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root.getSource());	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
268	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
269	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getSource());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getSource());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reduction.getSource());	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
270	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getSource(),  reducer.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
271	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.parseHelperCode(reductions);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeHelperCode  helperCode  =  compiler.parseHelperCode(reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeHelperCode  helperCode  =  compiler.parseHelperCode(reductions);	  Node    helperCode    =    reductions.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
272	[BUG]  [BUGGY]  Node  HelperCode  =  compiler.parseHelperCode(reductions);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  HelperCode  =  compiler.parseHelperCode(reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  HelperCode  =  compiler.parseHelperCode(reductions);	  Node    helperCode    =    reductions.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
273	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  reductions);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reductions,  reductions);	  Node    helperCode    =    reductions.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
274	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  escaper);  [CE]  cannot  find  symbol  escaper  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  escaper);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  escaper);	  Node    helperCode    =    parseHelperCode(compiler,    reducer);    	non-compiled	[CE]  cannot  find  symbol  escaper	43	None	replace
275	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  aiderCodeCost);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  aiderCodeCost);	  Node    helperCode    =    parseHelperCode(compiler,    reducer);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	43	None	replace
276	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getInitializingReduction();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
277	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction();  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
278	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.getInitializingReduction();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
279	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getInitializingReduction(),  reductions);  [CE]  ';'  expected  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.getInitializingReduction(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getInitializingReduction(),  reductions);	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  ';'  expected	62	None	replace
280	[BUG]  [BUGGY]  Node  helperCode  =  reductionmap.getInitializingReduction();  [CE]  cannot  find  symbol  reductionmap  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionmap.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionmap.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reductionmap	62	None	replace
281	[BUG]  [BUGGY]  Node  helperCode  =  reduceds.getInitializingReduction();  [CE]  cannot  find  symbol  reduceds  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceds.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceds.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reduceds	62	None	replace
282	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reductions);	  Node    helperCode    =    parseHelperCodeCost(root);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
283	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getSingleReturnStatement();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
284	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSingleReturnStatement();  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduction.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduction.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
285	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.getSingleReturnStatement();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
286	[BUG]  [BUGGY]  Node  helperCode  =  reducedr.getSingleReturnStatement();  [CE]  cannot  find  symbol  reducedr  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducedr.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducedr.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  reducedr	61	None	replace
287	[BUG]  [BUGGY]  Node  helperCode  =  reducer.getSingleReturnStatement(),  reductions);  [CE]  ';'  expected  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.getSingleReturnStatement(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.getSingleReturnStatement(),  reductions);	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  ';'  expected	61	None	replace
288	[BUG]  [BUGGY]  Node  helperCode  =  reductionmap.getSingleReturnStatement();  [CE]  cannot  find  symbol  reductionmap  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionmap.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionmap.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  reductionmap	61	None	replace
289	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.estimateSavings());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
290	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	74	None	replace
291	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	74	None	replace
292	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction.estimateSavings());  [CE]  cannot  find  symbol  rededuction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction.estimateSavings());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  rededuction	74	None	replace
293	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  savings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	74	None	replace
294	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reductions);	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
295	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reduction);	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
296	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
297	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getJSDocInfo(),  reducer.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
298	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root.getJSDocInfo());  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root.getJSDocInfo());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root.getJSDocInfo());	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	7	None	replace
299	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getJSDocInfo());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getJSDocInfo());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reduction.getJSDocInfo());	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
300	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  root);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  root);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	51	None	replace
301	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reductions);  [CE]  cannot  find  symbol  reducerir  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerir,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducerir	51	None	replace
302	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reducer);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(null,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
303	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(null,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(null,  reduction);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
304	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducers);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducers);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reducers);	  Node    helperCode    =    reductions.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
305	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction;  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction;  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction;	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  ')'  expected	30	None	replace
306	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redductionMap);  [CE]  cannot  find  symbol  redductionMap  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redductionMap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(redductionMap);	  Node    helperCode    =    reductionMap.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  redductionMap	2	None	replace
307	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducings).estimateSavings();  [CE]  cannot  find  symbol  reducings  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducings).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducings).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  reducings	77	None	replace
308	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reducedr);  [CE]  cannot  find  symbol  reducedr  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(root,  reducedr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(root,  reducedr);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducedr	35	None	replace
309	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  root);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  root);	  Node    helperCode    =    parseHelperCodeCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
310	[BUG]  [BUGGY]  Node  helperCode  =  reducedr.getInitializingReduction();  [CE]  cannot  find  symbol  reducedr  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducedr.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducedr.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reducedr	62	None	replace
311	[BUG]  [BUGGY]  Node  helperCode  =  reduceres.getInitializingReduction();  [CE]  cannot  find  symbol  reduceres  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceres.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceres.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reduceres	62	None	replace
312	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions);  [CE]  cannot  find  symbol  extension  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions);    	non-compiled	[CE]  cannot  find  symbol  extension	12	None	replace
313	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  reducer);  [CE]  cannot  find  symbol  r  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  r	14	None	replace
314	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reducer);  [CE]  cannot  find  symbol  roots  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  roots	14	None	replace
315	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	47	None	replace
316	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(root,  SAVINGS_THRESHOLD);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(root,  SAVINGS_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(root,  SAVINGS_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	47	None	replace
317	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  Helper.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  Helper.DEFAULT_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  Helper.DEFAULT_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
318	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots);  [CE]  cannot  find  symbol  roots  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots);	  Node    helperCode    =    parseHelperCode(reducer,    root);    	non-compiled	[CE]  cannot  find  symbol  roots	50	None	replace
319	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  limiter);  [CE]  cannot  find  symbol  limiter  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  limiter);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  limiter);	  Node    helperCode    =    parseHelperCode(reduction,    limiter);    	non-compiled	[CE]  cannot  find  symbol  limiter	59	None	replace
320	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction.estimateSavings(),  reducer);	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
321	[BUG]  [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer.estimateSavings());  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodehelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer.estimateSavings());	  NodehelperCode    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
322	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  reductions);  [CE]  cannot  find  symbol  reducerir  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducerir	13	None	replace
323	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions);  [CE]  cannot  find  symbol  r  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réductions);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
324	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  externs,  reducer,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	13	None	replace
325	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducings);  [CE]  cannot  find  symbol  reducings  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reducings);	  Node    helperCode    =    reduceres.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  reducings	70	None	replace
326	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reduction);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
327	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer);  [CE]  cannot  find  symbol  roots  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  roots	40	None	replace
328	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getSource());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getSource());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getSource());	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
329	[BUG]  [BUGGY]  Node  helperCode  =  reduceriMap.get(reducer);  [CE]  cannot  find  symbol  reduceriMap  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceriMap.get(reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceriMap.get(reducer);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduceriMap	64	None	replace
330	[BUG]  [BUGGY]  Node  helperCode  =  reduceris.get(reducer);  [CE]  cannot  find  symbol  reduceris  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceris.get(reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceris.get(reducer);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  cannot  find  symbol  reduceris	64	None	replace
331	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root,  reducer);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCodeCost(root,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCodeCost(root,  reducer);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
332	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getName());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getName());	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
333	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  no  suitable  method  found  for  getCost(Reducer)  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer)	25	None	replace
334	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [CE]  cannot  find  symbol  saved  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  saved	25	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  [CE]  cannot  find  symbol  helperCode  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCode	28	None	replace
336	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer,  reducer);  [CE]  cannot  find  symbol  roots  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots,  reducer,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  roots	41	None	replace
337	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réduir);  [CE]  cannot  find  symbol  r  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réduir);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  r	41	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  contributingRoot));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  contributingRoot));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	29	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions),  helperCode);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions),  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions),  helperCode);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	29	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  helperCode));  [CE]  cannot  find  symbol  helperCode  [FE]                                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  helperCode));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  helperCode));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  cannot  find  symbol  helperCode	29	None	replace
341	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getParent());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getParent());	  Node    helperCode    =    parseHelperCode(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
342	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer,  root);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reducer,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reducer,  root);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
343	[BUG]  [BUGGY]  Node  helperCode  =  reduceres.getSingleReturnStatement();  [CE]  cannot  find  symbol  reduceres  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceres.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceres.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  reduceres	61	None	replace
344	[BUG]  [BUGGY]  Node  helperCode  =  réduir.getSingleReturnStatement();  [CE]  cannot  find  symbol  r  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  réduir.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  réduir.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  r	61	None	replace
345	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getJSDocInfo());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getJSDocInfo());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getJSDocInfo());	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
346	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getValue());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getValue());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getValue());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
347	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(externs,  root);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(externs,  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(externs,  root);	  Node    helperCode    =    compiler.parseHelperCode(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  root);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions),  root);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions),    reductions);    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	27	None	replace
349	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  contributingRoot);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	32	None	replace
350	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getParent(),  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getParent(),  reducer);	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
351	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getParent());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
352	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductions,  reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductions,  reduction);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
353	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,reducings);  [CE]  cannot  find  symbol  reducings  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,reducings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,reducings);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	73	None	replace
354	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionmap,  reductions);  [CE]  cannot  find  symbol  reductionmap  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionmap,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionmap,  reductions);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reductionmap	73	None	replace
355	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducing.estimateSavings());  [CE]  cannot  find  symbol  reducing  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducing.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducing.estimateSavings());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reducing	74	None	replace
356	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  FACTORY_METHOD_NAME);  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  FACTORY_METHOD_NAME);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  FACTORY_METHOD_NAME);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	52	None	replace
357	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HelperReducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperReducer  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  HelperReducer.DEFAULT_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  HelperReducer.DEFAULT_THRESHOLD);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	52	None	replace
358	[BUG]  [BUGGY]  Node  helperCode  =  reducedr.getReduction();  [CE]  cannot  find  symbol  reducedr  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducedr.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducedr.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reducedr	63	None	replace
359	[BUG]  [BUGGY]  Node  helperCode  =  reductions.iterator(),  reducer.next();  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.iterator(),  reducer.next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.iterator(),  reducer.next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  ';'  expected	76	None	replace
360	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.iterator().next();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.iterator().next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.iterator().next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
361	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reductions.iterator()).next();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reductions.iterator()).next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reductions.iterator()).next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
362	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réduir,  helperCode);  [CE]  cannot  find  symbol  r  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réduir,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réduir,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  r	53	None	replace
363	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducedr,  helperCode);  [CE]  cannot  find  symbol  reducedr  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducedr,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducedr,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducedr	53	None	replace
364	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerer,  helperCode);  [CE]  cannot  find  symbol  reducerer  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerer,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducerer,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducerer	53	None	replace
365	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductionr,  helperCode);  [CE]  cannot  find  symbol  r  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductionr,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réductionr,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  r	53	None	replace
366	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  pruning);  [CE]  cannot  find  symbol  pruning  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  pruning);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  pruning);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helper);    	non-compiled	[CE]  cannot  find  symbol  pruning	72	None	replace
367	[BUG]  [BUGGY]  Node  helperCode  =  reduceres.getHelper();  [CE]  cannot  find  symbol  reduceres  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reduceres.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reduceres.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reduceres	66	None	replace
368	[BUG]  [BUGGY]  Node  helperCode  =  réduir.getHelper();  [CE]  cannot  find  symbol  r  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  réduir.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  réduir.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  r	66	None	replace
369	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redefinition);  [CE]  cannot  find  symbol  redefinition  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redefinition);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(redefinition);	  Node    helperCode    =    reducer.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  redefinition	69	None	replace
370	[BUG]  [BUGGY]  Node  helperCode  =  roots.parseHelperCode(compiler);  [CE]  cannot  find  symbol  roots  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  roots.parseHelperCode(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  roots.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol  roots	36	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  root));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  root));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer(reductions,  root));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions),  helpingRoot);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions),  helpingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductions),  helpingRoot);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
373	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reducing.estimateSavings());  [CE]  cannot  find  symbol  reducing  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reducing.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reducing.estimateSavings());	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reducing	65	None	replace
374	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSeconds());  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(reduction.estimateSeconds());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(reduction.estimateSeconds());	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
375	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reductions);  [CE]  cannot  find  symbol  roots  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  roots,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  roots	16	None	replace
376	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reductions);  [CE]  cannot  find  symbol  extension  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  extension,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  extension	16	None	replace
377	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reduction;  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reduction;  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reduction;	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  ')'  expected	26	None	replace
378	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  aider);  [CE]  cannot  find  symbol  aider  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  aider);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  aider);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aider	57	None	replace
379	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  rootduir,  reducer);  [CE]  cannot  find  symbol  rootduir  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  rootduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  rootduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  rootduir	44	None	replace
380	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  HELPER_SOURCE,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  HELPER_SOURCE,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	44	None	replace
381	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  helperCodeCost,  reducer);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  helperCodeCost,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  helperCodeCost,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	44	None	replace
382	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  lengthduir,  reducer);  [CE]  cannot  find  symbol  lengthduir  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  lengthduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  lengthduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  lengthduir	44	None	replace
383	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getReduction());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer.getReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
384	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getReduction());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
385	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  helperCode);  [CE]  cannot  find  symbol  r  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  réductions,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  r	17	None	replace
386	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  aiderCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductions,  aiderCode);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	17	None	replace
387	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  HELPER_SOURCE);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	57	None	replace
388	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  helperCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reducer,  reductions,  helperCode);	  Node    helperCode    =    parseHelperCodeCost(reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
389	[BUG]  [BUGGY]  Node  helperCode  =  pruning.parseHelperCode(compiler);  [CE]  cannot  find  symbol  pruning  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  pruning.parseHelperCode(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  pruning.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(root);    	non-compiled	[CE]  cannot  find  symbol  pruning	36	None	replace
390	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,reducing);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,reducing);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,reducing);	  Node    helperCode    =    parseHelperCode(reduction,    pruning);    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
391	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr);  [CE]  cannot  find  symbol  reductionr  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr);	  Node    helperCode    =    parseHelperCode(compiler,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionr	43	None	replace
392	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSource()).estimateSavings();  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSource()).estimateSavings();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSource()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	77	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap),  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.ReductionGatherer,Collection<FunctionRewriter.Reduction>)  [FE]                                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter.ReductionGatherer,Collection<FunctionRewriter.Reduction>)	29	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  HELPER_SOURCE));  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductions,  HELPER_SOURCE));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reducers,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	29	None	replace
395	[BUG]  [BUGGY]  Node  helperCode  =  reducer.parseHelperCodeCost(compiler);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.parseHelperCodeCost(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.parseHelperCodeCost(compiler);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
396	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCodeCost(compiler);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCodeCost(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.parseHelperCodeCost(compiler);	  Node    helperCode    =    compiler.parseHelperCodeCost(reducer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
397	[BUG]  [BUGGY]  Node  helperCode  =  compiler.reportCodeChange();  [CE]  incompatible  types  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.reportCodeChange();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.reportCodeChange();	  Node    helperCode    =    compiler.parseHelperCode(reduction;    	non-compiled	[CE]  incompatible  types	38	None	replace
398	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getHelperCodeForReduction(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.getHelperCodeForReduction(reduction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.getHelperCodeForReduction(reduction);	  Node    helperCode    =    compiler.parseHelperCode(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
399	[BUG]  [BUGGY]  Node  helperCode  =  null.parseHelperCode(compiler);  [CE]  <null>  cannot  be  dereferenced  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  null.parseHelperCode(compiler);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  null.parseHelperCode(compiler);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	37	None	replace
400	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(null);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.parseHelperCode(null);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.parseHelperCode(null);	  Node    helperCode    =    compiler.parseHelperCode(null);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
401	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getValue());  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getValue());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.getValue());	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
402	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getSource());  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction.getSource());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction.getSource());	  Node    helperCode    =    parseHelperCodeCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
403	[BUG]  [BUGGY]  Node  helperCode  =  reducerer.getHelper();  [CE]  cannot  find  symbol  reducerer  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducerer.getHelper();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducerer.getHelper();	  Node    helperCode    =    reducer.getHelper();    	non-compiled	[CE]  cannot  find  symbol  reducerer	66	None	replace
404	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  réduir);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  réduir);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
405	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  savings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  savings);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
406	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  pruning);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCodeCost(reduction,  pruning);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCodeCost(reduction,  pruning);	  Node    helperCode    =    parseHelperCodeCost(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
407	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeHelperCode  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeHelperCode  helperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
408	[BUG]  [BUGGY]  Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reductions);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	16	None	replace
409	[BUG]  [BUGGY]  Node  helperCode  =  reducerer.getSingleReturnStatement();  [CE]  cannot  find  symbol  reducerer  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducerer.getSingleReturnStatement();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducerer.getSingleReturnStatement();	  Node    helperCode    =    reducer.getSingleReturnStatement();    	non-compiled	[CE]  cannot  find  symbol  reducerer	61	None	replace
410	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getName());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getName());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getName());	  Node    helperCode    =    parseHelperCode(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
411	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  COMMA_METHOD_NAME);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  COMMA_METHOD_NAME);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  COMMA_METHOD_NAME);	  Node    helperCode    =    parseHelperCode(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
412	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr,  reducer);  [CE]  cannot  find  symbol  reductionr  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reductionr,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reductionr	41	None	replace
413	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  réduir);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  réduir);	  Node    helperCode    =    parseHelperCode(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
414	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getSource());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getSource());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getSource());	  Node    helperCode    =    parseHelperCode(reduction.getSource());    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
415	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reductions.size());  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reductions.size());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reductions.size());	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	73	None	replace
416	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reductions);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  reduction.reductions);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
417	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  deductions);  [CE]  cannot  find  symbol  deductions  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reductionMap,  deductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reductionMap,  deductions);	  Node    helperCode    =    parseHelperCode(reductionMap,    reduction);    	non-compiled	[CE]  cannot  find  symbol  deductions	73	None	replace
418	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  savings);  [CE]  cannot  find  symbol  savings  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductions,  savings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductions,  savings);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    aider);    	non-compiled	[CE]  cannot  find  symbol  savings	71	None	replace
419	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reduction.getParent());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reduction.getParent());	  Node    helperCode    =    parseHelperCode(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
420	[BUG]  [BUGGY]  Node  helperCode  =  reducer.reductionMap.getInitializingReduction();  [CE]  cannot  find  symbol  reductionMap  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.reductionMap.getInitializingReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.reductionMap.getInitializingReduction();	  Node    helperCode    =    reducer.getInitializingReduction();    	non-compiled	[CE]  cannot  find  symbol  reductionMap	62	None	replace
421	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reducers);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reducers);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reducers);	  Node    helperCode    =    reductions.get(reducer);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
422	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  reductions);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reductionMap,  reductions);	  Node    helperCode    =    parseHelperCode(reducer,    root,    reductions);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	51	None	replace
423	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.HELPER_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.HELPER_SOURCE);	  Node    helperCode    =    compiler.parseHelperCode(rededuction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	39	None	replace
424	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.DEFAULT_THRESHOLD);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(ReductionGatherer.DEFAULT_THRESHOLD);	  Node    helperCode    =    compiler.parseHelperCode(rededuction);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	39	None	replace
425	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,reducings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,reducings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,reducings);	  Node    helperCode    =    parseHelperCode(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	replace
426	[BUG]  [BUGGY]  InlineCostEstimator.getCost(rededuction.estimateSavings());  [CE]  cannot  find  symbol  rededuction  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  InlineCostEstimator.getCost(rededuction.estimateSavings());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	InlineCostEstimator.getCost(rededuction.estimateSavings());	  InlineCostEstimator.getCost(reduction.estimateSavings());    	non-compiled	[CE]  cannot  find  symbol  rededuction	65	None	replace
427	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reduction,  contributingRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reduction,  contributingRoot);	  Node    helperCode    =    parseHelperCode(compiler,    reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
428	[BUG]  [BUGGY]  Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);  [CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  HelperCode  =  parseHelperCode(compiler,  root,  reductions,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    reductions,    reducer);    	non-compiled	[CE]  method  parseHelperCode  in  class  FunctionRewriter  cannot  be  applied  to  given  types;	14	None	replace
429	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reductions);	  Node    helperCode    =    parseHelperCode(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
430	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  contributingRoot,  reducer);	  Node    helperCode    =    parseHelperCode(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
431	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  réduir);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  réduir);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
432	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir);  [CE]  cannot  find  symbol  r  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  réduir);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  réduir);	  Node    helperCode    =    parseHelperCode(compiler,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	21	None	replace
433	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  helperCode);  [CE]  cannot  find  symbol  reducerir  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  helperCode);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  root,  reducerir,  helperCode);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducerir	53	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductionMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Multimap<Reducer,FunctionRewriter.Reduction>)  [FE]                          IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductionMap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reductionMap);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Multimap<Reducer,FunctionRewriter.Reduction>)	23	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  prunings);  [CE]  cannot  find  symbol  prunings  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  prunings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  prunings);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  prunings	23	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  cannot  find  symbol  savings  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  savings	23	None	replace
437	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerern,  reducer);  [CE]  cannot  find  symbol  reducerern  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducerern,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducerern,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerern	44	None	replace
438	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducererduir,  reducer);  [CE]  cannot  find  symbol  reducererduir  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducererduir,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducererduir,  reducer);	  Node    helperCode    =    parseHelperCode(compiler,    réduir,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducererduir	44	None	replace
439	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getLastChild());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getLastChild());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getLastChild());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
440	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getChildCount());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getChildCount());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getValue(),  reducer.getChildCount());	  Node    helperCode    =    parseHelperCode(reduction.getValue());    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
441	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  limitr);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(reduction,  limitr);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(reduction,  limitr);	  Node    helperCode    =    compiler.parseHelperCode(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
442	[BUG]  [BUGGY]  Node  helperCode  =  reducer.reductions.getReduction();  [CE]  cannot  find  symbol  reductions  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.reductions.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.reductions.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reductions	63	None	replace
443	[BUG]  [BUGGY]  Node  helperCode  =  reducer.reductionMap.getReduction();  [CE]  cannot  find  symbol  reductionMap  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducer.reductionMap.getReduction();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducer.reductionMap.getReduction();	  Node    helperCode    =    reducer.getReduction();    	non-compiled	[CE]  cannot  find  symbol  reductionMap	63	None	replace
444	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  FACTORY_METHOD_NAME);  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                      IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(compiler,  reducer,  FACTORY_METHOD_NAME);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(compiler,  reducer,  FACTORY_METHOD_NAME);	  Node    helperCode    =    parseHelperCode(compiler,    reducer,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	54	None	replace
445	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getInitializingReduction());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction.getInitializingReduction());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction.getInitializingReduction());	  Node    helperCode    =    parseHelperCode(reduction.getReduction());    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
446	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(rededuction);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(rededuction);	  Node    helperCode    =    reductions.get(reduction);    	non-compiled	[CE]  cannot  find  symbol  rededuction	26	None	replace
447	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  saving);  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  saving);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  saving);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	52	None	replace
448	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  NON_GLOBAL_SOURCE);  [CE]  cannot  find  symbol  NON_GLOBAL_SOURCE  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer,  reductions,  NON_GLOBAL_SOURCE);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reducer,  reductions,  NON_GLOBAL_SOURCE);	  Node    helperCode    =    parseHelperCode(reducer,    reductions,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_SOURCE	52	None	replace
449	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducers);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducers);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducers);	  Node    helperCode    =    parseHelperCode(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
450	[BUG]  [BUGGY]  Node  helperCode  =  reducerer.parseHelperCode(compiler,  reducer);  [CE]  cannot  find  symbol  reducerer  [FE]                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reducerer.parseHelperCode(compiler,  reducer);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reducerer.parseHelperCode(compiler,  reducer);	  Node    helperCode    =    compiler.parseHelperCode(reducer,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reducerer	49	None	replace
451	[BUG]  [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redundantMap);  [CE]  cannot  find  symbol  redundantMap  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  compiler.parseHelperCode(redundantMap);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  compiler.parseHelperCode(redundantMap);	  Node    helperCode    =    reductionMap.parseHelperCode(compiler);    	non-compiled	[CE]  cannot  find  symbol  redundantMap	2	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap),  reductions);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reductions,  reductionMap),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions,    reductions));    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	24	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions),  root);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions),  root);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer(reductions),  root);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer(reductions),    reductions);    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	27	None	replace
454	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  pruningRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  pruningRoot);  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  pruningRoot);	  Node    helperCode    =    parseHelperCode(reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
455	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getJSDocInfo());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getJSDocInfo());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getJSDocInfo());	  Node    helperCode    =    parseHelperCode(reduction.getJSDocInfo());    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
456	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reduction).iterator().next();  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reduction).iterator().next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reduction).iterator().next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol  reduction	76	None	replace
457	[BUG]  [BUGGY]  Node  helperCode  =  reductions.values().next();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.values().next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.values().next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
458	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.get(reductions.iterator()).next();  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductionMap.get(reductions.iterator()).next();  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductionMap.get(reductions.iterator()).next();	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	76	None	replace
459	[BUG]  [BUGGY]  Node  helperCode  =  reductions.get(reductions.iterator().next());  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  reductions.get(reductions.iterator().next());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  reductions.get(reductions.iterator().next());	  Node    helperCode    =    reductions.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
460	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getLastChild());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction,  reducer.getLastChild());  [BUGGY]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	Node  helperCode  =  parseHelperCode(reduction,  reducer.getLastChild());	  Node    helperCode    =    parseHelperCode(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
