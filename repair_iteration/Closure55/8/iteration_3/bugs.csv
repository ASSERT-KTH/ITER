bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InlineCostEstimator.setCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(reduction);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
2	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction.getReduction())  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction.getReduction())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction.getReduction())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
3	[BUG]  [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(helperCodeCost,  reduction);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
4	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction.getSeconds())  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction.getSeconds())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction.getSeconds())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
5	[BUG]  [BUGGY]  InlineCostEstimator.setCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(helperCodeCost);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
6	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getReduction())  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getReduction())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getReduction())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
7	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction)  {  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
8	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
9	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    If(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	99	None	add
10	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	99	None	add
11	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  while(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  while(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    while(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
12	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
14	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
16	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
18	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
20	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
21	[BUG]  [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	290	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
23	[BUG]  [BUGGY]  if(helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	8	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
25	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  savings))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	290	9	replace
26	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getSeconds())  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getSeconds())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getSeconds())  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	160	None	replace
27	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVES_THRESHOLD  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVES_THRESHOLD	160	None	replace
28	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getSize())  {  [CE]  cannot  find  symbol  reduction  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getSize())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getSize())  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	160	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
30	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
32	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
34	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
36	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
38	[BUG]  [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	8	replace
40	[BUG]  [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	16	8	replace
41	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	229	None	replace
42	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
43	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
44	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
45	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
46	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
47	[BUG]  [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
48	[BUG]  [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  savers))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVINGS_THRESHOLD  +  savers))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
49	[BUG]  [BUGGY]  int  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
50	[BUG]  [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
51	[BUG]  [BUGGY]  int  savings  >  SAVINGS_THRESHOLD  +  saves)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  SAVINGS_THRESHOLD  +  saves)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  SAVINGS_THRESHOLD  +  saves)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
52	[BUG]  [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVINGS_THRESHOLD  +  saves))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
53	[BUG]  [BUGGY]  int  savings  =  (SAVINGS_THRESHOLD  +  savings));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  =  (SAVINGS_THRESHOLD  +  savings));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  =  (SAVINGS_THRESHOLD  +  savings));	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
54	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	203	None	replace
55	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	203	None	replace
56	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	203	None	replace
57	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	203	None	replace
58	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getSavings())  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getSavings())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getSavings())  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	45	None	replace
59	[BUG]  [BUGGY]  if(helperCodeCost!=  reductions)  {  [CE]  incomparable  types:  int  and  Collection<FunctionRewriter.Reduction>  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reductions)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reductions)  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  Collection<FunctionRewriter.Reduction>	45	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  reductions.size())  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	45	9	replace
61	[BUG]  [BUGGY]  if(helperCodeCost!=  reductions.size())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reductions.size())  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	45	9	replace
62	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
63	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
64	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    If(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	313	None	add
65	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
66	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
67	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
68	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
69	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
70	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
71	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
72	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
73	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  MOVEDS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  MOVEDS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  +  MOVEDS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
74	[BUG]  [BUGGY]  if(saverCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saverCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saverCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(success    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	189	None	replace
75	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(success    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	189	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(success    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	189	8	replace
77	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(success    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	189	8	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	9	replace
79	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	9	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	9	replace
81	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	9	replace
82	[BUG]  [BUGGY]  if(saving  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	88	None	replace
83	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
84	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	121	None	add
85	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
86	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
87	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
88	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
89	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
90	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
91	[BUG]  [BUGGY]  Corrections.checkState(savings  >  (savings  *  SAVINGS_THRESHOLD));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Corrections.checkState(savings  >  (savings  *  SAVINGS_THRESHOLD));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Corrections.checkState(savings  >  (savings  *  SAVINGS_THRESHOLD));	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
92	[BUG]  [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD));	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	235	None	replace
93	[BUG]  [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Corrections.checkState(savings  >  SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
94	[BUG]  [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Corrections.checkState(savings  >  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Corrections.checkState(savings  >  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
95	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	250	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
97	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
99	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
100	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saver  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saver	250	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
102	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saves))    {    	compilable	  [FE]  AssertionFailedError  	136	9	replace
104	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saves))    {    	compilable	  [FE]  AssertionFailedError  	136	9	replace
105	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  saves)  {  [CE]  cannot  find  symbol  saves  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  saves)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  saves)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saves))    {    	non-compiled	[CE]  cannot  find  symbol  saves	136	None	replace
106	[BUG]  [BUGGY]  if(saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saver  [FE]    IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  saver	66	None	replace
107	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Savings)  {  [CE]  cannot  find  symbol  Savings  [FE]      IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Savings)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  Savings	66	None	replace
108	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saving    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
109	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
110	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getSavings_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getSavings_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getSavings_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
111	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.oldChild  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.oldChild  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.oldChild  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
112	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions.saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions.saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	43	None	replace
113	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.saving  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.saving  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.saving  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
114	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.length  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.length  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.length  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
115	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
116	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
117	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
118	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
119	[BUG]  [BUGGY]  If(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
120	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
127	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
128	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	7	None	add
129	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
130	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	7	None	add
131	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
132	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  +  MOVEDS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  +  MOVEDS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (savings  +  MOVEDS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
133	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	replace
134	[BUG]  [BUGGY]  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	replace
135	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction)  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	158	None	replace
136	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction.getSavings())  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction.getSavings())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction.getSavings())  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
137	[BUG]  [BUGGY]  InlineCostEstimator.setCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(helperCode);	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
138	[BUG]  [BUGGY]  if(helperCodeCost  ==  reductions)  {  [CE]  incomparable  types:  int  and  Collection<FunctionRewriter.Reduction>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reductions)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reductions)  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  Collection<FunctionRewriter.Reduction>	10	None	replace
139	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	258	None	replace
140	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	258	None	replace
141	[BUG]  [BUGGY]  if(helperCodeCost!=  (saver  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saver  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saver  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saver  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  saver	258	None	replace
142	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	258	None	replace
143	[BUG]  [BUGGY]  if(helperCodeCost!=  (savers  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  savers  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savers  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savers  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  savers	258	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	90	8	replace
145	[BUG]  [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	90	8	replace
146	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	90	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	90	9	replace
148	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	90	9	replace
149	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	90	None	replace
150	[BUG]  [BUGGY]  if(saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saving	161	None	replace
151	[BUG]  [BUGGY]  if(saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saving	161	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saver);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
159	[BUG]  [BUGGY]  If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
160	[BUG]  [BUGGY]  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
161	[BUG]  [BUGGY]  If(savings  >  (savings  *  HELPER_SOURCE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (savings  *  HELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
162	[BUG]  [BUGGY]  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
163	[BUG]  [BUGGY]  If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
164	[BUG]  [BUGGY]  If(savings  >  (savings  *  HelperCodeCost))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (savings  *  HelperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
165	[BUG]  [BUGGY]  If(savings  >  (savings  *  helperCodeCost))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
166	[BUG]  [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(helperCodeCost,  reductions);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	236	None	replace
167	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    if(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
168	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  If(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  If(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    If(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  	69	None	add
169	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
170	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
171	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  savings  >  (SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  	69	None	add
172	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
173	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SHELPER_SOURCE))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	319	None	replace
174	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SHELPER_SOURCE)  {  [CE]  cannot  find  symbol  SHELPER_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SHELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SHELPER_SOURCE)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SHELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  SHELPER_SOURCE	319	None	replace
175	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  (savings  *  SHELPER_SOURCE))  {  [CE]  cannot  find  symbol  SHELPER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  (savings  *  SHELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  (savings  *  SHELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SHELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  SHELPER_SOURCE	319	None	replace
176	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
177	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
178	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
179	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
180	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	247	None	add
181	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
182	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
183	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
184	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
185	[BUG]  [BUGGY]  If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
186	[BUG]  [BUGGY]  If(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
187	[BUG]  [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
188	[BUG]  [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  null  ||  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
189	[BUG]  [BUGGY]  if(helperCodeCost  >  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reduction.saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	128	None	replace
190	[BUG]  [BUGGY]  if(helperCodeCost  >  (reductions.length  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  length  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reductions.length  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reductions.length  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  length	128	None	replace
191	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  Savings))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	243	None	replace
192	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  Savings))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getSavings()  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	243	None	replace
193	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	243	None	replace
194	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  HelperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	243	None	replace
195	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCode.SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCode.SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  HelperCode.SAVE_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	243	None	replace
196	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  HelperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	243	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saving))    {    	compilable	  [FE]  AssertionFailedError  	134	9	replace
198	[BUG]  [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saving))    {    	compilable	  [FE]  AssertionFailedError  	134	9	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
200	[BUG]  [BUGGY]  if(savings  <  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (savings  +  1))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
202	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (savings  +  1))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
203	[BUG]  [BUGGY]  if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	9	replace
205	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	9	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	8	replace
207	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	8	replace
208	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saved	180	None	replace
209	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saver  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saver	180	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	8	replace
211	[BUG]  [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	180	8	replace
212	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [CE]  cannot  find  symbol  Saving  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  Saving	84	None	replace
213	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	84	None	replace
214	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	212	None	replace
215	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	212	None	replace
216	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  helperCodeCost))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	212	None	replace
217	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  helperCode))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	212	None	replace
218	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  saving))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  saving))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	212	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  helperCodeCost))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	212	8	replace
220	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  helperCodeCost))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	212	8	replace
221	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	212	None	replace
222	[BUG]  [BUGGY]  If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
223	[BUG]  [BUGGY]  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
224	[BUG]  [BUGGY]  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
225	[BUG]  [BUGGY]  If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
226	[BUG]  [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
227	[BUG]  [BUGGY]  If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
228	[BUG]  [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
229	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
230	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  	112	None	add
231	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  	112	None	add
232	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  2))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  2))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  2))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
233	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  InlineCostEstimator  <  Node>  compiler  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  InlineCostEstimator  <  Node>  compiler  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    InlineCostEstimator  <  Node>  compiler  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
234	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
235	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	101	None	add
236	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
237	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	101	None	add
238	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
239	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
240	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  If(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  If(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    If(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	310	None	add
241	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
242	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    if(savings  >>  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
243	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    If(savings  >=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	310	None	add
244	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
245	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
246	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
247	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
248	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
249	[BUG]  [BUGGY]  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
250	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	257	None	replace
251	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	257	None	replace
252	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
253	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saving)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saving)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  saving)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	257	None	replace
254	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	257	None	replace
255	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings),  helperCodeCost)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings),  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings),  helperCodeCost)  {	  if(helperCodeCost    >>    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ')'  expected	221	None	replace
256	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings,  helperCodeCost))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings,  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings,  helperCodeCost))  {	  if(helperCodeCost    >>    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ')'  expected	221	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >>    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	221	9	replace
258	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >>    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	221	9	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  savings);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
264	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
265	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSavings()))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.getSavings()))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
266	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.getSAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
267	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.size()))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.size()))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
268	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.length))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.length))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.length))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
269	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.getSize()))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
270	[BUG]  [BUGGY]  if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	274	None	replace
271	[BUG]  [BUGGY]  if(helperCodeCost!=  (1savings  +  savings))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1savings  +  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	274	None	replace
272	[BUG]  [BUGGY]  if(helperCodeCost!=  (1savings  +  saving))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1savings  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1savings  +  saving))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	274	None	replace
273	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  (1  <  <  1)))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  (1  <  <  1)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  (1  <  <  1)))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
274	[BUG]  [BUGGY]  if(helperCodeCost!=  (1savings  +  savers))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1savings  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1savings  +  savers))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	274	None	replace
275	[BUG]  [BUGGY]  if(helperCodeCost!=  (1savings  +  1))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1savings  +  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	274	None	replace
276	[BUG]  [BUGGY]  if(savings!=  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  HelperCodeCost))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	29	None	replace
277	[BUG]  [BUGGY]  if(savings!=  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  HELPER_SOURCE))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	29	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  *  helperCodeCost))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	29	9	replace
279	[BUG]  [BUGGY]  if(savings!=  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  helperCodeCost))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	29	9	replace
280	[BUG]  [BUGGY]  if(savings!=  (savings  *  HelperCodeCost.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  HelperCodeCost.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  HelperCodeCost.HELPER_SOURCE))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	29	None	replace
281	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  saverCodeCost))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	227	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	227	9	replace
283	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	227	9	replace
284	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  saving))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	227	None	replace
285	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  reduction.getSavings()))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  reduction.getSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  reduction.getSavings()))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	227	None	replace
286	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	303	None	replace
287	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  save))  {  [CE]  cannot  find  symbol  save  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  save))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  save))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  save	303	None	replace
288	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	303	None	replace
289	[BUG]  [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
290	[BUG]  [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
291	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saver);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
292	[BUG]  [BUGGY]  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
293	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  HELPER_SOURCE))  {	  if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	57	None	replace
294	[BUG]  [BUGGY]  if(reduction!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	39	9	replace
296	[BUG]  [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	39	9	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	39	9	replace
298	[BUG]  [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	39	9	replace
299	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  cannot  find  symbol  Saving  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  Saving	39	None	replace
300	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
301	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
302	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
303	[BUG]  [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
304	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	178	None	replace
305	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	178	None	replace
306	[BUG]  [BUGGY]  if(helperCodeCost  ==  (success  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  success  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (success  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (success  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  success	178	None	replace
307	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	178	None	replace
308	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
309	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getSavings()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getSavings()))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
310	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getMask()))  {  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getMask()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getMask()))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
311	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getSavingsCount()))  {  [CE]  cannot  find  symbol  reduction  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getSavingsCount()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getSavingsCount()))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
312	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.reductionCount))  {  [CE]  cannot  find  symbol  reduction  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.reductionCount))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.reductionCount))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
313	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.reductions))  {  [CE]  cannot  find  symbol  reduction  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.reductions))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.reductions))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
314	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getSize()))  {	  if(savings    >    (savings    *    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
316	[BUG]  [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	35	9	replace
317	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    if(savings  >  (savings  *  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
318	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  If(savings  >  (savings  *  helperCodeCost))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  If(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    If(savings  >  (savings  *  helperCodeCost))  {	  	non-compiled	[CE]  	200	None	add
319	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    if(savings  >  (savings  *  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
320	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
321	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
322	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
323	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
324	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	316	None	replace
325	[BUG]  [BUGGY]  if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	316	None	replace
326	[BUG]  [BUGGY]  if(helperCodeCost  >  (1savings  +  savings))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (1savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (1savings  +  savings))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	316	None	replace
327	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  (1  <  <  1)))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  (1  <  <  1)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  (1  <  <  1)))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	316	None	replace
328	[BUG]  [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	287	None	replace
329	[BUG]  [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (helperCodeCost  +  savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	287	None	replace
330	[BUG]  [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  savers))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (helperCodeCost  +  savers))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	287	None	replace
331	[BUG]  [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost!=  helperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost!=  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost!=  helperCodeCost)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	287	None	replace
332	[BUG]  [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (helperCodeCost  +  SAVES_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	287	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  +  helperCodeCost))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	55	8	replace
334	[BUG]  [BUGGY]  if(savings  ==  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  +  helperCodeCost))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	55	8	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (savings  +  helperCodeCost))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	55	8	replace
336	[BUG]  [BUGGY]  if(savings  >=  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (savings  +  helperCodeCost))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	55	8	replace
337	[BUG]  [BUGGY]  if(savings!=  (savings  +  HelperCodeCost.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  HelperCodeCost.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  HelperCodeCost.HELPER_SOURCE))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	55	None	replace
338	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	197	None	replace
339	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	197	None	replace
340	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	197	None	replace
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	132	9	replace
342	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	132	9	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
344	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
345	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	297	None	replace
346	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	297	None	replace
347	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	297	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
349	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
350	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  IllegalStateException  	297	1	replace
351	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  IllegalStateException  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  IllegalStateException  	297	1	replace
352	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	122	None	replace
353	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	122	None	replace
354	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  reduction))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  reduction))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  *  reduction))  {	  if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	122	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.apply());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
361	[BUG]  [BUGGY]  InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
362	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
363	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCodeCost.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCodeCost.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCodeCost.THRESHOLD))  {	  if(savings    >    (savings    *    HelperCode.THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	202	None	replace
364	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.THRESHOLD))  {	  if(savings    >    (savings    *    HelperCode.THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	202	None	replace
365	[BUG]  [BUGGY]  if(helperCodeCost!=  (saver  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saver  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saver  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	216	None	replace
366	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	216	None	replace
367	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  *  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	216	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	9	replace
369	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	9	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	8	replace
371	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	8	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	9	replace
373	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	9	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	8	replace
375	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	113	8	replace
376	[BUG]  [BUGGY]  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  incompatible  types	113	None	replace
377	[BUG]  [BUGGY]  int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
378	[BUG]  [BUGGY]  int  savings  >  (savers  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (savers  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (savers  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
379	[BUG]  [BUGGY]  int  savings  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
380	[BUG]  [BUGGY]  int  savings  >  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (saved  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
381	[BUG]  [BUGGY]  if(HelperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
382	[BUG]  [BUGGY]  if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
383	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
384	[BUG]  [BUGGY]  if(HelperCodeCost  >  (savings  +  1))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  (savings  +  1))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
385	[BUG]  [BUGGY]  if(HelperCodeCost  >  (savings  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  (savings  +  helperCodeCost))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
386	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	166	None	replace
387	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
388	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getSeconds()  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getSeconds()  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getSeconds()  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	288	None	replace
389	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (saver    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	183	None	replace
390	[BUG]  [BUGGY]  if(HelperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	77	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	8	replace
392	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	8	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
394	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	8	replace
396	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	8	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
398	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
400	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  /  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  -  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  -  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
402	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  -  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  -  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  -  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	102	9	replace
403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	9	replace
404	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	9	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	8	replace
406	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	8	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	9	replace
408	[BUG]  [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	9	replace
409	[BUG]  [BUGGY]  if(saves  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saves  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	72	None	replace
410	[BUG]  [BUGGY]  if(saved  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	72	None	replace
411	[BUG]  [BUGGY]  if(helperCodeCost  >  reductions.length  +  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  length  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  reductions.length  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  reductions.length  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  length	127	None	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  reductions.size()  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  reductions.size()  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	127	9	replace
413	[BUG]  [BUGGY]  if(helperCodeCost  >  reductions.size()  +  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  reductions.size()  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  reductions.size()  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	127	9	replace
414	[BUG]  [BUGGY]  if(helperCodeCost  >  (reductions  *  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reductions  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reductions  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	127	None	replace
415	[BUG]  [BUGGY]  if(helperCodeCost  >=  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	127	None	replace
416	[BUG]  [BUGGY]  if(helperCodeCost  >  reductions  +  SAVINGS_THRESHOLD)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  reductions  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  reductions  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	127	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	100	8	replace
418	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	100	8	replace
419	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    saverCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	298	None	replace
420	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HIGHEST_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HIGHEST_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HIGHEST_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    saverCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	298	None	replace
421	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
422	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
423	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
424	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
425	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	176	None	add
426	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
427	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
428	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
429	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	181	None	add
430	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
431	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
432	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	181	None	add
433	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
434	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
435	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(reduction);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
436	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
437	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
438	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getReductionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getReductionGatherer();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getReductionGatherer();	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
439	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
440	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	144	9	replace
442	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	144	9	replace
443	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	144	None	replace
444	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  ')'  expected	144	None	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	8	replace
446	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	8	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	9	replace
448	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	9	replace
449	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
450	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
451	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  1)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  reducer.getChildCount()  >  1)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	273	None	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	208	8	replace
453	[BUG]  [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	208	8	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	208	9	replace
455	[BUG]  [BUGGY]  if(helperCodeCost  <=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	208	9	replace
456	[BUG]  [BUGGY]  if(saved  >  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  HELPER_SOURCE))  {	  if(saved    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	268	None	replace
457	[BUG]  [BUGGY]  if(saved  >  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  HelperCodeCost))  {	  if(saved    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	268	None	replace
458	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
459	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  If(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  If(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    If(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  	187	None	add
460	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
461	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
462	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  Saving)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  Saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  <  SAVINGS_THRESHOLD  +  Saving)  {	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
463	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saving)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saving)  {	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
464	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	248	None	replace
465	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  save))  {  [CE]  cannot  find  symbol  save  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  save))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  save))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  save	83	None	replace
466	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	83	None	replace
467	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost!=  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost!=  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
468	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  >=  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  >=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost  >=  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
469	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  >>  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  >>  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost  >>  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
470	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  ==  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  ==  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost  ==  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
471	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  If(helperCodeCost!=  (savings  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  If(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    If(helperCodeCost!=  (savings  +  savings))  {	  	non-compiled	[CE]  	62	None	add
472	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  [Delete]  (savings  +  savings))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  [Delete]  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost  [Delete]  (savings  +  savings))  {	  	non-compiled	[CE]  	62	None	add
473	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  [BUGGY]  (savings  +  savings))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost  [BUGGY]  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost  [BUGGY]  (savings  +  savings))  {	  	non-compiled	[CE]  	62	None	add
474	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
475	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.RETURN  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.RETURN  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.RETURN  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
476	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
477	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
478	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.apply())  {  [CE]  cannot  find  symbol  reduction  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.apply())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.apply())  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	78	None	replace
479	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savers))  {  [CE]  cannot  find  symbol  savers  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  savers))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	308	None	replace
480	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  +  1))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	308	9	replace
481	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  1))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  1))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	308	9	replace
482	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    saves))    {    	non-compiled	[CE]  cannot  find  symbol  saved	228	None	replace
483	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  savings))  {	  if(helperCodeCost!=    (savings    +    saves))    {    	non-compiled	[CE]  cannot  find  symbol  saved	228	None	replace
484	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  saves))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  saves))  {	  if(helperCodeCost!=    (savings    +    saves))    {    	non-compiled	[CE]  cannot  find  symbol  saved	228	None	replace
485	[BUG]  [BUGGY]  if(reductions!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	312	None	replace
486	[BUG]  [BUGGY]  if(reductions!=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (saved  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	312	None	replace
487	[BUG]  [BUGGY]  if(helperCodeCost!=  reductions  +  SAVINGS_THRESHOLD)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reductions  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reductions  +  SAVINGS_THRESHOLD)  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	312	None	replace
488	[BUG]  [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	312	None	replace
489	[BUG]  [BUGGY]  if(reductions!=  (savings  +  helperCodeCost))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (savings  +  helperCodeCost))  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	312	None	replace
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    [Delete]    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	222	9	replace
491	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    [Delete]    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	222	9	replace
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	196	9	replace
493	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	196	9	replace
494	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	196	None	replace
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	196	8	replace
496	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	196	8	replace
497	[BUG]  [BUGGY]  if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
498	[BUG]  [BUGGY]  if(helperCodeCost!=  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (2savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
499	[BUG]  [BUGGY]  if(helperCodeCost  ==  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (2savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
500	[BUG]  [BUGGY]  if(helperCodeCost  >=  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (2savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
501	[BUG]  [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Integer  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
502	[BUG]  [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
503	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
504	[BUG]  [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
505	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
506	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	209	None	add
507	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
508	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (1SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (1SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (1SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	209	None	add
509	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	209	None	add
510	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
511	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    If(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	26	None	add
512	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  type	26	None	add
513	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
514	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    int  savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	26	None	add
515	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  <  (savings  *  SAVEINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
516	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getSize()  +  savings.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getSize()  +  savings.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getSize()  +  savings.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
517	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getSize()  +  helperCodeCost.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getSize()  +  helperCodeCost.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getSize()  +  helperCodeCost.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
518	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  savings.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  savings.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  savings.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
519	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCodeCost.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCodeCost.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  helperCodeCost.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
520	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCode.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCode.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  helperCode.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
521	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
522	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [CE]  cannot  find  symbol  Saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  Saving	19	None	replace
523	[BUG]  [BUGGY]  if(savings  >  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	9	None	replace
524	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCode.INVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	9	None	replace
525	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	9	None	replace
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  +  helperCodeCost))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
527	[BUG]  [BUGGY]  if(savings  >  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  helperCodeCost))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
528	[BUG]  [BUGGY]  if(savings  >  (savings  +  reduction.inVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  reduction.inVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  reduction.inVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
529	[BUG]  [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saver    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	186	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saver    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	186	8	replace
531	[BUG]  [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saver    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	186	8	replace
532	[BUG]  [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(saver    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	186	None	replace
533	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  IllegalStateException  	142	1	replace
534	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  IllegalStateException  	142	1	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	142	9	replace
536	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	142	9	replace
537	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
538	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	89	None	add
539	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
540	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
541	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	89	None	add
542	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
543	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
544	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
545	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  1))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
546	[BUG]  [BUGGY]  If(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
547	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
548	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  0))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  0))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
549	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  5))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  5))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  5))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
551	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
553	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
554	[BUG]  [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incompatible  types	210	None	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
556	[BUG]  [BUGGY]  if(helperCodeCost  <=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	210	8	replace
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  savings))  {	  if(helperCodeCost!=    (savings    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	63	9	replace
558	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  savings))  {	  if(helperCodeCost!=    (savings    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	63	9	replace
559	[BUG]  [BUGGY]  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
560	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
561	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
562	[BUG]  [BUGGY]  If(savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
563	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
564	[BUG]  [BUGGY]  If(savings  >=  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  null);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  null);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
569	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
570	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	191	None	add
571	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
572	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
573	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	191	None	add
574	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  geterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  geterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  geterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
575	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
576	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  If(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  If(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    If(savings  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	71	None	add
577	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  <  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
578	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  <  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
579	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    int  savings  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	71	None	add
580	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
581	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	224	None	replace
582	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	224	None	replace
583	[BUG]  [BUGGY]  if(reduction  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	276	None	replace
584	[BUG]  [BUGGY]  if(saved  >  (savings  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  +  helperCodeCost))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	276	None	replace
585	[BUG]  [BUGGY]  if(saved  >  (savings  +  HelperCodeCost.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  +  HelperCodeCost.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  +  HelperCodeCost.HELPER_SOURCE))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	276	None	replace
586	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
587	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction.apply())  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction.apply())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction.apply())  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	163	None	replace
588	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.NAME)  {  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
589	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.CALL  &&  helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	163	None	replace
590	[BUG]  [BUGGY]  else  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  else  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	else  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  'else'  without  'if'	106	None	replace
591	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  HELPER_SOURCE))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	106	None	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (helperCodeCost  *  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
593	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  *  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
594	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
595	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions.values())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
596	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions)  {  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	96	None	replace
597	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.size())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions.size())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	96	None	replace
598	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	96	None	replace
599	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  :  reductions.get(helperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
600	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	For(Reduction  reduction  :  reductions.values())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	96	None	replace
601	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
602	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    If(savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	5	None	add
603	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	5	None	add
604	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	5	None	add
605	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  saverCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
606	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  saverCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
608	[BUG]  [BUGGY]  while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
609	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	while(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  IllegalArgumentException  	237	9	replace
610	[BUG]  [BUGGY]  while(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  IllegalArgumentException  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  IllegalArgumentException  	237	9	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	while(savings  ==  helperCodeCost  +  SAVINGS_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
612	[BUG]  [BUGGY]  while(savings  ==  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  helperCodeCost  +  SAVINGS_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  helperCodeCost  &&  savings!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	while(savings  ==  helperCodeCost  &&  savings!=  SAVINGS_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
614	[BUG]  [BUGGY]  while(savings  ==  helperCodeCost  &&  savings!=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  helperCodeCost  &&  savings!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  helperCodeCost  &&  savings!=  SAVINGS_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	while(savings  ==  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
616	[BUG]  [BUGGY]  while(savings  ==  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	237	8	replace
617	[BUG]  [BUGGY]  while(savings  ==  HelperCode.SINGLE_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCode.SINGLE_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCode.SINGLE_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	237	None	replace
618	[BUG]  [BUGGY]  while(savings  ==  HelperCode.THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCode.THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCode.THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	237	None	replace
619	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
620	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  	179	None	add
621	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
622	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
623	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
624	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
625	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
626	[BUG]  [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	38	None	replace
627	[BUG]  [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	38	None	replace
628	[BUG]  [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
629	[BUG]  [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings);  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings);	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	38	None	replace
630	[BUG]  [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	38	None	replace
631	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	304	None	replace
632	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	304	None	replace
633	[BUG]  [BUGGY]  if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  savers  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  savers	304	None	replace
634	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  saved	304	None	replace
635	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	304	None	replace
636	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
637	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
640	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
641	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
642	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (success  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (success  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (success  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
643	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saver  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
644	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
649	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
650	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
651	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
652	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
653	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
654	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
655	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    If(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  	289	None	add
656	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    if(HelperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
657	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  Saving))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
658	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  	289	None	add
659	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
660	[BUG]  [BUGGY]  if(saving  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	130	None	replace
661	[BUG]  [BUGGY]  if(reduction  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	130	None	replace
662	[BUG]  [BUGGY]  if(saver  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	130	None	replace
663	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	190	None	replace
664	[BUG]  [BUGGY]  If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
665	[BUG]  [BUGGY]  If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
666	[BUG]  [BUGGY]  If(helperCodeCost  >  (savings  +  1))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  (savings  +  1))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
667	[BUG]  [BUGGY]  If(helperCodeCost  >  (savings  +  5))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  >  (savings  +  5))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  >  (savings  +  5))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	68	9	replace
669	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	68	9	replace
670	[BUG]  [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	replace
671	[BUG]  [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  success  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(success  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  success	68	None	replace
672	[BUG]  [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  success  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(success  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  success	68	None	replace
673	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	217	None	replace
674	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
675	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)||  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
676	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD)  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD)  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)&&  HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD)	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
677	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  helperCodeCost  :  HelperCodeCost.INSTANCE;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  helperCodeCost  :  HelperCodeCost.INSTANCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  helperCodeCost  :  HelperCodeCost.INSTANCE;	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
678	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.INSTANCE;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.INSTANCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.INSTANCE;	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
679	[BUG]  [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.before(helperCodeCost);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.before(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	HelperCodeCost  <=  HelperCodeCost  >(helperCodeCost  +  SAVINGS_THRESHOLD)?  HelperCodeCost  :  HelperCodeCost.before(helperCodeCost);	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  not  a  statement	217	None	replace
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  savings  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  savings  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
681	[BUG]  [BUGGY]  if(helperCodeCost  >  savings  +  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  savings  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  savings  +  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
683	[BUG]  [BUGGY]  if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	8	replace
685	[BUG]  [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	8	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	8	replace
687	[BUG]  [BUGGY]  if(helperCodeCost  >  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	8	replace
688	[BUG]  [BUGGY]  if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	167	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	9	replace
690	[BUG]  [BUGGY]  if(helperCodeCost!=  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	9	replace
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	82	8	replace
692	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	82	8	replace
693	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	82	None	replace
694	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost!=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
695	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  >=  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  >=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost  >=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
696	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  >>  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  >>  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost  >>  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
697	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost  ==  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
698	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  If(helperCodeCost!=  (savings  +  helperCodeCost))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  If(helperCodeCost!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    If(helperCodeCost!=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  	226	None	add
699	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost!=  (savings  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
700	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  [Delete]  (savings  +  helperCodeCost))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost  [Delete]  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost  [Delete]  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  	226	None	add
701	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getLength()))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getLength()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getLength()))  {	  if(savings    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
702	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.length))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.length))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.length))  {	  if(savings    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
703	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
704	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	109	None	add
705	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
706	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	109	None	add
707	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  type	109	None	add
708	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  *  SHOWINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (savings  *  SHOWINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (savings  *  SHOWINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
709	[BUG]  [BUGGY]  if(saving  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	98	None	replace
710	[BUG]  [BUGGY]  if(saver  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	98	None	replace
711	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  savings))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  savings))  {	  if(helperCodeCost!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
712	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  savers))  {  [CE]  cannot  find  symbol  savers  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  savers))  {	  if(helperCodeCost!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	42	None	replace
713	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  helperCodeCost))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  helperCodeCost))  {	  if(helperCodeCost!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
714	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  saving))  {	  if(helperCodeCost!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	42	None	replace
715	[BUG]  [BUGGY]  if(helperCodeCost  >  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saverCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	131	None	replace
716	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.apply(SAVINGS_THRESHOLD)))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.apply(SAVINGS_THRESHOLD)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.apply(SAVINGS_THRESHOLD)))  {	  if(helperCodeCost!=    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
717	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saver  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saver	256	None	replace
718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	8	replace
719	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	8	replace
720	[BUG]  [BUGGY]  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	75	None	replace
721	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
722	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)&  0;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)&  0;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)&  0;	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
723	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
724	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
727	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
728	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionGatherer,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionGatherer,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductionGatherer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
729	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	296	None	add
730	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	296	None	add
731	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	296	None	add
732	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&|  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&|  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&|  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	296	None	add
733	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	296	None	add
734	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    if(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
735	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  If(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  If(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    If(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	211	None	add
736	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    if(helperCodeCost!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
737	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    if(helperCodeCost  >=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
738	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    if(helperCodeCost  ==  (helperCodeCost  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
739	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    if(helperCodeCost  ==  (helperCodeCost  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
740	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    int  helperCodeCost  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	211	None	add
741	[BUG]  [BUGGY]  int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
742	[BUG]  [BUGGY]  int  helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (savers  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
743	[BUG]  [BUGGY]  int  helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
744	[BUG]  [BUGGY]  int  helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
745	[BUG]  [BUGGY]  int  helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
746	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :(savings  +  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :(savings  +  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :(savings  +  SAVINGS_THRESHOLD);	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
747	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	206	None	replace
748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	206	8	replace
749	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	206	8	replace
750	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	206	None	replace
751	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
752	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	184	None	add
753	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
754	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	184	None	add
755	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
756	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
757	[BUG]  [BUGGY]  if(reduction  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	110	None	replace
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	110	9	replace
759	[BUG]  [BUGGY]  if(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	110	9	replace
760	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
761	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  reduction.estimateSavings()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  reduction.estimateSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  reduction.estimateSavings()))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
762	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  savers))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  savers))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
763	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  saving))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  saving))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
764	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	205	8	replace
766	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	205	8	replace
767	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	205	None	replace
768	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saver  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saver	205	None	replace
769	[BUG]  [BUGGY]  if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	234	None	replace
770	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  savings  >  (1savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	234	None	replace
771	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	234	None	replace
772	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getInitializingReduction())  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getInitializingReduction())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getInitializingReduction())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	234	None	replace
773	[BUG]  [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	254	None	replace
774	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    if(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
775	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  If(savings  ==  (helperCodeCost  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  If(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    If(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	123	None	add
776	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
777	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    if(savings!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
778	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    if(savings  ==  (helperCodeCost  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
779	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  >=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    if(savings  >=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
780	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  for(savings  ==  (helperCodeCost  +  savings))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  for(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    for(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  not  a  statement	123	None	add
781	[BUG]  [BUGGY]  if(helperCodeCost!=  (savers  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  savers  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savers  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savers  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >>    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	111	None	replace
782	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD,  savings))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD,  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD,  savings))  {	  if(helperCodeCost    >>    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	111	None	replace
783	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
784	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    If(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	30	None	add
785	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
786	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
787	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	30	None	add
788	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  *  SAVEINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	9	replace
790	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	9	replace
791	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saver  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	182	None	replace
792	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	182	None	replace
793	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	8	replace
794	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	8	replace
795	[BUG]  [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(reduction    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
796	[BUG]  [BUGGY]  if(saverCodeCost  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saverCodeCost  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saverCodeCost  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(reduction    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	104	None	replace
797	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saves    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	238	None	replace
798	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.saveSavings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saves    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	238	None	replace
799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	177	9	replace
800	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	177	9	replace
801	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
802	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
803	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  >>  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
804	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	86	None	add
805	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  ==  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
806	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings!=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
807	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  *  savings))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
809	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  savings))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
810	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
811	[BUG]  [BUGGY]  if(savings  >=  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
813	[BUG]  [BUGGY]  if(savings  ==  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
814	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	9	replace
815	[BUG]  [BUGGY]  if(savings  <  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	9	replace
816	[BUG]  [BUGGY]  if(savings  <  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  *  HelperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	201	None	replace
817	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	185	9	replace
818	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	185	9	replace
819	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
820	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
821	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
822	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (success  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (success  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (success  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	244	None	replace
823	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	244	None	replace
824	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	244	None	replace
825	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	244	None	replace
826	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  helperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	242	None	replace
827	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  reduction.getSavings()))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  reduction.getSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  reduction.getSavings()))  {	  if(helperCodeCost!=    (helperCodeCost    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	242	None	replace
828	[BUG]  [BUGGY]  if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	267	None	replace
829	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saver)  {  [CE]  cannot  find  symbol  saver  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saver)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saver)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  saver	267	None	replace
830	[BUG]  [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	267	None	replace
831	[BUG]  [BUGGY]  if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saverCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	267	None	replace
832	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [CE]  cannot  find  symbol  Saving  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  Saving	267	None	replace
833	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
834	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
835	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
836	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
837	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	91	None	add
838	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	91	None	add
839	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
840	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
841	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	207	None	add
842	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	207	None	add
843	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
844	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    for(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  not  a  statement	207	None	add
845	[BUG]  [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  savings  >  (1  <  <  SAVINGS_THRESHOLD))  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  savings  >  (1  <  <  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  savings  >  (1  <  <  SAVINGS_THRESHOLD))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	275	None	replace
846	[BUG]  [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD))  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (1  <  <  SAVINGS_THRESHOLD))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	275	None	replace
847	[BUG]  [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  saving  >  (1  <  <  SAVINGS_THRESHOLD))  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  saving  >  (1  <  <  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (1  <  <  SAVINGS_THRESHOLD)||  saving  >  (1  <  <  SAVINGS_THRESHOLD))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  >  expected	275	None	replace
848	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	275	None	replace
849	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	18	None	replace
850	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	18	None	replace
851	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	67	None	replace
852	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
853	[BUG]  [BUGGY]  if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  savers  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savers  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  savers	67	None	replace
854	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	67	None	replace
855	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  saved	67	None	replace
856	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
857	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
858	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reductions  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
859	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
860	[BUG]  [BUGGY]  If(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
861	[BUG]  [BUGGY]  If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
862	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	8	replace
863	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	8	replace
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
865	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
866	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	192	None	replace
867	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  *  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  *  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	8	replace
868	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  *  savings)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  *  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  *  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	8	replace
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  *  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	8	replace
870	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	8	replace
871	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  HelperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	270	None	replace
872	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	270	None	replace
873	[BUG]  [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  cannot  find  symbol  saver  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	270	None	replace
874	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	270	None	replace
875	[BUG]  [BUGGY]  if(helperCodeCost  >  (reduction.saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reduction.saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reduction.saved  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saved    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	265	None	replace
876	[BUG]  [BUGGY]  if(helperCodeCost  >  (success  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  success  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (success  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (success  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saved    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  success	265	None	replace
877	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]    (SAVINGS_THRESHOLD  +  savings))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    	compilable	  [FE]  AssertionFailedError  	40	9	replace
878	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]    (SAVINGS_THRESHOLD  +  savings))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    	compilable	  [FE]  AssertionFailedError  	40	9	replace
879	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
880	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
881	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
882	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reducer,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
883	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	6	8	replace
884	[BUG]  [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	6	8	replace
885	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
886	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  [FE]      IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    If(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  	non-compiled	[CE]  	65	None	add
887	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    if(savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
888	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
889	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  [FE]            IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  	non-compiled	[CE]  	65	None	add
890	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  supporterCodeCost)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  if(savings  >  SAVINGS_THRESHOLD  +  supporterCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    if(savings  >  SAVINGS_THRESHOLD  +  supporterCodeCost)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
891	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
892	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  	138	None	add
893	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
894	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  Saving)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
895	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
896	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  	138	None	add
897	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
898	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  reducers);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
899	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
900	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
901	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  savers)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  savers)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  +  savers)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
902	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
903	[BUG]  [BUGGY]  if(savings  <  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  *  HELPER_SOURCE))  {	  if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	27	None	replace
904	[BUG]  [BUGGY]  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
905	[BUG]  [BUGGY]  int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
906	[BUG]  [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD;	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
907	[BUG]  [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD  +  savings);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings)?  SAVINGS_THRESHOLD  :  SAVINGS_THRESHOLD  +  savings);	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
908	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
909	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
911	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
912	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	93	None	replace
913	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	93	None	replace
914	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers)||  saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  savers  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers)||  saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers)||  saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  savers	93	None	replace
915	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
916	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
917	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	231	None	replace
918	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	231	None	replace
919	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	231	None	replace
920	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	231	None	replace
921	[BUG]  [BUGGY]  if(savings!=  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  HelperCodeCost.INVALID_THRESHOLD))  {	  if(savings!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	300	None	replace
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
923	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	8	replace
925	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	8	replace
926	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	294	None	replace
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
928	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
929	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD)||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	294	None	replace
930	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCodeCost)||  savings  >  HelperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCodeCost)||  savings  >  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCodeCost)||  savings  >  HelperCodeCost)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	294	None	replace
931	[BUG]  [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	294	None	replace
932	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    if(savings!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
933	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  >=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    if(savings  >=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
934	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  >>  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  >>  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    if(savings  >>  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
935	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    if(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
936	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  If(savings!=  (helperCodeCost  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  If(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    If(savings!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	52	None	add
937	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  If(savings  >=  (helperCodeCost  +  savings))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  If(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    If(savings  >=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	52	None	add
938	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
939	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
940	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
941	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
942	[BUG]  [BUGGY]  if(helperCodeCost  >  (savers  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  savers  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savers  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savers  *  SAVINGS_THRESHOLD))  {	  if(reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	271	None	replace
943	[BUG]  [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  success  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(success  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  success	291	None	replace
944	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	291	8	replace
945	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	291	8	replace
946	[BUG]  [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	291	None	replace
947	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	302	None	replace
948	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	302	None	replace
949	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saver  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saver  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saver	302	None	replace
950	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	302	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
956	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saverCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saverCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saverCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
957	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
958	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
959	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
960	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reduction.getReductionSize()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reduction.getReductionSize()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reduction.getReductionSize()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
961	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reduction.getReduction()))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reduction.getReduction()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reduction.getReduction()))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
962	[BUG]  [BUGGY]  AssertionFailedError.show(helperCode,  reduction.apply());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  AssertionFailedError.show(helperCode,  reduction.apply());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	AssertionFailedError.show(helperCode,  reduction.apply());	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
963	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saved    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	253	None	replace
964	[BUG]  [BUGGY]  if(helperCodeCost!=  (sAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  sAVINGS_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (sAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (sAVINGS_THRESHOLD  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saved    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  sAVINGS_THRESHOLD	253	None	replace
965	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.saved  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saved    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	253	None	replace
966	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings!=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
967	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  >=  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  >=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings  >=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
968	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  >>  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  >>  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings  >>  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
969	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  ==  (savings  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings  ==  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings  ==  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
970	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  If(savings!=  (savings  +  helperCodeCost))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  If(savings!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    If(savings!=  (savings  +  helperCodeCost))  {	  	non-compiled	[CE]  	299	None	add
971	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings!=  (savings  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
972	[BUG]  [BUGGY]  if(savings  ==  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  *  HELPER_SOURCE))  {	  if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	31	None	replace
973	[BUG]  [BUGGY]  if(savings  ==  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  *  HelperCodeCost))  {	  if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	31	None	replace
974	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
975	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
976	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
977	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
978	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	28	None	add
979	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	28	None	add
980	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
981	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
982	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
983	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	277	None	add
984	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
985	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
986	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	277	None	add
987	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
988	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
989	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
990	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
991	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	3	None	add
992	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	3	None	add
993	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	3	None	add
994	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	293	None	add
995	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    If(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	293	None	add
996	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  saving  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	293	None	add
997	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  for(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  for(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    for(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  not  a  statement	293	None	add
998	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  int  savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  int  savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    int  savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	293	None	add
999	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	281	9	replace
1000	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	281	9	replace
1001	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	281	9	replace
1002	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	281	9	replace
1003	[BUG]  [BUGGY]  if(success  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  success  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(success  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(success  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  success	281	None	replace
1004	[BUG]  [BUGGY]  if(reduction  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	281	None	replace
1005	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	281	None	replace
1006	[BUG]  [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	295	None	replace
1007	[BUG]  [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	295	None	replace
1008	[BUG]  [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	295	None	replace
1009	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [CE]  cannot  find  symbol  saving  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	20	None	replace
1010	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1011	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1012	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >>  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1013	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    If(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	198	None	add
1014	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1015	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	198	None	add
1016	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost!=  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    if(helperCodeCost!=  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1017	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  >=  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  >=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    if(helperCodeCost  >=  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1018	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1019	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  >>  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  >>  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    if(helperCodeCost  >>  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1020	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  ==  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  if(helperCodeCost  ==  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    if(helperCodeCost  ==  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1021	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  If(helperCodeCost!=  (savings  +  1))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  If(helperCodeCost!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    If(helperCodeCost!=  (savings  +  1))  {	  	non-compiled	[CE]  	60	None	add
1022	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1023	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
1024	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  If(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  If(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    If(savings  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  	269	None	add
1025	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    int  savings  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  	269	None	add
1026	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
1027	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  Saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  *  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
1028	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  *  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  *  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
1029	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1030	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1031	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1032	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    If(helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	272	None	add
1033	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1034	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1035	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	272	None	add
1036	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saving    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	129	9	replace
1037	[BUG]  [BUGGY]  if(helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saving    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	129	9	replace
1038	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1039	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1040	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  1)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1041	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  1)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  1)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1043	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  1)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1044	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saved	70	None	replace
1045	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (savings  +  helperCodeCost))  {	  if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	59	9	replace
1046	[BUG]  [BUGGY]  if(savings  <  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  +  helperCodeCost))  {	  if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	59	9	replace
1047	[BUG]  [BUGGY]  if(savings!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {	  if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	59	None	replace
1048	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1049	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	213	None	add
1050	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1051	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1052	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	213	None	add
1053	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1054	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  savings))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  savings))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1055	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1056	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1057	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  savers))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  savers))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1058	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  saving))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  saving))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1059	[BUG]  [BUGGY]  if(helperCodeCost!=  (rededuction.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  rededuction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (rededuction.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (rededuction.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  rededuction	162	None	replace
1060	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(SAVINGS_THRESHOLD!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    saving))    {    	compilable	  [FE]  AssertionFailedError  	249	9	replace
1061	[BUG]  [BUGGY]  if(SAVINGS_THRESHOLD!=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(SAVINGS_THRESHOLD!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    saving))    {    	compilable	  [FE]  AssertionFailedError  	249	9	replace
1062	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers))  {  [CE]  cannot  find  symbol  savers  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savers))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  savers	249	None	replace
1063	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  reductions.size())  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1064	[BUG]  [BUGGY]  if(savings!=  reductions.size())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  reductions.size())  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (reductions.size()))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1066	[BUG]  [BUGGY]  if(savings!=  (reductions.size()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions.size()))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1067	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (reductions.size()  +  helperCodeCost))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	7	replace
1068	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions.size()  +  helperCodeCost))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	7	replace
1069	[BUG]  [BUGGY]  if(reductions!=  reductions.size())  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  reductions.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  reductions.size())  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	311	None	replace
1070	[BUG]  [BUGGY]  if(reductions!=  (reductions.size()  +  helperCodeCost))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (reductions.size()  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (reductions.size()  +  helperCodeCost))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	311	None	replace
1071	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
1072	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getSavings()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
1073	[BUG]  [BUGGY]  if(helperCodeCost  ==  reduction.getSize())  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  reduction.getSize())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  reduction.getSize())  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	306	None	replace
1074	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	141	None	replace
1075	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1076	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost  >=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1077	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  >>  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  >>  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost  >>  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1078	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1079	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  If(helperCodeCost!=  (helperCodeCost  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  If(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    If(helperCodeCost!=  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	193	None	add
1080	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost!=  (helperCodeCost  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1081	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  +  savings))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost  [BUGGY]  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  	193	None	add
1082	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1083	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  savers))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  savers))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1084	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  saving))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  saving))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1085	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reductions.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1086	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  Savings_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  Savings_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  Savings_THRESHOLD))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
1088	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
1089	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1090	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	105	None	add
1091	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1092	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1093	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	105	None	add
1094	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SHOWINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SHOWINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  *  SHOWINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1095	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
1096	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	225	None	replace
1097	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	compilable	  [FE]  AssertionFailedError  	61	9	replace
1098	[BUG]  [BUGGY]  if(savings!=  (savings  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	compilable	  [FE]  AssertionFailedError  	61	9	replace
1099	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	compilable	  [FE]  AssertionFailedError  	61	9	replace
1100	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	compilable	  [FE]  AssertionFailedError  	61	9	replace
1101	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saved	61	None	replace
1102	[BUG]  [BUGGY]  if(reduction!=  (savings  +  1))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
1103	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1104	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1105	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1106	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1107	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	107	None	add
1108	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	107	None	add
1109	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1110	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1111	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1112	[BUG]  [BUGGY]  for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1113	[BUG]  [BUGGY]  Pentru(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Pentru(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Pentru(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	145	None	replace
1114	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext().getNext().getNext().getNext())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext().getNext().getNext().getNext())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	For(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext().getNext().getNext().getNext())  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	145	None	replace
1115	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1116	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1117	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1118	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1119	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    If(savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	54	None	add
1120	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	54	None	add
1121	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1122	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	204	None	add
1123	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1124	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1125	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1126	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	204	None	add
1127	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saverCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1128	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1129	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1130	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >>  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1131	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    If(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	58	None	add
1132	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1133	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	58	None	add
1134	[BUG]  [BUGGY]  if(reductions!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	315	None	replace
1135	[BUG]  [BUGGY]  if(reductions!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	315	None	replace
1136	[BUG]  [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (SAVINGS_THRESHOLD  *  savings))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	315	None	replace
1137	[BUG]  [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	315	None	replace
1138	[BUG]  [BUGGY]  if(reductions!=  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (saved  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	315	None	replace
1139	[BUG]  [BUGGY]  if(saved!=  (reductions  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved!=  (reductions  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved!=  (reductions  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	315	None	replace
1140	[BUG]  [BUGGY]  if(saved  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saved	188	None	replace
1141	[BUG]  [BUGGY]  if(saver  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saver  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saver  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  <  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saver	188	None	replace
1142	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	259	None	replace
1143	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	259	None	replace
1144	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	259	None	replace
1145	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	259	None	replace
1146	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1147	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1148	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1149	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1150	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	215	None	add
1151	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [BUGGY]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	215	None	add
1152	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	215	None	add
1153	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1154	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1155	[BUG]  [BUGGY]  If(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1156	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  savers))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  savers))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1157	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1158	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  saving))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  saving))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1159	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1160	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1161	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1162	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1163	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	56	None	add
1164	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	56	None	add
1165	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [BUGGY]  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	56	None	add
1166	[BUG]  [BUGGY]  if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	318	None	replace
1167	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  savings  >  (2savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	318	None	replace
1168	[BUG]  [BUGGY]  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	140	None	replace
1169	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savers))  {  [CE]  cannot  find  symbol  savers  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savers))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  savers	140	None	replace
1170	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	140	None	replace
1171	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1172	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	301	None	add
1173	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1174	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  for(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  for(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    for(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  not  a  statement	301	None	add
1175	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	223	9	replace
1177	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	223	9	replace
1178	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savers  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  savers  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savers  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  savers  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  savers	223	None	replace
1179	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saver  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saver  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saver	223	None	replace
1180	[BUG]  [BUGGY]  if(saverCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saverCost  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saverCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saverCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saving    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saverCost	292	None	replace
1181	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  helperCode))  {	  if(helperCodeCost!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	194	None	replace
1182	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  saving))  {  [CE]  cannot  find  symbol  reduction  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  saving))  {	  if(helperCodeCost!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
1183	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  HelperCode.INVALID_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	194	None	replace
1184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	compilable	  [FE]  AssertionFailedError  	280	9	replace
1185	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	compilable	  [FE]  AssertionFailedError  	280	9	replace
1186	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  saving)  {  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  saving)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saving	280	None	replace
1187	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  saverCodeCost  >  SAVINGS_THRESHOLD)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	280	None	replace
1188	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  savings)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	280	None	replace
1189	[BUG]  [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	280	None	replace
1190	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.length  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.length  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.length  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	22	None	replace
1191	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.apply(saverCode)))  {  [CE]  cannot  find  symbol  saverCode  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.apply(saverCode)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.apply(saverCode)))  {	  if(helperCodeCost    ==    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saverCode	22	None	replace
1192	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	79	None	replace
1193	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  savers))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  savers))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
1194	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1195	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1196	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	compilable	  [FE]  AssertionFailedError  	279	9	replace
1198	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	compilable	  [FE]  AssertionFailedError  	279	9	replace
1199	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	279	None	replace
1200	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saverCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	279	None	replace
1201	[BUG]  [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  saving	279	None	replace
1202	[BUG]  [BUGGY]  if(reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	279	None	replace
1203	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saving  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saving  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saving  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saver    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	120	None	replace
1204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	135	9	replace
1205	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    Saving))    {    	compilable	  [FE]  AssertionFailedError  	135	9	replace
1206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  +  1))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	10	8	replace
1207	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  1))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  1))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	10	8	replace
1208	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  HelperCode.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  HelperCode.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  HelperCode.HELPER_SOURCE))  {	  if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	57	None	replace
1209	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1210	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1211	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1212	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1213	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1214	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
1215	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
1216	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
1217	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  reduction.estimateSavings))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  reduction.estimateSavings))  {	  if(helperCodeCost!=    (helperCodeCost    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	242	None	replace
1218	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  saves))  {	  if(helperCodeCost!=    (helperCodeCost    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saves	242	None	replace
1219	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	249	None	replace
1220	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  HELPER_SOURCE))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	170	None	replace
1221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  +  helperCodeCost))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	170	9	replace
1222	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  helperCodeCost))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	170	9	replace
1223	[BUG]  [BUGGY]  if(helperCode  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	276	None	replace
1224	[BUG]  [BUGGY]  if(helperCodeCost  >  (saves  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (saves  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saves  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	276	None	replace
1225	[BUG]  [BUGGY]  if(savings!=  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  HELPER_SOURCE)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	169	None	replace
1226	[BUG]  [BUGGY]  if(savings!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  null)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	169	None	replace
1227	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	169	None	replace
1228	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  +  reduction.estimateSavings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	124	None	replace
1229	[BUG]  [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
1230	[BUG]  [BUGGY]  int  saving  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  saving  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  saving  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
1231	[BUG]  [BUGGY]  int  savings  =  (SAVINGS_THRESHOLD  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  =  (SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  =  (SAVINGS_THRESHOLD  +  savings);	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
1232	[BUG]  [BUGGY]  int  savings  >  (SAVE_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (SAVE_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int    savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	137	None	replace
1233	[BUG]  [BUGGY]  int  helperCodeCost  >  (savings  +  0))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (savings  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (savings  +  0))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
1234	[BUG]  [BUGGY]  int  helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
1235	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  HELPER_SOURCE))  {	  if(helperCodeCost    ==    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	22	None	replace
1236	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  helperCodeCost))  {	  if(helperCodeCost    ==    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	22	None	replace
1237	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	256	None	replace
1238	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
1239	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1240	[BUG]  [BUGGY]  If(helperCodeCost  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  null)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1241	[BUG]  [BUGGY]  If(helperCodeCost!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  null)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1242	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1243	[BUG]  [BUGGY]  If(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1244	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	281	None	replace
1245	[BUG]  [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	281	None	replace
1246	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	281	None	replace
1247	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
1248	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  *  SAVINGS_THRESHOLD)?  InlineCostEstimator.getCost(helperCodeCost):  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
1249	[BUG]  [BUGGY]  If(savings  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  0)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1250	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  saves))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1251	[BUG]  [BUGGY]  AssertionFailedError.apply(helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  AssertionFailedError.apply(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	AssertionFailedError.apply(helperCodeCost,  reduction);	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
1252	[BUG]  [BUGGY]  If(savings  >  (SAVE_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVE_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1253	[BUG]  [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCostEstimator.setCost(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCostEstimator.setCost(helperCodeCost,  reducer);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    HELPER_SOURCE))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
1254	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&!helperCodeCost.isEmpty())  {  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&!helperCodeCost.isEmpty())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&!helperCodeCost.isEmpty())  {	  if(helperCodeCost    [Delete]    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	222	None	replace
1255	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1)||  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost))  {  [CE]  no  suitable  method  found  for  getCost(int)  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1)||  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  1)||  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    1))    {    	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	61	None	replace
1256	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1)||  helperCodeCost!=  InlineCostEstimator.getCost(helperCodeCost))  {  [CE]  no  suitable  method  found  for  getCost(int)  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1)||  helperCodeCost!=  InlineCostEstimator.getCost(helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  1)||  helperCodeCost!=  InlineCostEstimator.getCost(helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    1))    {    	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	61	None	replace
1257	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	248	None	replace
1258	[BUG]  [BUGGY]  if(savings  >  (HelperCode.INVALID_SOURCE  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (HelperCode.INVALID_SOURCE  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (HelperCode.INVALID_SOURCE  +  SAVINGS_THRESHOLD))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	304	None	replace
1259	[BUG]  [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  saves  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  saves	304	None	replace
1260	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (helperCodeCost  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.INVALID_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	304	None	replace
1261	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  3))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  3))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  3))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
1262	[BUG]  [BUGGY]  AssertionFailedErrorHelper.apply(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  AssertionFailedErrorHelper.apply(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	AssertionFailedErrorHelper.apply(reduction);	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
1263	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(helperCodeCost!=  null);	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
1264	[BUG]  [BUGGY]  if(helperCode  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	268	None	replace
1265	[BUG]  [BUGGY]  if(helperCodeCost  >  (saves  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (saves  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saves  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	268	None	replace
1266	[BUG]  [BUGGY]  if(helperCodecost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  helperCodecost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodecost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodecost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodecost	268	None	replace
1267	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
1268	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  HELPER_SOURCE))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1269	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  saves))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  saves))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1270	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  helperCodeCost))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1271	[BUG]  [BUGGY]  if(savings  >  (HelperCode.HEELPER_SOURCE  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (HelperCode.HEELPER_SOURCE  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (HelperCode.HEELPER_SOURCE  +  SAVINGS_THRESHOLD))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
1272	[BUG]  [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  saves  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  saves	67	None	replace
1273	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (helperCodeCost  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    HelperCode.HEELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
1274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
1275	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
1276	[BUG]  [BUGGY]  if(savings  >  (savings  *  HELPER_SOURCE)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HELPER_SOURCE)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HELPER_SOURCE)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	294	None	replace
1277	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	263	None	replace
1278	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	263	None	replace
1279	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	263	None	replace
1280	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	263	None	replace
1281	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1282	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1283	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  Savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1284	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
1285	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  saves))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  saves))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
1286	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  helperCodeCost))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
1287	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  saving))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  saving))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
1288	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
1289	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_SOURCE))  {  [CE]  cannot  find  symbol  SAVE_SOURCE  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_SOURCE))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_SOURCE	190	None	replace
1290	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {  [CE]  cannot  find  symbol  SAVER_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVER_SOURCE	190	None	replace
1291	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVED_THRESHOLD  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVED_THRESHOLD	190	None	replace
1292	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVEERS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEERS_THRESHOLD  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVEERS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVEERS_THRESHOLD))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEERS_THRESHOLD	190	None	replace
1293	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {	  if(saves    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	190	None	replace
1294	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1295	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1296	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1297	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1298	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    saverCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	298	None	replace
1299	[BUG]  [BUGGY]  If(helperCodeCost!=  null  &&  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  null  &&  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  null  &&  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
1300	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1301	[BUG]  [BUGGY]  InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	InlineCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1302	[BUG]  [BUGGY]  Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
1304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
1305	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saves	140	None	replace
1306	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reduction.estimateSavings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	140	None	replace
1307	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1308	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1309	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
1310	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	77	None	replace
1311	[BUG]  [BUGGY]  if(HelperCodeCost!=  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (savings  *  HELPER_SOURCE))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	77	None	replace
1312	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1313	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1314	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1315	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1316	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1317	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	235	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	235	None	replace
1319	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
1320	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	235	None	replace
1321	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)]  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)]  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)]  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	235	None	replace
1322	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	196	None	replace
1323	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	196	None	replace
1324	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1325	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1326	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	198	None	add
1327	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	144	None	replace
1328	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	144	None	replace
1329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  0))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	45	9	replace
1330	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  0))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  0))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	45	9	replace
1331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	8	replace
1332	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	8	replace
1333	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	93	None	replace
1334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
1335	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
1336	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	93	None	replace
1337	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	156	None	replace
1338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost  +  1))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	156	9	replace
1339	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  1))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  1))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	156	9	replace
1340	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  *  HELPER_SOURCE))  {	  if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	314	None	replace
1341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	8	replace
1342	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	8	replace
1343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1344	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1345	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  1)||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saves	70	None	replace
1346	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  ==  null)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
1347	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  0)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >=  0)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	260	None	replace
1348	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1349	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  Saving  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  Saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  SAVINGS_THRESHOLD  ||  Saving  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1350	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).intValue();  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).intValue();  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).intValue();  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	301	None	add
1351	[BUG]  [BUGGY]  if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  sealed  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  sealed	206	None	replace
1352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	206	8	replace
1353	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	206	8	replace
1354	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	206	None	replace
1355	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  HelperCodeCost.HEELPER_SOURCE))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	206	None	replace
1356	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1357	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  saves))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  saves))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1358	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  saving))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  saving))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1359	[BUG]  [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  0))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (helperCodeCost  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (helperCodeCost  +  0))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1360	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	295	None	replace
1361	[BUG]  [BUGGY]  if(helperCodeCost!=  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  HELPER_SOURCE)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	295	None	replace
1362	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVED_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  SAVED_THRESHOLD  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVED_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVED_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  SAVED_THRESHOLD	34	None	replace
1363	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	244	None	replace
1364	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    MOVEDS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	168	None	replace
1365	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    MOVEDS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	168	None	replace
1366	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    +    MOVEDS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	168	None	replace
1367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  0)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (2savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	318	9	replace
1368	[BUG]  [BUGGY]  if(savings  >  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  0)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (2savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	318	9	replace
1369	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  0)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >=  0)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1370	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1371	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1372	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  0)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  0)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	261	None	replace
1373	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
1374	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
1375	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
1376	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
1377	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	178	None	replace
1378	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	178	None	replace
1379	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	178	None	replace
1380	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saves)  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saves)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  +  saves)  {	  if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saves	188	None	replace
1381	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1382	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  saves))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  saves))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1383	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  helperCodeCost))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1384	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  HelperCode.THRESHOLD))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1385	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1386	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1387	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
1388	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.saved  +  helperCodeCost))  {	  if(helperCodeCost!=    (reduction.saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
1389	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
1390	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
1391	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
1392	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
1393	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
1394	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
1395	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  savings))  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  >  expected	274	None	replace
1396	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  (2  <  <  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  (2  <  <  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  (2  <  <  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
1397	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1398	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1399	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1400	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1401	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  saves  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	223	None	replace
1402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	223	9	replace
1403	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	223	9	replace
1404	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	223	None	replace
1405	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	223	None	replace
1406	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	203	None	replace
1407	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	203	None	replace
1408	[BUG]  [BUGGY]  if(helperCodeCost  >  (saved  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (saved  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saved  *  HELPER_SOURCE))  {	  if(helperCodeCost    >    (saved    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	265	None	replace
1409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
1410	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
1411	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saves)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	297	None	replace
1412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
1413	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	9	replace
1414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	8	replace
1415	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	297	8	replace
1416	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVER_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  SAVER_THRESHOLD  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVER_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVER_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  SAVER_THRESHOLD	39	None	replace
1417	[BUG]  [BUGGY]  if(HelperCodeCost!=  (savings  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	166	None	replace
1418	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVE_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	88	None	replace
1419	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVED_THRESHOLD  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVED_THRESHOLD))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVED_THRESHOLD	88	None	replace
1420	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {  [CE]  cannot  find  symbol  SAVER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVER_SOURCE))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  SAVER_SOURCE	88	None	replace
1421	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  int  and  <null>  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	208	None	replace
1422	[BUG]  [BUGGY]  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incompatible  types	208	None	replace
1423	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
1424	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
1425	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	9	None	replace
1426	[BUG]  [BUGGY]  if(saved  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	9	None	replace
1427	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
1428	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
1429	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
1430	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1431	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1432	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1433	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	78	None	replace
1434	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
1435	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  Savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
1436	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	219	None	replace
1437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	80	9	replace
1438	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	80	9	replace
1439	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saved))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saved))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  saved))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	80	None	replace
1440	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getSavings()  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getSavings()  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saved    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	253	None	replace
1441	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	264	None	replace
1442	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1443	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
1444	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
1445	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
1446	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  return;  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  return;  }	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
1447	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
1448	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
1449	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
1450	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1452	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1453	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1454	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1455	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
1456	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1457	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1458	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1459	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1460	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (helperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	217	None	replace
1461	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1462	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1463	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1464	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  supporterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  supporterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  supporterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1465	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
1466	[BUG]  [BUGGY]  If(savings  >  (SAVE_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVE_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVE_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
1467	[BUG]  [BUGGY]  If(savings  >  (SAVED_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVED_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVED_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
1468	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1469	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1470	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
1471	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
1472	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
1473	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
1474	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCode.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCode.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCode.HELPER_SOURCE))  {	  if(savings    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	32	None	replace
1475	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1476	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1477	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
1478	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
1479	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
1480	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEINGS_THRESHOLD  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEINGS_THRESHOLD	11	None	replace
1481	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  helperCode))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  helperCode))  {	  if(helperCodeCost!=    (savings    +    saves))    {    	non-compiled	[CE]  cannot  find  symbol  saved	228	None	replace
1482	[BUG]  [BUGGY]  if(helperCodeCost!=  (saves  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saves  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saves  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	110	None	replace
1483	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD,  savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >>    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	111	None	replace
1484	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (savings  *  HELPER_SOURCE))  {	  if(helperCodeCost    >>    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	111	None	replace
1485	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >>    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	171	None	replace
1486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
1487	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	90	None	replace
1488	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	90	None	replace
1489	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings)||  helperCodeCost  ==  HELPER_SOURCE)  {	  if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	90	None	replace
1490	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  helperCodeCost))  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  helperCodeCost))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  >  expected	316	None	replace
1491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	205	8	replace
1492	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	205	8	replace
1493	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  compiler.reportCodeChange();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  compiler.reportCodeChange();  }	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	197	None	replace
1494	[BUG]  [BUGGY]  if(helpercodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [CE]  cannot  find  symbol  helpercodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helpercodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helpercodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  helpercodeCost	280	None	replace
1495	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  Saving)  {  [CE]  cannot  find  symbol  Saving  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  Saving)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  Saving)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  Saving	280	None	replace
1496	[BUG]  [BUGGY]  if(helperCodeCost!=  reducer.getNodeForCodeInsertion(null))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reducer.getNodeForCodeInsertion(null))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reducer.getNodeForCodeInsertion(null))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1497	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction.getInitializingState())  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  reduction.getInitializingState())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  reduction.getInitializingState())  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	94	None	replace
1498	[BUG]  [BUGGY]  if(helperCodeCost  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  null)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	94	None	replace
1499	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
1500	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
1501	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
1502	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
1503	[BUG]  [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incompatible  types	102	None	replace
1504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	9	replace
1505	[BUG]  [BUGGY]  if(savings  <=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	9	replace
1506	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCode.HEELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (savings    *    HelperCode.THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	202	None	replace
1507	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  HelperCode.THRESHOLD))  {	  if(savings    >    (savings    *    HelperCode.THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	202	None	replace
1508	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
1509	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  HelperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
1510	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
1511	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	147	None	replace
1512	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
1513	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  else  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	147	None	replace
1514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
1515	[BUG]  [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
1516	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
1517	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
1518	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVE_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	309	None	replace
1519	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	307	None	replace
1520	[BUG]  [BUGGY]  if(helperCodeCost!=  HelperCodeCost.DEFAULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  HelperCodeCost.DEFAULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  HelperCodeCost.DEFAULT_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
1521	[BUG]  [BUGGY]  if(helperCodeCost!=  HelperCodeCost.UNKNOWN)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  HelperCodeCost.UNKNOWN)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  HelperCodeCost.UNKNOWN)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
1522	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)&|  savings  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)&|  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (savings  *  SAVINGS_THRESHOLD)&|  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	293	None	add
1523	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  Saving  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  Saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  Saving  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  illegal  start  of  expression	293	None	add
1524	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	293	None	add
1525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1526	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  null  &&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(reductions!=  null  &&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	8	replace
1528	[BUG]  [BUGGY]  if(reductions!=  null  &&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  null  &&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  null  &&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	8	replace
1529	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
1530	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	262	None	replace
1531	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  0)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  0)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
1532	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
1533	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  *  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  *  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
1534	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    AssertionFailedError  <  InlineCostEstimator.GetterReducer>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
1535	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    AssertionFailedError  <  InlineCostEstimator.HELPER_SOURCE>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
1536	[BUG]  [BUGGY]  If(savings  >=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >=  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
1537	[BUG]  [BUGGY]  AssertionFailedError.apply(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  AssertionFailedError.apply(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	AssertionFailedError.apply(reduction);	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
1538	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1539	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1540	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1541	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1542	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  Node>  savings  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  helperCodeCost  +  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	177	9	replace
1544	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  helperCodeCost  +  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	177	9	replace
1545	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
1546	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  AssertionFailedError  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  AssertionFailedError  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    AssertionFailedError  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  type	184	None	add
1547	[BUG]  [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	68	None	replace
1548	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  for(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  for(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    for(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  not  a  statement	211	None	add
1549	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
1550	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  0))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  0))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
1551	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  SAVER_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1552	[BUG]  [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  saves))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (helperCodeCost  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (helperCodeCost  +  saves))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1553	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	replace
1554	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	218	None	replace
1555	[BUG]  [BUGGY]  if(helperCodeCost  >  (saved  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (saved  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saved  +  HELPER_SOURCE))  {	  if(helperCodeCost    >    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	126	None	replace
1556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  0  ||  savings  >  0)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	302	9	replace
1557	[BUG]  [BUGGY]  if(savings  >  0  ||  savings  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  0  ||  savings  >  0)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	302	9	replace
1558	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  HelperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	302	None	replace
1559	[BUG]  [BUGGY]  int  saving  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  saving  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  saving  =  (savings  *  SAVINGS_THRESHOLD)?  0  :(savings  *  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
1560	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1561	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1562	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1563	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
1564	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	255	None	replace
1565	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	255	None	replace
1566	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {  if(savings  >  SHELPER_SOURCE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {  if(savings  >  SHELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  saves  >  SAVINGS_THRESHOLD)  {  if(savings  >  SHELPER_SOURCE)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SHELPER_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  expression	319	None	replace
1567	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saved	180	None	replace
1568	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
1569	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(savings  ==  (helperCodeCost  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
1570	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
1571	[BUG]  [BUGGY]  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saves  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (saver    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	183	None	replace
1572	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saves  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saves  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (saves  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
1573	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1574	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
1575	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  0))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  0))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  0))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
1576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  2  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  2  +  1))  {	  if(helperCodeCost    [Delete]    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	220	9	replace
1577	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  2  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  2  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  2  +  1))  {	  if(helperCodeCost    [Delete]    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	220	9	replace
1578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  2))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  2))  {	  if(helperCodeCost    [Delete]    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	220	9	replace
1579	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  2))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  2))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  2))  {	  if(helperCodeCost    [Delete]    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	220	9	replace
1580	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost!=  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost!=  null)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
1581	[BUG]  [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  incompatible  types	290	None	replace
1582	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	290	None	replace
1583	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1584	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  SAVINGS_THRESHOLD  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  SAVINGS_THRESHOLD  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    int  SAVINGS_THRESHOLD  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1585	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  Savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  <  (SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  <  (SAVINGS_THRESHOLD  +  Savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1586	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
1587	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
1588	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
1589	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
1590	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
1591	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
1592	[BUG]  [BUGGY]  while(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	237	None	replace
1593	[BUG]  [BUGGY]  while(savings  ==  HelperCode.SAVE_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCode.SAVE_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCode.SAVE_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	237	None	replace
1594	[BUG]  [BUGGY]  while(savings  ==  HelperCodeCost.SAVE_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCodeCost.SAVE_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCodeCost.SAVE_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	237	None	replace
1595	[BUG]  [BUGGY]  while(savings  ==  HelperCodeCost.MIN_RESULT)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCodeCost.MIN_RESULT)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCodeCost.MIN_RESULT)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	237	None	replace
1596	[BUG]  [BUGGY]  while(savings  ==  HelperCodeCost.INHERITED)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCodeCost.INHERITED)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCodeCost.INHERITED)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	237	None	replace
1597	[BUG]  [BUGGY]  if(helperCodeCost  >  (seconds  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  seconds  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (seconds  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (seconds  *  SAVINGS_THRESHOLD))  {	  if(reduction    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  seconds	104	None	replace
1598	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (helperCodeCost  *  HELPER_SOURCE))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	100	None	replace
1599	[BUG]  [BUGGY]  if(saved  >  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (helperCodeCost  *  HELPER_SOURCE))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	100	None	replace
1600	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
1601	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	192	None	replace
1602	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	291	None	replace
1603	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVEINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEINGS_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVEINGS_THRESHOLD))  {	  if(saved    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEINGS_THRESHOLD	291	None	replace
1604	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saves)  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saves)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saves)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saves	139	None	replace
1605	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  savings  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	275	None	replace
1606	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {	  if(saving    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	292	None	replace
1607	[BUG]  [BUGGY]  if(savings!=  (savings  +  HelperCode.SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  HelperCode.SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  HelperCode.SAVINGS_THRESHOLD))  {	  if(savings!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	300	None	replace
1608	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVE_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	158	None	replace
1609	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEINGS_THRESHOLD  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVEINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEINGS_THRESHOLD	158	None	replace
1610	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	254	None	replace
1611	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	254	None	replace
1612	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  else  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	254	None	replace
1613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost  *  savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	194	9	replace
1614	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  *  savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	194	9	replace
1615	[BUG]  [BUGGY]  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(saver    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	186	None	replace
1616	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	195	None	replace
1617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  *  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	212	8	replace
1618	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  *  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	212	8	replace
1619	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
1620	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
1621	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
1622	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
1623	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
1624	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
1625	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
1626	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCodeCost.HIGHEST_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  HelperCodeCost.HIGHEST_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  HelperCodeCost.HIGHEST_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	243	None	replace
1627	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {	  if(savings!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	replace
1628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  *  savings))  {	  if(savings!=    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	53	9	replace
1629	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  *  savings))  {	  if(savings!=    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	53	9	replace
1630	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  reduction.estimateSavings()))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  reduction.estimateSavings()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  reduction.estimateSavings()))  {	  if(savings!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	replace
1631	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  savers))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  savers))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  savers))  {	  if(helperCodeCost!=    (savings    +    savers))    {    	non-compiled	[CE]  cannot  find  symbol  saved	64	None	replace
1632	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  AssertionFailedError  <  SAVINGS_THRESHOLD  +  savings)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  AssertionFailedError  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    AssertionFailedError  <  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  >  expected	187	None	add
1633	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	252	None	replace
1634	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	252	None	replace
1635	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1636	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1637	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1638	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1639	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
1640	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
1641	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
1642	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  helperCode)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	279	None	replace
1643	[BUG]  [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	279	None	replace
1644	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  *  HELPER_SOURCE))  {	  if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	216	None	replace
1645	[BUG]  [BUGGY]  If(savings  >  (savings  *  HelperCode.THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (savings  *  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (savings  *  HelperCode.THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
1646	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  HelperCode.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  HelperCode.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  HelperCode.HELPER_SOURCE))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	48	None	replace
1647	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
1648	[BUG]  [BUGGY]  if(saves  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saves  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	72	None	replace
1649	[BUG]  [BUGGY]  if(saved  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	72	None	replace
1650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	8	replace
1651	[BUG]  [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	72	8	replace
1652	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
1653	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
1654	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
1655	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  while(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
1656	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(helperCodeCost  ==  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(helperCodeCost  ==  HelperCodeCost.DEFAULT_THRESHOLD);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	236	None	replace
1657	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
1658	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	313	None	add
1659	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
1660	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
1661	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost!=    (sealed    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	305	None	replace
1662	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1663	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1664	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1665	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	213	None	add
1666	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCodeConstants.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeConstants  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCodeConstants.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  HelperCodeConstants.HELPER_SOURCE))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeConstants	116	None	replace
1667	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCode.DEFAULT_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCode.DEFAULT_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  HelperCode.DEFAULT_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	116	None	replace
1668	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  *  HELPER_SOURCE))  {	  if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	122	None	replace
1669	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
1670	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
1671	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
1672	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  int  and  <null>  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	273	None	replace
1673	[BUG]  [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  ||  helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  ||  helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	273	None	replace
1674	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	273	None	replace
1675	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1676	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1677	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1678	[BUG]  [BUGGY]  if(helperCodeCost  ==  null  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	134	None	replace
1679	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
1680	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
1681	[BUG]  [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings);	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
1682	[BUG]  [BUGGY]  int  helperCodeCost  >  (SAVE_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
1683	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  HELPER_SOURCE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  HELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1684	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  SAVEINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1685	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVE_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  SAVE_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1686	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVER_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  SAVER_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1687	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  HelperCodeCost))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  HelperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1688	[BUG]  [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVED_THRESHOLD))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (savings  *  SAVED_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (savings  *  SAVED_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1689	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  HelperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1690	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  SAVE_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1691	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saving);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
1692	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1693	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1694	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1695	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  0)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  0)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  0)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	259	None	replace
1696	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
1697	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
1698	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
1699	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	257	None	replace
1700	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1701	[BUG]  [BUGGY]  Inliner  helpingRoot  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Inliner  helpingRoot  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Inliner  helpingRoot  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1702	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	232	None	replace
1703	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	232	None	replace
1704	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	232	None	replace
1705	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1706	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1707	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  if(savings!=  (helperCodeCost  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    savings))    {    if(savings!=  (helperCodeCost  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1708	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  SAVE_THRESHOLD  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  SAVE_THRESHOLD	37	None	replace
1709	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  saved	125	None	replace
1710	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
1711	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
1712	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	269	None	add
1713	[BUG]  [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  (SAVINGS_THRESHOLD  +  saving))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	303	None	replace
1714	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saved))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saved))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saved))  {	  if(saved    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saved	303	None	replace
1715	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1716	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1717	[BUG]  [BUGGY]  For(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  For(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	For(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	145	None	replace
1718	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saves))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1719	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
1720	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	146	None	replace
1721	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	146	None	replace
1722	[BUG]  [BUGGY]  If(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (SAVE_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
1723	[BUG]  [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
1724	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD  +  savings);	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
1725	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  HELPER_SOURCE))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	24	None	replace
1726	[BUG]  [BUGGY]  if(saving  >  (helperCodeCost  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (helperCodeCost  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (helperCodeCost  *  HELPER_SOURCE))  {	  if(saving    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	98	None	replace
1727	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  saving))  {  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  saving))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	201	None	replace
1728	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	251	None	replace
1729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
1730	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	250	9	replace
1731	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  saves  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  HELPER_SOURCE)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	250	None	replace
1732	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saves	250	None	replace
1733	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saving  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	250	None	replace
1734	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  HELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	270	None	replace
1735	[BUG]  [BUGGY]  if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (saved  +  SAVINGS_THRESHOLD))  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	278	None	replace
1736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (helperCodeCost  +  savings))  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	278	8	replace
1737	[BUG]  [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (helperCodeCost  +  savings))  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	278	8	replace
1738	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  this);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  this);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
1739	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  HELPER_SOURCE  +  savings))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  HELPER_SOURCE  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  HELPER_SOURCE  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	182	None	replace
1740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	9	replace
1741	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	182	9	replace
1742	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  HELPER_SOURCE  +  savings))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  HELPER_SOURCE  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  HELPER_SOURCE  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	182	None	replace
1743	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	182	None	replace
1744	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
1745	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
1746	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1747	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    AssertionFailedError  <  HelperCode>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	272	None	add
1748	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  roots,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1749	[BUG]  [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  réduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1751	[BUG]  [BUGGY]  if(savings!=  (reductions  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions  *  HELPER_SOURCE))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	315	None	replace
1752	[BUG]  [BUGGY]  if(reductions!=  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reductions!=  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reductions!=  (savings  *  HELPER_SOURCE))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	315	None	replace
1753	[BUG]  [BUGGY]  if(saves!=  (reductions  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saves  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saves!=  (reductions  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves!=  (reductions  *  HELPER_SOURCE))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	315	None	replace
1754	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
1755	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
1756	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  save)  {  [CE]  cannot  find  symbol  save  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  save)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  save)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    saving)    {    	non-compiled	[CE]  cannot  find  symbol  save	267	None	replace
1757	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
1758	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  savings);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	285	None	replace
1759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	287	8	replace
1760	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	287	8	replace
1761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (SAVINGS_THRESHOLD  *  savings))  {	  if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	31	9	replace
1762	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (SAVINGS_THRESHOLD  *  savings))  {	  if(savings    ==    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	31	9	replace
1763	[BUG]  [BUGGY]  for(Reduction  reduction  =  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  =  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  =  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1764	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1765	[BUG]  [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saveerCodeCost))  {  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saveerCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  saveerCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction    reduction    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1766	[BUG]  [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  ||  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saved	161	None	replace
1767	[BUG]  [BUGGY]  if(saved  >  0  &&  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  &&  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  &&  helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saved	161	None	replace
1768	[BUG]  [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  ||  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saved	161	None	replace
1769	[BUG]  [BUGGY]  if(saved  >  0  &&  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  &&  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  &&  helperCodeCost!=  (helperCode  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saved	161	None	replace
1770	[BUG]  [BUGGY]  if(saved  >  0)  {  [CE]  cannot  find  symbol  saved  [FE]                            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0)  {  [BUGGY]    (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    	non-compiled	[CE]  cannot  find  symbol  saved	161	None	replace
1771	[BUG]  [BUGGY]  if(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  HelperCode.DEFAULT_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	172	None	replace
1772	[BUG]  [BUGGY]  if(savings  ==  HelperCodeCost.DEFAULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  HelperCodeCost.DEFAULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  HelperCodeCost.DEFAULT_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	172	None	replace
1773	[BUG]  [BUGGY]  if(savings  ==  HelperCode.SAVE_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  HelperCode.SAVE_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  HelperCode.SAVE_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	172	None	replace
1774	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	87	9	replace
1775	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	87	9	replace
1776	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(savings!=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	87	None	replace
1777	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  addChildrenToFront(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  addChildrenToFront(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  else  {  addChildrenToFront(helperCode);  }	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	197	None	replace
1778	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEINGS_THRESHOLD  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVEINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEINGS_THRESHOLD	78	None	replace
1779	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVEINGS_THRESHOLD  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  SAVEINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVEINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVEINGS_THRESHOLD	78	None	replace
1780	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1781	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  saving))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  saving))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1782	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  Savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1783	[BUG]  [BUGGY]  if(helperCodeCost!=  (HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (HelperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	288	None	replace
1784	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  supporterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  if(savings  >  (savings  *  supporterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    if(savings  >  (savings  *  supporterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	200	None	add
1785	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saves  >  (savings  *  helperCodeCost))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  saves  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  saves  >  (savings  *  helperCodeCost))  {	  	non-compiled	[CE]  	200	None	add
1786	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  savings  >  (savings  *  helperCodeCost))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  int  savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    helperCodeCost))    {    int  savings  >  (savings  *  helperCodeCost))  {	  	non-compiled	[CE]  	200	None	add
1787	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	231	None	replace
1788	[BUG]  [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Integer  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1789	[BUG]  [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1790	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
1791	[BUG]  [BUGGY]  int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (savings  +  SAVINGS_THRESHOLD)?  0  :  1;	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
1792	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (1savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (1savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (1savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	293	None	add
1793	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&!saved.isEmpty())  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&!saved.isEmpty())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&!saved.isEmpty())  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	273	None	replace
1794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  helperCodeCost!=  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  helperCodeCost!=  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	9	replace
1795	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  helperCodeCost!=  savings)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  helperCodeCost!=  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD)&&  helperCodeCost!=  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	273	9	replace
1796	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving)||  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saves    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saving	250	None	replace
1797	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
1798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2  *  savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (2  *  savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	76	9	replace
1799	[BUG]  [BUGGY]  if(helperCodeCost!=  (2  *  savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2  *  savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (2  *  savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	76	9	replace
1800	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.NAME  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.NAME  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.NAME  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	76	None	replace
1801	[BUG]  [BUGGY]  if(savings  >  HelperCodeCost.ALL_THRESHOLD  ||  savings  >  HelperCodeCost.ALL_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  HelperCodeCost.ALL_THRESHOLD  ||  savings  >  HelperCodeCost.ALL_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  HelperCodeCost.ALL_THRESHOLD  ||  savings  >  HelperCodeCost.ALL_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	117	None	replace
1802	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  helperCodeCost)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	117	8	replace
1803	[BUG]  [BUGGY]  if(savings  >  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  helperCodeCost)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	117	8	replace
1804	[BUG]  [BUGGY]  if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.RESULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.RESULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.RESULT_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	117	None	replace
1805	[BUG]  [BUGGY]  if(savings  >  HelperCodeCost.ALL_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  HelperCodeCost.ALL_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  HelperCodeCost.ALL_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	117	None	replace
1806	[BUG]  [BUGGY]  if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.HIGHINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.HIGHINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  helperCodeCost  ||  savings  >  HelperCodeCost.HIGHINGS_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	117	None	replace
1807	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  IllegalStateException  	278	1	replace
1808	[BUG]  [BUGGY]  if(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  IllegalStateException  	278	1	replace
1809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (helperCodeCost  +  savings))  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	278	8	replace
1810	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (helperCodeCost  +  savings))  {	  if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	278	8	replace
1811	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	195	None	replace
1812	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  saving  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (SAVINGS_THRESHOLD    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	195	None	replace
1813	[BUG]  [BUGGY]  Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Inliner  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	264	None	replace
1814	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SHELPER_SOURCE))  {  [CE]  cannot  find  symbol  SHELPER_SOURCE  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  SHELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SHELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SHELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  SHELPER_SOURCE	319	None	replace
1815	[BUG]  [BUGGY]  If(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1816	[BUG]  [BUGGY]  If(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1817	[BUG]  [BUGGY]  If(helperCode!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCode!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCode!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1818	[BUG]  [BUGGY]  If(helperCodeCost!=  (reductions.size()))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (reductions.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (reductions.size()))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	159	None	replace
1819	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	302	9	replace
1820	[BUG]  [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	302	9	replace
1821	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	302	None	replace
1822	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  HELPER_SOURCE)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  HELPER_SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  HELPER_SOURCE)  {	  if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	302	None	replace
1823	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (seconds  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (seconds  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (seconds  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	245	None	replace
1824	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  Savings))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  Savings))  {	  if(helperCodeCost!=    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	162	None	replace
1825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
1826	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  <  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  savings  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings)||    saving    <    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	93	9	replace
1827	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1828	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SHELPER_SOURCE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  <  (savings  *  SHELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  <  (savings  *  SHELPER_SOURCE))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1829	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reductions))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reductions))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  reductions))  {	  if(helperCodeCost    >    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	127	None	replace
1830	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1831	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1832	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	240	None	replace
1833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1834	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  savings);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1835	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  saved	19	None	replace
1836	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1837	[BUG]  [BUGGY]  If(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1838	[BUG]  [BUGGY]  If(savings  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1839	[BUG]  [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	133	None	replace
1840	[BUG]  [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD    +    1))    {    	non-compiled	[CE]  cannot  find  symbol  saved	113	None	replace
1841	[BUG]  [BUGGY]  if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    +    HelperCode.INVALID_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	9	None	replace
1842	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions.size()  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	310	None	add
1843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	309	9	replace
1844	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	309	9	replace
1845	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  HelperCodeCost))  {	  if(helperCodeCost    ==    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	212	None	replace
1846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	34	9	replace
1847	[BUG]  [BUGGY]  if(helperCodeCost!=  savings)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  savings)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	34	9	replace
1848	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	34	None	replace
1849	[BUG]  [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	280	None	replace
1850	[BUG]  [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost    >    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saving	280	None	replace
1851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
1852	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
1853	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
1854	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	192	9	replace
1855	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  reductions);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
1856	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(HelperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  if(HelperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    if(HelperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  	non-compiled	[CE]  illegal  start  of  expression	187	None	add
1857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(saving    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	292	8	replace
1858	[BUG]  [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(SAVINGS_THRESHOLD  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(saving    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	292	8	replace
1859	[BUG]  [BUGGY]  if(saved  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	311	None	replace
1860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (reductions.size()  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1861	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions.size()  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	311	9	replace
1862	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  >  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  int  and  boolean  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions.size()  >  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions.size()  >  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions.size()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  boolean	311	None	replace
1863	[BUG]  [BUGGY]  int  helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	75	None	replace
1864	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.CATCH  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.CATCH  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.CATCH  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
1865	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
1866	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
1867	[BUG]  [BUGGY]  if(saved  >  (savings  *  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	94	None	replace
1868	[BUG]  [BUGGY]  if(saved  >  (savings  *  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  HelperCode.THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	94	None	replace
1869	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1870	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  supporterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  supporterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  supporterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1871	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
1872	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  savings)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  savings)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	230	None	replace
1873	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost!=  (savings  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  if(helperCodeCost!=  (savings  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    savings))    {    if(helperCodeCost!=  (savings  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
1874	[BUG]  [BUGGY]  if(saved  >  0  &&  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  &&  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  &&  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	8	None	replace
1875	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
1876	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
1877	[BUG]  [BUGGY]  if(reduction  <  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
1878	[BUG]  [BUGGY]  if(savings!=  (reductions  +  helperCodeCost))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (reductions  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions  +  helperCodeCost))  {	  if(savings!=    (helperCodeCost    +    savings))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
1879	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	289	None	add
1880	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    <    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	185	None	replace
1881	[BUG]  [BUGGY]  if(savings  ==  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (saved  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	122	None	replace
1882	[BUG]  [BUGGY]  if(saving  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	130	None	replace
1883	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  saving))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  if(helperCodeCost!=  (helperCodeCost  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    savings))    {    if(helperCodeCost!=  (helperCodeCost  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	193	None	add
1884	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	257	None	replace
1885	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	257	None	replace
1886	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
1887	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD)  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  }	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
1888	[BUG]  [BUGGY]  if(savings!=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (saved  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	312	None	replace
1889	[BUG]  [BUGGY]  if(saved  +  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  +  SAVINGS_THRESHOLD)  {	  if(savings!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	312	None	replace
1890	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1891	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	92	None	replace
1892	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
1893	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
1894	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
1895	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  cannot  find  symbol  Saving  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  Saving	140	None	replace
1896	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  Savings))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  Savings))  {	  if(helperCodeCost    ==    (reduction.getReduction()    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
1897	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    <    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
1898	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1899	[BUG]  [BUGGY]  If(helperCodeCost  ==  reductions)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  reductions)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  reductions)  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1900	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reductions.size()  -  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reductions.size()  -  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reductions.size()  -  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1901	[BUG]  [BUGGY]  If(helperCodeCost  ==  (reductions.size()  -  1))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (reductions.size()  -  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (reductions.size()  -  1))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1902	[BUG]  [BUGGY]  If(helperCode  ==  (helperCodeCost  +  savings))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCode  ==  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCode  ==  (helperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1903	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1904	[BUG]  [BUGGY]  If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
1905	[BUG]  [BUGGY]  If(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  ';'  expected	143	None	replace
1906	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	290	None	replace
1907	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
1908	[BUG]  [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings));	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
1909	[BUG]  [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int    helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
1910	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  2))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  2))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    1))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  2))  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
1911	[BUG]  [BUGGY]  if(saved  >  (savings  +  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  +  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  +  HelperCode.THRESHOLD))  {	  if(saved    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	276	None	replace
1912	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [CE]  cannot  find  symbol  SAVER_THRESHOLD  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  SAVER_THRESHOLD	308	None	replace
1913	[BUG]  [BUGGY]  if(reduction!=  (savings  +  helperCodeCost))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction!=  (savings  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
1914	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  HelperCode.HELP_SOURCE))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	210	None	replace
1915	[BUG]  [BUGGY]  if(savings  >  (savings  *  reduction.getSamples()))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  reduction.getSamples()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  reduction.getSamples()))  {	  if(savings    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
1916	[BUG]  [BUGGY]  if(helperCodeCost!=  (save  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  save  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (save  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (save  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (saver    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  save	183	None	replace
1917	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1918	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    1))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1919	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	206	None	replace
1920	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saveerCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saveerCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  saveerCodeCost))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	206	None	replace
1921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	82	8	replace
1922	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	82	8	replace
1923	[BUG]  [BUGGY]  if(saved  <  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  <  (savings  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  <  (savings  *  HELPER_SOURCE))  {	  if(savings    <    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	27	None	replace
1924	[BUG]  [BUGGY]  If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1925	[BUG]  [BUGGY]  If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
1926	[BUG]  [BUGGY]  if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	236	None	replace
1927	[BUG]  [BUGGY]  if(savings  ==  (HelperCodeCost  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (HelperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (HelperCodeCost  +  HELPER_SOURCE))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	236	None	replace
1928	[BUG]  [BUGGY]  if(savings!=  HelperCode.DEFAULT_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  HelperCode.DEFAULT_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  HelperCode.DEFAULT_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	236	None	replace
1929	[BUG]  [BUGGY]  if(savings  ==  (HelperCodeCost  +  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (HelperCodeCost  +  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (HelperCodeCost  +  HelperCode.THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	236	None	replace
1930	[BUG]  [BUGGY]  if(savings  ==  (HelperCodeCost  +  HelperCode.HIGHEST_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (HelperCodeCost  +  HelperCode.HIGHEST_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (HelperCodeCost  +  HelperCode.HIGHEST_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	236	None	replace
1931	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saved	188	None	replace
1932	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    <    SAVINGS_THRESHOLD    +    savings)    {    	non-compiled	[CE]  cannot  find  symbol  saved	188	None	replace
1933	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCode.THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  HelperCode.THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCode.THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    HelperCode.THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	202	None	replace
1934	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions,  savings);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
1935	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  reducers);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
1936	[BUG]  [BUGGY]  if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  sealed  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (sealed  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  sealed	24	None	replace
1937	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1938	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
1939	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD);	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    :    reductions)    {    reduction.apply();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
1940	[BUG]  [BUGGY]  if(saved  >  helperCodeCost.size())  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  helperCodeCost.size())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  helperCodeCost.size())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	114	None	replace
1941	[BUG]  [BUGGY]  if(savings!=  (savings  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  saverCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  saverCodeCost))  {	  if(savings!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	300	None	replace
1942	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings!=    (savings    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	300	9	replace
1943	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings!=    (savings    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	300	9	replace
1944	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  supporterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  if(helperCodeCost!=  (savings  +  supporterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    helperCodeCost))    {    if(helperCodeCost!=  (savings  +  supporterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
1945	[BUG]  [BUGGY]  If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
1946	[BUG]  [BUGGY]  If(reduction  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(reduction  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(reduction  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	164	None	replace
1947	[BUG]  [BUGGY]  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
1948	[BUG]  [BUGGY]  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
1949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
1950	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  &&  savings  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    SAVINGS_THRESHOLD    +    savings)    {    	compilable	  [FE]  AssertionFailedError  	139	9	replace
1951	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	216	None	replace
1952	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
1953	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
1954	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
1955	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  <  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  <  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    SAVINGS_THRESHOLD    ||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  <	  	non-compiled	[CE]  illegal  start  of  type	301	None	add
1956	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	209	None	add
1957	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (savings  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	243	None	replace
1958	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	243	None	replace
1959	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  HelperCodeCost))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	243	None	replace
1960	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  Savings))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    Savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	243	None	replace
1961	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.SHELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.SHELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.SHELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    saverCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	298	None	replace
1962	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    saverCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	298	None	replace
1963	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
1964	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	207	None	add
1965	[BUG]  [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  0  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  0  ||  helperCodeCost!=  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    [Delete]    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	160	None	replace
1966	[BUG]  [BUGGY]  if(saved  >  (savings  *  HelperCode.SAVE_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  HelperCode.SAVE_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  HelperCode.SAVE_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (2savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	318	None	replace
1967	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  /  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  /  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1968	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  /  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  /  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  /  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1969	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  -  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  -  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1970	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  -  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  -  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  -  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1971	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  saves  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	270	None	replace
1972	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1973	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  savings)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	compilable	  [FE]  AssertionFailedError  	270	9	replace
1974	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  *  savings)  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  *  savings)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  *  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    *    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	270	None	replace
1975	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	37	None	replace
1976	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	37	None	replace
1977	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    ==    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	37	None	replace
1978	[BUG]  [BUGGY]  while(savings  ==  HelperCodeCost.SECONDS_PER_SECOND)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  while(savings  ==  HelperCodeCost.SECONDS_PER_SECOND)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	while(savings  ==  HelperCodeCost.SECONDS_PER_SECOND)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	237	None	replace
1979	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (2savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	109	None	add
1980	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
1981	[BUG]  [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	279	None	replace
1982	[BUG]  [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(saved    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	279	None	replace
1983	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  1)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1984	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  1)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1986	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    	compilable	  [FE]  AssertionFailedError  	70	9	replace
1987	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	9	replace
1988	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	9	replace
1989	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	9	replace
1990	[BUG]  [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  0  ||  savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	256	9	replace
1991	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	256	None	replace
1992	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
1993	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reducers);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
1994	[BUG]  [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(saved    >    SAVINGS_THRESHOLD    ||    helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	281	None	replace
1995	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
1996	[BUG]  [BUGGY]  If(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
1997	[BUG]  [BUGGY]  If(savings  ==  (helperCodeCost  +  SAVER_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  ==  (helperCodeCost  +  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  ==  (helperCodeCost  +  SAVER_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
1998	[BUG]  [BUGGY]  if(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >>    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	14	None	replace
1999	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >>    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	14	None	replace
2000	[BUG]  [BUGGY]  If(helperCodeCost!=  reductions)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  reductions)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  reductions)  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
2001	[BUG]  [BUGGY]  If(reduction!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(reduction!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(reduction!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
2002	[BUG]  [BUGGY]  for(Reduction  reduction  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
2003	[BUG]  [BUGGY]  for(Reduction  reduction  =  reductions.size()  -  1;  reduction!=  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  =  reductions.size()  -  1;  reduction!=  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  =  reductions.size()  -  1;  reduction!=  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	96	None	replace
2004	[BUG]  [BUGGY]  for(Reduction  reduction  =  reductions.size()  -  1;  reduction  <  SAVINGS_THRESHOLD;)  {  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  for(Reduction  reduction  =  reductions.size()  -  1;  reduction  <  SAVINGS_THRESHOLD;)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	for(Reduction  reduction  =  reductions.size()  -  1;  reduction  <  SAVINGS_THRESHOLD;)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction    reduction    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incompatible  types	96	None	replace
2005	[BUG]  [BUGGY]  if(savings  >  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (1  <  <  (savings  +  SAVINGS_THRESHOLD)))  {	  if(savings    >=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
2006	[BUG]  [BUGGY]  if(saving  >  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (saved  *  SAVINGS_THRESHOLD))  {	  if(saving    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	98	None	replace
2007	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  savings))  {  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(saving    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	98	None	replace
2008	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  1  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  1  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	275	9	replace
2009	[BUG]  [BUGGY]  if(savings  >  1  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  1  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  1  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings    >    (1SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	275	9	replace
2010	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	229	None	replace
2011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (reductions.size()))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	156	9	replace
2012	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions.size()))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (reductions.size()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions.size()))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	156	9	replace
2013	[BUG]  [BUGGY]  if(savings  ==  reduction.getSamples())  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  reduction.getSamples())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  reduction.getSamples())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	317	None	replace
2014	[BUG]  [BUGGY]  if(savings  ==  reduction.getSavings())  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  reduction.getSavings())  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  reduction.getSavings())  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	317	None	replace
2015	[BUG]  [BUGGY]  if(savings!=  null  ||  savings  ==  HelperCode.SOURCE)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  null  ||  savings  ==  HelperCode.SOURCE)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  null  ||  savings  ==  HelperCode.SOURCE)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings    ==    (helperCodeCost    +    HELPER_SOURCE))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	317	None	replace
2016	[BUG]  [BUGGY]  If(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
2017	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	8	replace
2018	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	8	replace
2019	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
2020	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	compilable	  [FE]  AssertionFailedError  	294	9	replace
2021	[BUG]  [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	294	None	replace
2022	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
2023	[BUG]  [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  Savings))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (HelperCodeCost  +  Savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (HelperCodeCost  +  Savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	306	None	replace
2024	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	182	None	replace
2025	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCode))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCode))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD  +  helperCode))  {	  if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	182	None	replace
2026	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)&&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	297	None	replace
2027	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    	non-compiled	[CE]  cannot  find  symbol  saved	297	None	replace
2028	[BUG]  [BUGGY]  If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  null  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
2029	[BUG]  [BUGGY]  If(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(helperCodeCost  ==  (saved  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
2030	[BUG]  [BUGGY]  If(reduction  ==  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(reduction  ==  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(reduction  ==  null  ||  helperCodeCost  >  savings  *  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
2031	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
2032	[BUG]  [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
2033	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
2034	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  +  savings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	124	8	replace
2035	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  0  +  helperCodeCost)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	compilable	  [FE]  AssertionFailedError  	66	8	replace
2036	[BUG]  [BUGGY]  if(savings  >  0  +  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  0  +  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  0  +  helperCodeCost)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	compilable	  [FE]  AssertionFailedError  	66	8	replace
2037	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  &&  helperCodeCost)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  &&  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  &&  helperCodeCost)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	66	None	replace
2038	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [CE]  cannot  find  symbol  saved  [FE]        IllegalStateException    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {	  if(savings    >    SAVINGS_THRESHOLD    +    helperCodeCost)    {    	non-compiled	[CE]  cannot  find  symbol  saved	66	None	replace
2039	[BUG]  [BUGGY]  if(savings!=  (savings  +  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  HelperCodeCost))  {	  if(helperCodeCost!=    (savings    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	227	None	replace
2040	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (1savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	3	None	add
2041	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  if(savings  ==  (helperCodeCost  +  savings))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    savings))    {    if(savings  ==  (helperCodeCost  +  savings))  {  }  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
2042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	100	8	replace
2043	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	100	8	replace
2044	[BUG]  [BUGGY]  if(savings  >  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (saved  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	100	None	replace
2045	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	166	None	replace
2046	[BUG]  [BUGGY]  if(helperCodeCost!=  null  &&  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  null  &&  HelperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  null  &&  HelperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	166	None	replace
2047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCode!=  null)  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	10	9	replace
2048	[BUG]  [BUGGY]  if(helperCode!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode!=  null)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode!=  null)  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	10	9	replace
2049	[BUG]  [BUGGY]  if(savings!=  HelperCode.SAVE_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  HelperCode.SAVE_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  HelperCode.SAVE_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	116	None	replace
2050	[BUG]  [BUGGY]  if(savings!=  HelperCode.RETURN_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  HelperCode.RETURN_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  HelperCode.RETURN_THRESHOLD)  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	116	None	replace
2051	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (helperCodeCost  +  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  HelperCode.THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	169	None	replace
2052	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (2savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  <  (2savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  <  (2savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	7	None	add
2053	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    <    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
2054	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  cannot  find  symbol  saved  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  saved	39	None	replace
2055	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    Saving))    {    	non-compiled	[CE]  cannot  find  symbol  saved	39	None	replace
2056	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reductions))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reductions))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  reductions))  {	  if(helperCodeCost!=    (reductions    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
2057	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  if(savings  >  SAVINGS_THRESHOLD  +  1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  if(savings  >  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    1))    {    if(savings  >  SAVINGS_THRESHOLD  +  1))  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
2058	[BUG]  [BUGGY]  if(helperCode  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  incomparable  types:  Node  and  int  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCode  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCode  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	158	None	replace
2059	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCode  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	158	None	replace
2060	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
2061	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SEAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SEAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  +  SEAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
2062	[BUG]  [BUGGY]  if(HelperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(HelperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(HelperCodeCost  ==  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	217	None	replace
2063	[BUG]  [BUGGY]  if(saved  >  (1savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (1savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (1savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	234	None	replace
2064	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  1)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	234	9	replace
2065	[BUG]  [BUGGY]  if(savings  >  1)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  1)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  1)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	234	9	replace
2066	[BUG]  [BUGGY]  if(saved  >  (savings  *  HelperCode.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (savings  *  HelperCode.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  HelperCode.HELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings    >    (1savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	234	None	replace
2067	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (1SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  if(savings  >  (1SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost)||    savings    >    SAVINGS_THRESHOLD)    {    if(savings  >  (1SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  	non-compiled	[CE]  	296	None	add
2068	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
2069	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost!=  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
2070	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
2071	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  (1  <  <  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	274	None	replace
2072	[BUG]  [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (SAVINGS_THRESHOLD  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
2073	[BUG]  [BUGGY]  if(savings  ==  (reduction  +  helperCodeCost.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  ==  (reduction  +  helperCodeCost.getSize()))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (reduction  +  helperCodeCost.getSize()))  {	  if(savings    ==    (helperCodeCost    +    reduction.getSize()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	replace
2074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	9	replace
2075	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	9	replace
2076	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
2077	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  *  helperCodeCost)  {	  if(savings    >    (savings    *    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	201	8	replace
2078	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  HelperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  (savings  *  HelperCodeCost))  {	  if(savings    >    (savings    *    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	201	None	replace
2079	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.VAR);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.VAR);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.VAR);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
2080	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
2081	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.BLOCK);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.BLOCK);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	283	None	replace
2082	[BUG]  [BUGGY]  if(savings!=  (savings  *  HelperCode.HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  *  HelperCode.HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  HelperCode.HELPER_SOURCE))  {	  if(savings!=    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	29	None	replace
2083	[BUG]  [BUGGY]  if(helperCodeCost  >  (sealed  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  sealed  [FE]                    IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (sealed  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (sealed  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saved    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  sealed	265	None	replace
2084	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  if(savings  >  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    if(savings  >  (1savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	5	None	add
2085	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
2086	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	262	None	replace
2087	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  +  HelperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	144	None	replace
2088	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  HelperCodeCost)  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  HelperCodeCost)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  HelperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	144	None	replace
2089	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
2090	[BUG]  [BUGGY]  if(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    HelperCodeCost))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	144	None	replace
2091	[BUG]  [BUGGY]  if(savings!=  (1  <  <  helperCodeCost)&&  savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (1  <  <  helperCodeCost)&&  savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (1  <  <  helperCodeCost)&&  savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  >  expected	55	None	replace
2092	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.reductions))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  (savings  *  reduction.reductions))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  reduction.reductions))  {	  if(helperCodeCost    >    (savings    *    HELPER_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	219	None	replace
2093	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
2094	[BUG]  [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(saved    >=    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	88	2	replace
2095	[BUG]  [BUGGY]  int  saving  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  saving  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  saving  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
2096	[BUG]  [BUGGY]  int  savings  >  (savings  *  SAVER_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  int  savings  >  (savings  *  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  savings  >  (savings  *  SAVER_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int    savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
2097	[BUG]  [BUGGY]  if(savings!=  (HelperCodeCost  +  helperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (HelperCodeCost  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (HelperCodeCost  +  helperCodeCost))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
2098	[BUG]  [BUGGY]  if(savings!=  (HelperCodeCost  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (HelperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (HelperCodeCost  +  HELPER_SOURCE))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
2099	[BUG]  [BUGGY]  if(savings!=  (HelperCodeCost  +  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (HelperCodeCost  +  HelperCode.THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (HelperCodeCost  +  HelperCode.THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=    (HelperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	307	None	replace
2100	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  if(savings  >  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    if(savings  >  (HelperCodeCost  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
2101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	8	replace
2102	[BUG]  [BUGGY]  if(helperCodeCost  ==  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (2  *  savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (2  *  savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	167	8	replace
2103	[BUG]  [BUGGY]  if(helperCodeCost!=  (2savings  +  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (2savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (2savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (2savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	167	None	replace
2104	[BUG]  [BUGGY]  If(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  null  &&  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
2105	[BUG]  [BUGGY]  If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
2106	[BUG]  [BUGGY]  if(helperCodeCost!=  (sealed  +  helperCodeCost))  {  [CE]  cannot  find  symbol  sealed  [FE]                IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (sealed  +  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (sealed  +  helperCodeCost))  {	  if(helperCodeCost!=    (sealed    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  sealed	305	None	replace
2107	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	316	None	replace
2108	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	316	None	replace
2109	[BUG]  [BUGGY]  if(helperCodeCost!=  (1  <  <  helperCodeCost))  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (1  <  <  helperCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (1  <  <  helperCodeCost))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  >  expected	316	None	replace
2110	[BUG]  [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >=  (1  <  <  1))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >=  (1  <  <  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (1  <  <  1)||  helperCodeCost  >=  (1  <  <  1))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost    >    (1savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  illegal  start  of  type	316	None	replace
2111	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.apply(SAVINGS_THRESHOLD)))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  ==  (reduction.apply(SAVINGS_THRESHOLD)))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.apply(SAVINGS_THRESHOLD)))  {	  if(helperCodeCost    ==    (reduction    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	22	None	replace
2112	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  SAVER_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
2113	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  reduction.estimateSavings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
2114	[BUG]  [BUGGY]  If(savings!=  (helperCodeCost  +  1))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings!=  (helperCodeCost  +  1))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings!=  (helperCodeCost  +  1))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	173	None	replace
2115	[BUG]  [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    saving))    {    	non-compiled	[CE]  cannot  find  symbol  saving	20	None	replace
2116	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]        AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)&&  saves  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >>    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	221	None	replace
2117	[BUG]  [BUGGY]  if(saved  >  (reductions  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  (reductions  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (reductions  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	315	None	replace
2118	[BUG]  [BUGGY]  if(saved!=  (reductions  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved!=  (reductions  *  HELPER_SOURCE))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved!=  (reductions  *  HELPER_SOURCE))  {	  if(savings!=    (reductions    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	315	None	replace
2119	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  supporterCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  if(savings!=  (savings  +  supporterCodeCost))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (savings    +    helperCodeCost))    {    if(savings!=  (savings  +  supporterCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	299	None	add
2120	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saved  [FE]        IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	142	None	replace
2121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	142	9	replace
2122	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	142	9	replace
2123	[BUG]  [BUGGY]  if(saved  <  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(saved  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	110	None	replace
2124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	110	9	replace
2125	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    <    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	110	9	replace
2126	[BUG]  [BUGGY]  If(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }        [BUGGY]  If(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	If(savings  >  helperCodeCost  +  SAVINGS_THRESHOLD)  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings    >=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ';'  expected	174	None	replace
