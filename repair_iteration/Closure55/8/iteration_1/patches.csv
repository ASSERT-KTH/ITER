bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
2	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
4	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
6	[BUG]  [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
8	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
9	[BUG]  [BUGGY]  if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  +  HelperCode.INVALID_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	2	None	replace
10	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	4	None	add
13	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
15	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
16	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
17	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	6	None	add
18	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
19	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
20	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
21	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	6	None	add
22	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
23	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
24	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	5	None	replace
25	[BUG]  [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
27	[BUG]  [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
29	[BUG]  [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
31	[BUG]  [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
32	[BUG]  [BUGGY]  if(savings  >  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  HELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HELPER_SOURCE))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	22	None	replace
33	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCodeCost))  {  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  HelperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	22	None	replace
34	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
35	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
36	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
37	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
38	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	17	None	add
39	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
40	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  [BUGGY]  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	17	None	add
41	[BUG]  [BUGGY]  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	19	None	replace
42	[BUG]  [BUGGY]  if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	19	None	replace
43	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (reduction.saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
44	[BUG]  [BUGGY]  if(helperCodeCost!=  (saving  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saving  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saving  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	19	None	replace
45	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
46	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
47	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
48	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
49	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	12	None	add
50	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	12	None	add
51	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [BUGGY]  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	12	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
53	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
55	[BUG]  [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
57	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	8	replace
59	[BUG]  [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	8	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
61	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  1))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
63	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  savings))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
64	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  savers))  {  [CE]  cannot  find  symbol  savers  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  savers))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  savers))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	13	None	replace
65	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  IllegalStateException  	32	1	replace
66	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  IllegalStateException  	32	1	replace
67	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.HEELPER_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	32	None	replace
68	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	32	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
70	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  1))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
72	[BUG]  [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
73	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
74	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	8	None	add
75	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	8	None	add
76	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (2savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	8	None	add
77	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
78	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  *  SAVEINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  *  SAVEINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (savings  *  SAVEINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
79	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
80	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
81	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    If(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	10	None	add
82	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
83	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
84	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
85	[BUG]  [BUGGY]  if(helperCodeCost!=  (savers  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  savers  [FE]              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savers  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savers  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saves    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  savers	20	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	8	replace
87	[BUG]  [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	8	replace
88	[BUG]  [BUGGY]  if(saved  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	18	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	8	replace
90	[BUG]  [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	8	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	9	replace
92	[BUG]  [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	9	replace
93	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saving  <  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	18	None	replace
94	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
95	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    If(savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	21	None	add
96	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	21	None	add
97	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int  savings  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	21	None	add
98	[BUG]  [BUGGY]  if(saving  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saving  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	28	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
100	[BUG]  [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
102	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
103	[BUG]  [BUGGY]  if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]                      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saver  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	28	None	replace
104	[BUG]  [BUGGY]  if(reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
106	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
108	[BUG]  [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	9	replace
110	[BUG]  [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	9	replace
111	[BUG]  [BUGGY]  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  incompatible  types	9	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
113	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
114	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
115	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	26	None	add
116	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
117	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
118	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
119	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
120	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saver	27	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	8	replace
122	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	8	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	8	replace
124	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  +  savings))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	8	replace
125	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  reduction.getSize()))  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  reduction.getSize()))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  +  reduction.getSize()))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
126	[BUG]  [BUGGY]  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saved  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	3	None	replace
127	[BUG]  [BUGGY]  if(helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reductions  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
128	[BUG]  [BUGGY]  if(helperCodeCost  >  (reduction  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (reduction  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (reduction  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
129	[BUG]  [BUGGY]  if(helperCodeCost  >  (saving  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saving  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saving  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	3	None	replace
130	[BUG]  [BUGGY]  if(saving  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saving  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	23	None	replace
131	[BUG]  [BUGGY]  if(helperCodeCost  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saverCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	23	None	replace
132	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
133	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    If(savings  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	31	None	add
134	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  +  saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
135	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  Saving))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  Saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  +  Saving))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
136	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  +  saves))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
137	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    int  savings  >  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	31	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	30	9	replace
139	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	30	9	replace
140	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  saving))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	30	None	replace
141	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saved	30	None	replace
142	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
143	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    If(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	29	None	add
144	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  >  (SAVINGS_THRESHOLD  +  HelperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
145	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    for(Reduction  reduction  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  	29	None	add
146	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
147	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reducers);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reductions);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducers);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducers);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  reducer);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
155	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
156	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
157	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
158	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
159	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	15	None	add
160	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	15	None	add
161	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  [BUGGY]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  [BUGGY]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	15	None	add
162	[BUG]  [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (reduction.getReduction()  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
163	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
164	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    If(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
165	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
166	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
167	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (2savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
168	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  +  MOVEDS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (savings  +  MOVEDS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (savings  +  MOVEDS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
169	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
170	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
171	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  >>  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
172	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
173	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	24	None	add
174	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    If(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	24	None	add
175	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saver  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saver  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	11	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
177	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	9	replace
178	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	11	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
180	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  1))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
182	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  *  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
183	[BUG]  [BUGGY]  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saver  [FE]              AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saver  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	11	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	7	9	replace
185	[BUG]  [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	7	9	replace
186	[BUG]  [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saver  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saver  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saver  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saver	7	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	7	9	replace
188	[BUG]  [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  <  SAVINGS_THRESHOLD  +  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	7	9	replace
189	[BUG]  [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  success  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(success  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(success  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  success	32	None	replace
190	[BUG]  [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saves  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saves  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	32	None	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	3	8	replace
192	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    >    (saver    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	3	8	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
194	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  savings))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
195	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  Savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (SAVINGS_THRESHOLD  +  Savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
196	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
197	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
199	[BUG]  [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (savings  *  SAVINGS_THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
201	[BUG]  [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  helperCodeCost))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	8	replace
202	[BUG]  [BUGGY]  if(savings  >  (savings  *  HelperCode.THRESHOLD))  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  HelperCode.THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  HelperCode.THRESHOLD))  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	22	None	replace
203	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	11	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
205	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
206	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saved  +  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	11	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	23	8	replace
208	[BUG]  [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	23	8	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	23	9	replace
210	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	23	9	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	8	replace
212	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  savings))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	8	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	8	replace
214	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	8	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	9	replace
216	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	5	9	replace
217	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
218	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
219	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  HELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  HELPER_SOURCE))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
220	[BUG]  [BUGGY]  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  [Delete]  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
221	[BUG]  [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >>  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  incompatible  types	7	None	replace
222	[BUG]  [BUGGY]  if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  [Delete]  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
223	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	7	None	replace
224	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  Savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
225	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (savings    +    SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
227	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
228	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  saves))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  saves))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	13	None	replace
229	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
230	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
231	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
232	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
233	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
234	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >  (1savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	21	None	add
235	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  for(Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    for(Reduction  reduction  :  reductions)  {  reduction.apply();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
236	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
237	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    while(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
238	[BUG]  [BUGGY]  if(helperCodeCost  ==  (saves  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (saves  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (saves  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	2	None	replace
239	[BUG]  [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	ReductionGatherer  reducer  =  compiler.getNodeForCodeInsertion(null);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
242	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  saving))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	16	None	replace
243	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  Savings))  {  [CE]  cannot  find  symbol  Savings  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  Savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  Savings))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  Savings	16	None	replace
244	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
245	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >=  (savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
246	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {  [CE]  cannot  find  symbol  saves  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saves))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	18	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	9	replace
248	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	18	9	replace
249	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saving  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  saving))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saving	18	None	replace
250	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  saves  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings)||  saves  >  SAVINGS_THRESHOLD)  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saves	18	None	replace
251	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
252	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >  SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
253	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saved  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saved  +  HELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	19	None	replace
254	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
255	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
256	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    if(savings  >  SAVINGS_THRESHOLD  +  helperCodeCost))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
257	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    Node  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
258	[BUG]  [BUGGY]  if(helperCodeCost!=  (saves  +  HELPER_SOURCE))  {  [CE]  cannot  find  symbol  saves  [FE]              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (saves  +  HELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saves  +  HELPER_SOURCE))  {	  if(helperCodeCost!=    (saves    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saves	20	None	replace
259	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
260	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
261	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
262	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
263	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
264	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
265	[BUG]  [BUGGY]  if(helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saved  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	28	None	replace
266	[BUG]  [BUGGY]  if(helperCodeCost  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saverCodeCost  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	28	None	replace
267	[BUG]  [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [CE]  cannot  find  symbol  saving  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  SAVINGS_THRESHOLD  +  saving)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saving	30	None	replace
268	[BUG]  [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	9	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
270	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	9	8	replace
271	[BUG]  [BUGGY]  if(reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(reduction  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(reduction  >  (savings  *  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
273	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	16	9	replace
274	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (1savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	12	None	add
275	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (1SAVINGS_THRESHOLD  +  savings))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  if(savings  >  (1SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    if(savings  >  (1SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  	31	None	add
276	[BUG]  [BUGGY]  if(saved  >  (savings  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (savings  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	2	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
278	[BUG]  [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
279	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  +  helperCodeCost)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	7	None	replace
280	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost  >  savings)  {	  if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	7	None	replace
281	[BUG]  [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  cannot  find  symbol  saved  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  SAVINGS_THRESHOLD  ||  helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	18	None	replace
282	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
284	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
287	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(HelperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
288	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
290	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [FE]  AssertionFailedError  [FE]                IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  *  savings))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	28	8	replace
291	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]                  IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saved	28	None	replace
292	[BUG]  [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saving  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saving  >  (SAVINGS_THRESHOLD  *  SAVINGS_THRESHOLD))  {	  if(saved    >    (helperCodeCost    *    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  saving	28	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
294	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  SAVINGS_THRESHOLD)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	22	9	replace
295	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=    (SAVINGS_THRESHOLD    +    savings))    {    if(HelperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	30	9	replace
297	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost)||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	compilable	  [FE]  AssertionFailedError  	30	9	replace
298	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [CE]  cannot  find  symbol  saverCodeCost  [FE]      IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  saverCodeCost))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	30	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
300	[BUG]  [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (savings  +  helperCodeCost))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (savings  +  helperCodeCost))  {	  if(helperCodeCost!=    (savings    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	13	9	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
302	[BUG]  [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  SAVINGS_THRESHOLD  ||  savings  >  SAVINGS_THRESHOLD)  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	compilable	  [FE]  AssertionFailedError  	32	9	replace
303	[BUG]  [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  saving))  {  [CE]  cannot  find  symbol  saved  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(saved  >  (SAVINGS_THRESHOLD  +  saving))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (SAVINGS_THRESHOLD  +  saving))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  saved	32	None	replace
304	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  HelperCode.INVALID_SOURCE))  {	  if(savings    >    (SAVINGS_THRESHOLD    +    savings))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	32	None	replace
305	[BUG]  [BUGGY]  if(helperCodeCost!=  (sealed  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  sealed  [FE]            IllegalStateException    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost!=  (sealed  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (sealed  +  SAVINGS_THRESHOLD))  {	  if(helperCodeCost!=    (saved    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  cannot  find  symbol  sealed	19	None	replace
306	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  ==  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
307	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings!=  (HelperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
308	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  [Delete]  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	24	None	add
309	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (SAVINGS_THRESHOLD    +    savings))    {    if(helperCodeCost  >=  (SAVINGS_THRESHOLD  +  savings))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
311	[BUG]  [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions.size()  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
312	[BUG]  [BUGGY]  if(savings!=  (reductions  +  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (reductions  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions  +  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	25	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
314	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	compilable	  [FE]  AssertionFailedError  	25	9	replace
315	[BUG]  [BUGGY]  if(savings!=  (reductions  *  SAVINGS_THRESHOLD))  {  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings!=  (reductions  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (reductions  *  SAVINGS_THRESHOLD))  {	  if(savings!=    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	25	None	replace
316	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost    >    (savings    +    SAVINGS_THRESHOLD))    {    if(helperCodeCost  >  (1savings  +  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	1	None	add
317	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    ==    (helperCodeCost    +    SAVINGS_THRESHOLD))    {    if(savings  ==  (helperCodeCost  +  HELPER_SOURCE))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
318	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >  (2savings  *  SAVINGS_THRESHOLD))  {	  	non-compiled	[CE]  	21	None	add
319	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  *  SHELPER_SOURCE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }      [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  if(savings  >  (savings  *  SHELPER_SOURCE))  {  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings    >    (savings    *    SAVINGS_THRESHOLD))    {    if(savings  >  (savings  *  SHELPER_SOURCE))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
