bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
2	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
3	[BUG]  [BUGGY]  if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saver  [FE]      IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (saver  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  cannot  find  symbol  saver	15	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
5	[BUG]  [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
7	[BUG]  [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
9	[BUG]  [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]            IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  >  (savings  *  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
11	[BUG]  [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]              IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost  ==  (savings  +  SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
13	[BUG]  [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]                IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (savings  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
14	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]    [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	  	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
16	[BUG]  [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
18	[BUG]  [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]      IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	9	replace
19	[BUG]  [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]        IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saved  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  cannot  find  symbol  saved	15	None	replace
20	[BUG]  [BUGGY]  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saves  [FE]          IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(helperCodeCost!=  (saves  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  cannot  find  symbol  saves	15	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
22	[BUG]  [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (savings  *  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
23	[BUG]  [BUGGY]  if(saved  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]      IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(saved  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  cannot  find  symbol  saved	15	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
25	[BUG]  [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings!=  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
27	[BUG]  [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  ==  (helperCodeCost  +  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
28	[BUG]  [BUGGY]  if(saved  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  saved  [FE]            IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(saved  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(saved  >  (helperCodeCost  *  SAVINGS_THRESHOLD))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	non-compiled	[CE]  cannot  find  symbol  saved	15	None	replace
29	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  IllegalStateException  	15	1	replace
30	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [FE]  IllegalStateException  [FE]              IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  helperCodeCost))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  IllegalStateException  	15	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
32	[BUG]  [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [FE]  AssertionFailedError  [FE]                IllegalStateException  [CONTEXT]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    [BUGGY]  if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {  [BUGGY]  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	if(savings  >  (SAVINGS_THRESHOLD  +  savings))  {	if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  	compilable	  [FE]  AssertionFailedError  	15	8	replace
