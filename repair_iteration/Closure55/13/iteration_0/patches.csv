bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
2	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildToFront(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
3	[BUG]  [BUGGY]  addingRoot.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildToBack(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
4	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  AddingRoot.addChildrenToFront(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
5	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(savings);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
6	[BUG]  [BUGGY]  addingRoot.addChildToFront(savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildToFront(savings);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(savings);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
7	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(reduction,  savings);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  savings);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	  	addingRoot.addChildrenToFront(helperCode);  	compilable	  [FE]  AssertionFailedError  	25	9	replace
9	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	  	addingRoot.addChildrenToFront(helperCode);  	compilable	  [FE]  AssertionFailedError  	25	9	replace
10	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(externs);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(externs);	addingRoot.addChildrenToFront(helperCode);  	compilable	  [FE]  IllegalArgumentException  	25	9	replace
11	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  [FE]  IllegalArgumentException  [FE]    IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(externs);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);	addingRoot.addChildrenToFront(helperCode);  	compilable	  [FE]  IllegalArgumentException  	25	9	replace
12	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToBack(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
13	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]        IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildrenToFront(reducing);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reducing	25	None	replace
14	[BUG]  [BUGGY]  addingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.removeChild(reduction);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(reduction);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
15	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]      IllegalStateException  [CONTEXT]  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]  addingRoot.addChildToFront(reducing);  [BUGGY]  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducing);	addingRoot.addChildrenToFront(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reducing	25	None	replace
