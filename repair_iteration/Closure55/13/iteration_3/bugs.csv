bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	61	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	61	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	61	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  addedRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  addedRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);  addedRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]                                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	61	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  addedRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]                                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  addedRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  addedRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	61	None	replace
8	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  helpingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatingRoot,  helpingRoot);	  addingRoot.addChildrenToFront(reduction,    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	6	None	replace
9	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  helpingRoot);  [CE]  cannot  find  symbol  reducing  [FE]                                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducing,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  helpingRoot);	  addingRoot.addChildrenToFront(reduction,    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducing	6	None	replace
10	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  helpingRoot);	  addingRoot.addChildrenToFront(reduction,    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collection<FunctionRewriter.Reduction>)  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  addingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collection<FunctionRewriter.Reduction>)	22	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot,  reductions);  [CE]  cannot  find  symbol  contributingRoot  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  contributingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	22	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,reducings);  [CE]  cannot  find  symbol  reducings  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,reducings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,reducings);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	22	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	22	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reductions,  helperCode);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	22	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  reductions);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	22	None	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  addingRoot.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(root);    addingRoot.addChildrenToFront(root);	  	compilable	  [FE]  IllegalArgumentException  	75	9	add
18	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  addingRoot.addChildrenToFront(root);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  addingRoot.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    addingRoot.addChildrenToFront(root);	  	compilable	  [FE]  IllegalArgumentException  	75	9	add
19	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  AddingRoot.addChildrenToFront(root);  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  AddingRoot.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    AddingRoot.addChildrenToFront(root);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	75	None	add
20	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(root);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(root);	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
21	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	75	None	add
22	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(adjustedRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(adjustedRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(adjustedRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	75	None	add
23	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	75	None	add
24	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(adjustingRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]                IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(adjustingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(adjustingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	75	None	add
25	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(  addingRoot);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
26	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addedRoot,  reduction);  [CE]  cannot  find  symbol  addedRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(addedRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addedRoot,  reduction);	  AddingRoot.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	93	None	replace
27	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  root);	  addingRoot.addChildrenToFront(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	76	None	replace
28	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(saverCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(saverCodeCost);	  addingRoot.addChildrenToBack(saving);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	84	None	replace
29	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(growingRoot,  reduction);  [CE]  cannot  find  symbol  growingRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(growingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(growingRoot,  reduction);	  AddingRoot.addChildrenToFront(growingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	47	None	replace
30	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	53	None	add
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	53	9	add
32	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(externs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	53	9	add
33	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	add
34	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  AddingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  AddingRoot  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  AddingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(savings);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	53	None	add
35	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCodeCost);  addingRoot.addChildrenToFront(externs);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCodeCost);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(helperCodeCost);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	53	None	add
36	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(parent);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  parent  [FE]              IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(parent);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(parent);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  parent	53	None	add
37	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(reduction);  addingRoot.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	add
38	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saver);  addingRoot.addChildrenToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]                  IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saver);  addingRoot.addChildrenToFront(saver);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(saver);  addingRoot.addChildrenToFront(saver);	  	non-compiled	[CE]  cannot  find  symbol  saver	53	None	add
39	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  reduction);	  addingRoot.addChildrenToFront(allReductions,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	120	None	replace
40	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  saving);	  addingRoot.addChildrenToFront(allReductions,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	120	None	replace
41	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(saver);  [CE]  cannot  find  symbol  saver  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(saver);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(saver);	  addingRoot.addChildrenToBack(rededuction);    	non-compiled	[CE]  cannot  find  symbol  saver	131	None	replace
42	[BUG]  [BUGGY]  reducingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  reducingRoot.addChildrenToBack(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	reducingRoot.addChildrenToBack(reduction);	  addingRoot.addChildrenToBack(rededuction);    	non-compiled	[CE]  cannot  find  symbol  reduction	131	None	replace
43	[BUG]  [BUGGY]  AddingRoot.addChildToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(creatingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	72	None	replace
44	[BUG]  [BUGGY]  AddingRoot.addChildToBack(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(reduction,  addingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
45	[BUG]  [BUGGY]  AddingRoot.addChildToBack(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(growingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(growingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	72	None	replace
46	[BUG]  [BUGGY]  AddingRoot.addChildToBack(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(reduction,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(reduction,  savingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
47	[BUG]  [BUGGY]  AddingRoot.addChildToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(adjustedRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	72	None	replace
48	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reductions));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reductions));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	39	None	replace
49	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
50	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reduction));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reduction));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	39	None	replace
51	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction),  savings);	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
52	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
53	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reducer));  [CE]  no  suitable  constructor  found  for  Node(int,Reducer)  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reducer));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reducer));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Reducer)	39	None	replace
54	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  root,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  root,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
55	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reduction,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
56	[BUG]  [BUGGY]  addingRoot.addChildToFront(externs,  root,  savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(externs,  root,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	8	None	replace
57	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  saving);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
58	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reduction,  saving);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
59	[BUG]  [BUGGY]  addingRoot.addChildToFront(compiler,  root,  savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(compiler,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(compiler,  root,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	8	None	replace
60	[BUG]  [BUGGY]  addingRoot.addChildToFront(savings,  root);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(savings,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(savings,  root);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	8	None	replace
61	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  root);	  addingRoot.addChildrenToFront(reduction,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	119	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  addingRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);  addingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	58	None	replace
63	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  contributingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
64	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  addingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
65	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reduction,  addingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
66	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helpingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
67	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  eliminatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  eliminatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  eliminatingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
68	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getNext();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getNext();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getNext();	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	23	None	replace
69	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getFirstChild();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getFirstChild();	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	23	None	replace
70	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getLastChild();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getLastChild();	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	23	None	replace
71	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent(),  savings);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent(),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getParent(),  savings);	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  ';'  expected	23	None	replace
72	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent(),  reduction);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent(),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getParent(),  reduction);	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  ';'  expected	23	None	replace
73	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent()  +  1;  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent()  +  1;  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getParent()  +  1;	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	23	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	NodeUtil.removeChild(root,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  AssertionFailedError  	26	9	replace
75	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(root,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  AssertionFailedError  	26	9	replace
76	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  reduction);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	26	None	replace
77	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addingRoot);  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(parent,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(parent,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  parent	26	None	replace
78	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(compiler,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(compiler,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	26	None	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(removingRoot,  contributingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]                              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(removingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(removingRoot,  contributingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	26	None	replace
80	[BUG]  [BUGGY]  NodeUtil.removeChild(growingRoot,  reduction);  [CE]  cannot  find  symbol  growingRoot  [FE]                                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(growingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(growingRoot,  reduction);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	26	None	replace
81	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getNext();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getNext();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getNext();	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	110	None	replace
82	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getLastChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getLastChild();	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	110	None	replace
83	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getParent(),  savings);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getParent(),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getParent(),  savings);	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  ';'  expected	110	None	replace
84	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getChildCount();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getChildCount();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getChildCount();	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	110	None	replace
85	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getParent(),  reduction);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getParent(),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getParent(),  reduction);	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  ';'  expected	110	None	replace
86	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  savings));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  savings));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	71	None	replace
87	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  helperCodeCost));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	71	None	replace
88	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  helperCodeCost));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reductions,  helperCodeCost));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)	71	None	replace
89	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	71	None	replace
90	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions),  savings);  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions),  savings);	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	71	None	replace
91	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  helpingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  helpingRoot));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	71	None	replace
92	[BUG]  [BUGGY]  addingRoot.removeChild(savings);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(savings);	  addingRoot.removeChild(savedRoot);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	128	None	replace
93	[BUG]  [BUGGY]  addingRoot.removeChild(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adjustedRoot);	  addingRoot.removeChild(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	128	None	replace
94	[BUG]  [BUGGY]  addingRoot.removeChild(additionalRoot);  [CE]  cannot  find  symbol  additionalRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(additionalRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(additionalRoot);	  addingRoot.removeChild(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  additionalRoot	128	None	replace
95	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	11	None	replace
96	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reduction,  helperCodeCost));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
97	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions),  savings);  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions),  savings);	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	11	None	replace
98	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  helperCodeCost));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)  [FE]                                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reductions,  helperCodeCost));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)	11	None	replace
99	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]                                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  contributingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  contributingRoot));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	11	None	replace
100	[BUG]  [BUGGY]  AddingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  savings));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	11	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  contributingRoot,  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	18	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  addingRoot);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	18	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	18	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reducer);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)	18	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
106	[BUG]  [BUGGY]  AddingRoot.addChildToFront(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(root,  reduction);	  addingRoot.addChildToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
107	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(saver);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(saver);	  addingRoot.addChildrenToFront(saverCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saver	78	None	replace
108	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(adjustedRoot);	  addingRoot.addChildrenToFront(saverCodeCost);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	78	None	replace
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(addingRoot);    addingRoot.removeChild(addingRoot);	  	compilable	  [FE]  RuntimeException  	102	9	add
110	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.removeChild(addingRoot);	  	compilable	  [FE]  RuntimeException  	102	9	add
111	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  AddingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  AddingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  AddingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    AddingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	102	None	add
112	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  eliminatingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  eliminatingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    eliminatingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	102	None	add
113	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  pruningRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  pruningRoot  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  pruningRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    pruningRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  pruningRoot	102	None	add
114	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  trimmingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  trimmingRoot  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  trimmingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    trimmingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  trimmingRoot	102	None	add
115	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  Savings.removeChild(addingRoot);  [CE]  cannot  find  symbol  Savings  [FE]              RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  Savings.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    Savings.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  Savings	102	None	add
116	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  addedRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  addedRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.removeChild(addingRoot);  addedRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	102	None	add
117	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  addedRoot.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  addedRoot  [FE]                  RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.removeChild(addingRoot);  addedRoot.removeChild(helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.removeChild(addingRoot);  addedRoot.removeChild(helperCodeCost);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	102	None	add
118	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  helperCodeCost);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  helperCodeCost);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
119	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  helpingRoot);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	79	None	replace
120	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  helperCodeCost);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  helperCodeCost);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
121	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  helperCodeCost);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  helperCodeCost);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
122	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
123	[BUG]  [BUGGY]  addingRoot.removeChild(root,  helperCodeCost);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root,  helperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	27	None	replace
124	[BUG]  [BUGGY]  addingRoot.removeChild(root,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root,  helpingRoot);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	27	None	replace
125	[BUG]  [BUGGY]  addingRoot.removeChild(root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root,  aiderCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root,  aiderCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	27	None	replace
126	[BUG]  [BUGGY]  addingRoot.removeChild(root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root,  HelperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root,  HelperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	27	None	replace
127	[BUG]  [BUGGY]  AddingRoot.removeChild(root,  helperCodeCost);  [CE]  cannot  find  symbol  AddingRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.removeChild(root,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.removeChild(root,  helperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	27	None	replace
128	[BUG]  [BUGGY]  addingRoot.removeChild(root,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root,  saving);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	27	None	replace
129	[BUG]  [BUGGY]  adjustingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  adjustingRoot.addChildToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	adjustingRoot.addChildToFront(reduction);	  addingRoot.addChildToFront(adjustedRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	115	None	replace
130	[BUG]  [BUGGY]  addingRoot.replaceChild(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(root,  reduction);	  addingRoot.removeChild(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	92	None	replace
131	[BUG]  [BUGGY]  AddingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.removeChild(reduction);	  addingRoot.removeChild(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	92	None	replace
132	[BUG]  [BUGGY]  removingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  removingRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	removingRoot.removeChild(reduction);	  addingRoot.removeChild(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	92	None	replace
133	[BUG]  [BUGGY]  addingRoot.addChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChild(reduction);	  addingRoot.addChildrenToBack(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	83	None	replace
134	[BUG]  [BUGGY]  NodeUtil.removeChild(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(reduction,  addingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
135	[BUG]  [BUGGY]  NodeUtil.removeChild(creatingRoot,  contributingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(creatingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(creatingRoot,  contributingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	21	None	replace
136	[BUG]  [BUGGY]  addingRoot.addChildToFront(reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reductions,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reductions,  reduction);	  addingRoot.addChildToFront(reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
137	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  root);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  root);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
138	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reductions,  helperCodeCost);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  reductions,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reductions,  helperCodeCost);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
139	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reductions,  helperCode);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  reductions,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reductions,  helperCode);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
140	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  root,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  root,  reductions);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
141	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(compiler,  root,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
142	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductionMap,  root);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductionMap,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductionMap,  root);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
143	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reductions);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),  reductions);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	73	None	replace
144	[BUG]  [BUGGY]  AddingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
145	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  savings);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
146	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction,  saving);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
147	[BUG]  [BUGGY]  addingRoot.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(parent);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(parent);	  addingRoot.removeChild(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  parent	124	None	replace
148	[BUG]  [BUGGY]  Node  externs  =  addingRoot.getFirstChild();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  externs  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	97	None	replace
149	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getFirstChild();  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  reduction	97	None	replace
150	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getFirstChild();  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  reduction	97	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  extras  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	Node  extras  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
152	[BUG]  [BUGGY]  Node  extras  =  addingRoot.getFirstChild();  [FE]  AssertionFailedError  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  extras  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  extras  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externals  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	Node  externals  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
154	[BUG]  [BUGGY]  Node  externals  =  addingRoot.getFirstChild();  [FE]  AssertionFailedError  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externals  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  externals  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
155	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getLastChild();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getLastChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  reduction	97	None	replace
156	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  reduction);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
157	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  saving);  [CE]  cannot  find  symbol  reducing  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducing,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  saving);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	106	None	replace
158	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducing,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  reduction);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	106	None	replace
159	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reducingRoot);	  addingRoot.addChildrenToBack(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	81	None	replace
160	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  savingStatement);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  savingStatement);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  savingStatement);	  addingRoot.addChildrenToFront(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	90	None	replace
161	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  savingRoot);	  addingRoot.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
162	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  contributingRoot);	  addingRoot.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
163	[BUG]  [BUGGY]  AddingRoot.addChildToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(creatingRoot);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	16	None	replace
164	[BUG]  [BUGGY]  AddingRoot.addChildToFront(addingRoot);  [CE]  cannot  find  symbol  AddingRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(addingRoot);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	16	None	replace
165	[BUG]  [BUGGY]  AddingRoot.addChildToFront(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(growingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(growingRoot);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	16	None	replace
166	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reducingRoot);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	16	None	replace
167	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	98	None	replace
168	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(reduction,  externs);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(reduction,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(reduction,  externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	98	None	replace
169	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(externs);  [CE]  cannot  find  symbol  NodeHelper  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  NodeHelper	98	None	replace
170	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(creatingRoot,  externs);  [CE]  cannot  find  symbol  creatingRoot  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(creatingRoot,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(creatingRoot,  externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	98	None	replace
171	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(creatingRoot);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	98	None	replace
172	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(adjustedRoot);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	98	None	replace
173	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(externs,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(externs,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(externs,  reduction);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	98	None	replace
174	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
175	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  AddingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
176	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  AddingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  AddingRoot  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  AddingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  AddingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	55	None	replace
177	[BUG]  [BUGGY]  Node  externs  =  addingRoot.getParent();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	99	None	replace
178	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();  [CE]  cannot  find  symbol  reduction  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  cannot  find  symbol  reduction	99	None	replace
179	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	99	None	replace
180	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  cannot  find  symbol  reduction	99	None	replace
181	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();  [CE]  cannot  find  symbol  AddingRoot  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(root);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	99	None	replace
182	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getNext();  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getNext();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  Node  externs  =  addingRoot.getNext();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  cannot  find  symbol  reduction	99	None	replace
183	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getParent();  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  externs);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  cannot  find  symbol  reduction	99	None	replace
184	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reducers);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  reducers);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reducers);	  addingRoot.addChildrenToFront(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
185	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  reductions,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reductions,  helperCodeCost);	  addingRoot.addChildrenToFront(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reduction,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  savings);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]                        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  addingRoot,  savings);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	25	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	25	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot,  savings);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  contributingRoot,  savings);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	25	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  addingRoot.removeChild(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(root);    addingRoot.removeChild(root);	  	compilable	  [FE]  RuntimeException  	30	9	add
193	[BUG]  [BUGGY]  addingRoot.removeChild(root);  addingRoot.removeChild(root);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  addingRoot.removeChild(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    addingRoot.removeChild(root);	  	compilable	  [FE]  RuntimeException  	30	9	add
194	[BUG]  [BUGGY]  addingRoot.removeChild(root);  AddingRoot.removeChild(root);  [CE]  cannot  find  symbol  AddingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  AddingRoot.removeChild(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    AddingRoot.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	30	None	add
195	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	30	None	add
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	30	9	add
197	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	30	9	add
198	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(growingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(growingRoot);	  	non-compiled	[CE]  cannot  find  symbol  growingRoot	30	None	add
199	[BUG]  [BUGGY]  addingRoot.removeChild(root);  eliminatingRoot.removeChild(root);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]              RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  eliminatingRoot.removeChild(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    eliminatingRoot.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	30	None	add
200	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	30	None	add
201	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                  RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	30	None	add
202	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducingRoot);	  addingRoot.addChildrenToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	51	None	replace
203	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  reduction);  [CE]  cannot  find  symbol  creatingRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatingRoot,  reduction);	  addingRoot.addChildrenToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	51	None	replace
204	[BUG]  [BUGGY]  AddingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
205	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
206	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(HelperCodeCost,  reduction));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(HelperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(HelperCodeCost,  reduction));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	12	None	replace
207	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction),  savings);	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
208	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCode,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCode,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCode,  reduction));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(null);	  	compilable	  [FE]  NullPointerException  	82	9	add
210	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(null);	  	compilable	  [FE]  NullPointerException  	82	9	add
211	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	add
212	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  AddingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  AddingRoot.addChildrenToBack(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    AddingRoot.addChildrenToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	add
213	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  AddingRoot.addChildrenToBack(null);  [CE]  cannot  find  symbol  AddingRoot  [FE]          NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  AddingRoot.addChildrenToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    AddingRoot.addChildrenToBack(null);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	82	None	add
214	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]            NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));	  	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	add
215	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]              NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(adjustedRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	82	None	add
216	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  eliminatingRoot.addChildrenToBack(null);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  eliminatingRoot.addChildrenToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    eliminatingRoot.addChildrenToBack(null);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	82	None	add
217	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  NullPointerException  	82	9	add
218	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  NullPointerException  	82	9	add
219	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction));  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
220	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  saving));  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  saving));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  saving));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
221	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToBack(new  Node(savings));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	compilable	  [FE]  IllegalStateException  	69	9	replace
222	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(savings));  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(savings));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	compilable	  [FE]  IllegalStateException  	69	9	replace
223	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  contributingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  contributingRoot));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
224	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  savings));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  savings));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
225	[BUG]  [BUGGY]  AddingRoot.addChildToBack(new  Node(reduction));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(new  Node(reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(new  Node(reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
226	[BUG]  [BUGGY]  addingRoot.addChildToFront(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(rededuction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(rededuction);	  addingRoot.addChildToFront(saving);    	non-compiled	[CE]  cannot  find  symbol  rededuction	89	None	replace
227	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  helping);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  helping);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  helping);	  addingRoot.addChildrenToFront(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
228	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruning);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruning);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  pruning);	  addingRoot.addChildrenToFront(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
229	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  reducers);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  reducers);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  reducers);	  addingRoot.addChildToFront(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	123	None	replace
230	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reduction,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reduction,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	122	None	replace
231	[BUG]  [BUGGY]  adjustingRoot.addChildToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  adjustingRoot.addChildToFront(reduction,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	adjustingRoot.addChildToFront(reduction,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	122	None	replace
232	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing,  reductions);  [CE]  cannot  find  symbol  reducing  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducing,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducing,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducing	122	None	replace
233	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  nodeTraversal  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  nodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	nodeTraversal.traverse(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	57	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	57	None	replace
235	[BUG]  [BUGGY]  MakingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  MakingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	MakingRoot.addChildrenToFront(reduction);	  AddingRoot.addChildrenToFront(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
236	[BUG]  [BUGGY]  DecoratingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  DecoratingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	DecoratingRoot.addChildrenToFront(reduction);	  AddingRoot.addChildrenToFront(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
237	[BUG]  [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	SavingRoot.addChildrenToFront(reduction);	  AddingRoot.addChildrenToFront(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
238	[BUG]  [BUGGY]  eliminatingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  eliminatingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	eliminatingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
239	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
240	[BUG]  [BUGGY]  eliminatingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  eliminatingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	eliminatingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	56	None	replace
241	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	56	None	replace
242	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  eliminatingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
243	[BUG]  [BUGGY]  eliminatingRoot.addChildrenToFront(root);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  eliminatingRoot.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	eliminatingRoot.addChildrenToFront(root);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	56	None	replace
244	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  savings);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	96	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  saving);  [CE]  cannot  find  symbol  saving  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  saving);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	96	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  contributingRoot);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	96	None	replace
248	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	96	None	replace
249	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  savings);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	96	None	replace
250	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reduction,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reduction,  root);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	77	None	replace
251	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  parent);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  parent);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  parent);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	77	None	replace
252	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reductions);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reductions);	  addingRoot.addChildrenToBack(reducing);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
253	[BUG]  [BUGGY]  AddingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
254	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
255	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(HelperCodeCost,  reduction));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(HelperCodeCost,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(HelperCodeCost,  reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	67	None	replace
256	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCode,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCode,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCode,  reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
257	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction),  savings);	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	67	None	replace
258	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction));  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
259	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  helpingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction,  helpingRoot));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
260	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  savings));  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction,  savings));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
261	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  saving));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  saving));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction,  saving));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
262	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  contributingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction,  contributingRoot));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
263	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducer);	  addingRoot.addChildToFront(savedRoot);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	116	None	replace
264	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helperCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
265	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  helperCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
266	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  helpingRoot);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	13	None	replace
267	[BUG]  [BUGGY]  addingRoot.addChildToFront(savings,  helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(savings,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(savings,  helperCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
268	[BUG]  [BUGGY]  addingRoot.addChildToFront(externs,  helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(externs,  helperCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
269	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  HelperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  HelperCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
270	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  root);	  addingRoot.addChildrenToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	74	None	replace
271	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToBack(new    Node(helperCodeCost));    addingRoot.addChildToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  IllegalStateException  	68	9	add
272	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    addingRoot.addChildToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  IllegalStateException  	68	9	add
273	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  AddingRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  AddingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    AddingRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	68	None	add
274	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	68	None	add
275	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  eliminatingRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  eliminatingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    eliminatingRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	68	None	add
276	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  addedRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  addedRoot  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  addedRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    addingRoot.addChildToBack(new  Node(helperCodeCost));  addedRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	68	None	add
277	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]              IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addingRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	68	None	add
278	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	add
279	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]                  IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildToBack(new  Node(helperCodeCost));  addRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	68	None	add
280	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  addingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(helperCode);    addingRoot.addChildToFront(helperCode);	  	compilable	  [FE]  IllegalArgumentException  	87	9	add
281	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  addingRoot.addChildToFront(helperCode);  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  addingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    addingRoot.addChildToFront(helperCode);	  	compilable	  [FE]  IllegalArgumentException  	87	9	add
282	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  AddingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  AddingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    AddingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	87	None	add
283	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  eliminatingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  eliminatingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    eliminatingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	87	None	add
284	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  addingRoot.addChildToFront(helperCode);  addedRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  addedRoot  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  addingRoot.addChildToFront(helperCode);  addedRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    addingRoot.addChildToFront(helperCode);  addedRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	87	None	add
285	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	87	None	add
286	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	87	None	add
287	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  savings.addChildToFront(helperCode);  [CE]  int  cannot  be  dereferenced  [FE]                IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  savings.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    savings.addChildToFront(helperCode);	  	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	add
288	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.CUSTOM);  addingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.CUSTOM);  addingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Savings.checkState(reduction.getType()  ==  Token.CUSTOM);  addingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	87	None	add
289	[BUG]  [BUGGY]  Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs);  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	59	None	replace
290	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(reduction,  externs);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(reduction,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(reduction,  externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
291	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(externs);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
292	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(externs,  addingRoot);  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(externs,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(externs,  addingRoot);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
293	[BUG]  [BUGGY]  Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs,  reduction);  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  externs  =  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs,  reduction);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	59	None	replace
294	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(adjustedRoot,  externs);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(adjustedRoot,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(adjustedRoot,  externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	59	None	replace
295	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
296	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reducer);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reducer);	  addingRoot.addChildrenToBack(savedRoot);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	38	None	replace
297	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	66	None	replace
298	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  reductions);  [CE]  cannot  find  symbol  creatingRoot  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatingRoot,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	66	None	replace
299	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  reductions);  [CE]  cannot  find  symbol  reducing  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducing,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducing	66	None	replace
300	[BUG]  [BUGGY]  adjustingRoot.addChildrenToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  adjustingRoot.addChildrenToFront(reduction,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	adjustingRoot.addChildrenToFront(reduction,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	66	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	112	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  addingRoot);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	112	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(creatingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  creatingRoot  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(creatingRoot.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(creatingRoot.getType()  ==  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	112	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  contributingRoot);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	112	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	112	None	replace
306	[BUG]  [BUGGY]  addingRoot.addChildToFront(savings,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(savings,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(savings,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	100	None	replace
307	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducing,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducing,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	100	None	replace
308	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	100	None	replace
309	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reduction,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reduction,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	100	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	85	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GetterReducer)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  addingRoot,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GetterReducer)	85	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduction	85	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  addingRoot,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GetterReducer)  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  addingRoot,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  externs,  addingRoot,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GetterReducer)	85	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  contributingRoot  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	85	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer());  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	85	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer(),  reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer(),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer(),  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	85	None	replace
317	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reductions);  [CE]  cannot  find  symbol  AddingRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reductions);	  AddingRoot.addChildrenToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	113	None	replace
318	[BUG]  [BUGGY]  NodeUtil.removeChild(creatingRoot,  reduction);  [CE]  cannot  find  symbol  creatingRoot  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(creatingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(creatingRoot,  reduction);	          NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	19	None	replace
319	[BUG]  [BUGGY]  addingRoot.addChildToBack(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(saverCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(saverCodeCost);	  addingRoot.addChildToBack(saving);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	108	None	replace
320	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducer);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducer);	  addingRoot.addChildrenToFront(savedRoot);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	129	None	replace
321	[BUG]  [BUGGY]  addingRoot.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(creatingRoot);	  addingRoot.removeChild(null);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	35	None	replace
322	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.removeFirstChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.removeFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.removeFirstChild();	          Node    helperCode    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	111	None	replace
323	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getFirstChild().getNext();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getFirstChild().getNext();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getFirstChild().getNext();	          Node    helperCode    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	111	None	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(helperCode);    addingRoot.removeChild(helperCode);	  	compilable	  [FE]  RuntimeException  	28	9	add
325	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  addingRoot.removeChild(helperCode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    addingRoot.removeChild(helperCode);	  	compilable	  [FE]  RuntimeException  	28	9	add
326	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  AddingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  AddingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  AddingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    AddingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	28	None	add
327	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  eliminatingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  eliminatingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    eliminatingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	28	None	add
328	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  addingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  addingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
329	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  addingRoot.removeChild(helperCode);  addedRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  addedRoot  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  addingRoot.removeChild(helperCode);  addedRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    addingRoot.removeChild(helperCode);  addedRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	28	None	add
330	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]              RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.COST);  addingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
331	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.RETURN);  addingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
332	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.BLOCK);  addingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.BLOCK);  addingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.BLOCK);  addingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
333	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  saving);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
334	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  contributingRoot);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
335	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  savings);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
336	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  helpingRoot);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
337	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  helperCodeCost);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
338	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(null);    addingRoot.removeChild(null);	  	compilable	  [FE]  NullPointerException  	34	9	add
339	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(null);	  	compilable	  [FE]  NullPointerException  	34	9	add
340	[BUG]  [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    AddingRoot.removeChild(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	add
341	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]        NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(adjustedRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	34	None	add
342	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	add
343	[BUG]  [BUGGY]  addingRoot.removeChild(null);  eliminatingRoot.removeChild(null);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]            NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  eliminatingRoot.removeChild(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    eliminatingRoot.removeChild(null);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	34	None	add
344	[BUG]  [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(null);  [CE]  cannot  find  symbol  AddingRoot  [FE]              NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    AddingRoot.removeChild(null);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	34	None	add
345	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	34	None	add
346	[BUG]  [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                  NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(adjustedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    AddingRoot.removeChild(adjustedRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	34	None	add
347	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(new  Node(helperCodeCost));	  addingRoot.addChildToFront(creatingRoot);    	compilable	  [FE]  IllegalStateException  	36	9	replace
348	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost));  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost));	  addingRoot.addChildToFront(creatingRoot);    	compilable	  [FE]  IllegalStateException  	36	9	replace
349	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducingRoot);	  addingRoot.addChildToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	36	None	replace
350	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  savingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot,  savingRoot);	  AddingRoot.addChildrenToFront(reduction,    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	48	None	replace
351	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  savingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reducingRoot,  savingRoot);	  AddingRoot.addChildrenToFront(reduction,    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	48	None	replace
352	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addingRoot,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(addingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addingRoot,  savingRoot);	  AddingRoot.addChildrenToFront(reduction,    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	48	None	replace
353	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  eliminatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  eliminatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  eliminatingRoot);	  AddingRoot.addChildrenToFront(reduction,    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
354	[BUG]  [BUGGY]  addingRoot.addChildToBack(savings);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(savings);	  addingRoot.addChildToBack(adjustedRoot);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
355	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,reducings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,reducings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,reducings);	  addingRoot.addChildrenToFront(reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
356	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  reduction);	  addingRoot.addChildrenToFront(reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
357	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	20	9	add
358	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	20	9	add
359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	9	add
360	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	9	add
361	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCode!=  null)  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  RuntimeException  	20	9	add
362	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCode!=  null)  {  compiler.reportCodeChange();  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCode!=  null)  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  RuntimeException  	20	9	add
363	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost  ==  reduction)  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  reduction  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost  ==  reduction)  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost  ==  reduction)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	add
364	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  reduction)  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  reduction  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  reduction)  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  reduction)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	add
365	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildToFront(compiler.getNodeForCodeInsertion(null));  [CE]  cannot  find  symbol  addedRoot  [FE]              RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildToFront(compiler.getNodeForCodeInsertion(null));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildToFront(compiler.getNodeForCodeInsertion(null));	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	20	None	add
366	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  contributingRoot);	  	non-compiled	[CE]  cannot  find  symbol  contributingRoot	20	None	add
367	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  null)  {  compiler.reportCodeChange();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  if(helperCodeCost!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	20	None	add
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	86	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  contributingRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	86	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  addingRoot,  reduction,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	86	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	86	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  addingRoot,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  addingRoot,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	86	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	86	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  pruningRoot  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	86	None	replace
375	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  reduction);  [CE]  cannot  find  symbol  creatingRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot,  reduction);	  AddingRoot.addChildrenToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	45	None	replace
376	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction.creatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction.creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction.creatingRoot);	  AddingRoot.addChildrenToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	45	None	replace
377	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  saving);  [CE]  cannot  find  symbol  creatingRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot,  saving);	  AddingRoot.addChildrenToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	45	None	replace
378	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  root,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  root,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
379	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reduction,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
380	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  root,  savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  root,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
381	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  reduction,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reduction,  saving);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
382	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(compiler,  root,  savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(compiler,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(compiler,  root,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
383	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	64	None	replace
384	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reduction,  helperCodeCost));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
385	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  helperCodeCost));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reductions,  helperCodeCost));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,int)	64	None	replace
386	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions),  savings);  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions),  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions),  savings);	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	64	None	replace
387	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  savings));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	64	None	replace
388	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helpingCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helpingCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reduction,  helpingCodeCost));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  addingRoot);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  addingRoot);	          NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	24	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);	          NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	24	None	replace
391	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(root,  reductions);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(root,  reductions);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
392	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(root,  savings);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(root,  savings);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
393	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(root,  reduction);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
394	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(adjustedRoot,  reductions);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(adjustedRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(adjustedRoot,  reductions);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	44	None	replace
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  addingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(externs);    addingRoot.removeChild(externs);	  	compilable	  [FE]  RuntimeException  	91	9	add
396	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  addingRoot.removeChild(externs);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  addingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    addingRoot.removeChild(externs);	  	compilable	  [FE]  RuntimeException  	91	9	add
397	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  AddingRoot.removeChild(externs);  [CE]  cannot  find  symbol  AddingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  AddingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    AddingRoot.removeChild(externs);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	91	None	add
398	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  eliminatingRoot.removeChild(externs);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  eliminatingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    eliminatingRoot.removeChild(externs);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	91	None	add
399	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	91	None	add
400	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.removeChild(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.removeChild(externs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	91	None	add
401	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(externs);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeUtil.removeChild(externs);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	add
402	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  Node  externs  =  addingRoot.getFirstChild();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]                RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    Node  externs  =  addingRoot.getFirstChild();	  	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	91	None	add
403	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(adjustingRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]                  RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(adjustingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeUtil.removeChild(adjustingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	91	None	add
404	[BUG]  [BUGGY]  adjustingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  adjustingRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	adjustingRoot.removeChild(reduction);	  addingRoot.removeChild(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	29	None	replace
405	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reductions,  helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  reductions,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reductions,  helperCodeCost);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
406	[BUG]  [BUGGY]  addingRoot.addChildToFront(reductions,  root);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reductions,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reductions,  root);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
407	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reductions,  helperCode);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  reductions,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reductions,  helperCode);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
408	[BUG]  [BUGGY]  addingRoot.addChildToFront(externs,  root,  reductions);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(externs,  root,  reductions);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
409	[BUG]  [BUGGY]  addingRoot.addChildToFront(compiler,  root,  reductions);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(compiler,  root,  reductions);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
410	[BUG]  [BUGGY]  addingRoot.addChildToFront(reductionMap,  root);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reductionMap,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reductionMap,  root);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
411	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCode);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
412	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  addingRoot,  helperCodeCost);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
413	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  contributingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot,  contributingRoot);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	49	None	replace
414	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  addingRoot,  savings);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
415	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  addingRoot);	  addingRoot.addChildrenToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
416	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  eliminatingRoot);	  addingRoot.addChildrenToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
417	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  addingRoot.addChildToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(root);    addingRoot.addChildToFront(root);	  	compilable	  [FE]  IllegalArgumentException  	125	9	add
418	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  addingRoot.addChildToFront(root);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  addingRoot.addChildToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    addingRoot.addChildToFront(root);	  	compilable	  [FE]  IllegalArgumentException  	125	9	add
419	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  AddingRoot.addChildToFront(root);  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  AddingRoot.addChildToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    AddingRoot.addChildToFront(root);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	125	None	add
420	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	125	None	add
421	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(adjustedRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(adjustedRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.addChildToFront(adjustedRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	125	None	add
422	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(adjustingRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(adjustingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.addChildToFront(adjustingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	125	None	add
423	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  eliminatingRoot.addChildToFront(root);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]              IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  eliminatingRoot.addChildToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    eliminatingRoot.addChildToFront(root);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	125	None	add
424	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildToFront(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.addChildToFront(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	125	None	add
425	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	125	None	add
426	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(creatingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	41	None	replace
427	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(reduction,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(reduction,  savingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	41	None	replace
428	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(reduction,  addingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	41	None	replace
429	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(growingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(growingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	41	None	replace
430	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(reducingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	41	None	replace
431	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  IllegalStateException  	42	9	add
432	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	compilable	  [FE]  IllegalStateException  	42	9	add
433	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  AddingRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  AddingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    AddingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	42	None	add
434	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	42	None	add
435	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  eliminatingRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  eliminatingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    eliminatingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	42	None	add
436	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addedRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  addedRoot  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addedRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    addingRoot.addChildrenToBack(new  Node(helperCodeCost));  addedRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	42	None	add
437	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]              IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	42	None	add
438	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  AddingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  AddingRoot  [FE]                IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  AddingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    AddingRoot.addChildrenToBack(new  Node(helperCodeCost));  addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	42	None	add
439	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addRoot.addChildrenToBack(new  Node(helperCodeCost));  [CE]  cannot  find  symbol  NodeHelperCode  [FE]                  IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    NodeHelperCode.addChildrenToBack(new  Node(helperCodeCost));  addRoot.addChildrenToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	42	None	add
440	[BUG]  [BUGGY]  addingRoot.addChildToBack(reducer);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(reducer);	  addingRoot.addChildToBack(savedRoot);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	70	None	replace
441	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(root,  reduction);	  addingRoot.addChildrenToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reductions);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
444	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCodeCost);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(helperCodeCost);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(helperCodeCost);  NodeTraversal.traverse(compiler,  root,  reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction);  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction);  addingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
446	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reducer);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),  reducer);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	73	None	replace
447	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),reducing);  [CE]  cannot  find  symbol  reducing  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),reducing);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),reducing);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	73	None	replace
448	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getPreviousChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getPreviousChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getPreviousChild();	          Node    helperCode    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	111	None	replace
449	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(null);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(null);  addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	53	9	add
450	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(null);  addingRoot.addChildrenToFront(externs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(null);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(null);  addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	53	9	add
451	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	53	None	add
452	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	add
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  decreasingRoot,  contributingRoot);  [CE]  cannot  find  symbol  decreasingRoot  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  decreasingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  decreasingRoot,  contributingRoot);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	18	None	replace
454	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  helperCodeCost  =  addingRoot.getParent();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  helperCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    Node  helperCodeCost  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	68	None	add
455	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  new  Node(helperCodeCost);  addingRoot.addChildToBack(new  Node(helperCodeCost));  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  new  Node(helperCodeCost);  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    Node  HelperCodeCost  helperCodeCost  =  new  Node(helperCodeCost);  addingRoot.addChildToBack(new  Node(helperCodeCost));	  	non-compiled	[CE]  ';'  expected	68	None	add
456	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  reductions);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(problemCodeCost,  reductions);	  addingRoot.addChildrenToFront(reductions);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	50	None	replace
457	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCode,  reductions));  [CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCode,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCode,  reductions));	  addingRoot.addChildrenToFront(reductions);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)	50	None	replace
458	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  contributingRoot);  [CE]  cannot  find  symbol  reducing  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducing,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  contributingRoot);	  addingRoot.addChildrenToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	107	None	replace
459	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  adjustment);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  adjustment);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  adjustment);	  addingRoot.addChildrenToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
460	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  helpingCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  helpingCodeCost);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
461	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reduction,  savings);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(adjustedRoot,  reduction,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	62	None	replace
462	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  root);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  root);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
463	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  SAVINGS_THRESHOLD);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  SAVINGS_THRESHOLD);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	100	None	replace
464	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCodeCost,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	100	None	replace
465	[BUG]  [BUGGY]  addingRoot.addChildToFront(saving,  reduction);  [CE]  cannot  find  symbol  saving  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(saving,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(saving,  reduction);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	100	None	replace
466	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	71	None	replace
467	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCode,  reductions));  [CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCode,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCode,  reductions));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)	71	None	replace
468	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
469	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  reduction  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  compiler.reportCodeChange();  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
470	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
471	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  NodeTraversal.traverse(compiler,  root,  reduction);  }  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  NodeTraversal.traverse(compiler,  root,  reduction);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  NodeTraversal.traverse(compiler,  root,  reduction);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
472	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildToFront(externs);  addingRoot.addChildrenToFront(externs);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduction	85	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  GetterReducer());  [CE]  cannot  find  symbol  creatingRoot  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  GetterReducer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	85	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer(),  reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer(),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  new  GetterReducer(),  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	85	None	replace
476	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  contributingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	21	None	replace
477	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  pruningRoot);  [CE]  cannot  find  symbol  pruningRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  pruningRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  pruningRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	21	None	replace
478	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  eliminatingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  eliminatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  eliminatingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	21	None	replace
479	[BUG]  [BUGGY]  NodeUtil.removeChild(removingRoot,  addingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(removingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(removingRoot,  addingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	21	None	replace
480	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  elimination);  [CE]  cannot  find  symbol  elimination  [FE]            RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  elimination);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  elimination);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  elimination	21	None	replace
481	[BUG]  [BUGGY]  addingRoot.removeChild(adderCodeCost);  [CE]  cannot  find  symbol  adderCodeCost  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(adderCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adderCodeCost);	  addingRoot.removeChild(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  adderCodeCost	128	None	replace
482	[BUG]  [BUGGY]  addingRoot.replaceChild(externs,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(externs,  reduction);	  addingRoot.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	103	None	replace
483	[BUG]  [BUGGY]  addingRoot.replaceChild(externs,  pruningRoot);  [CE]  cannot  find  symbol  pruningRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  pruningRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(externs,  pruningRoot);	  addingRoot.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	103	None	replace
484	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(addedRoot);	  addingRoot.addChildrenToFront(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	129	None	replace
485	[BUG]  [BUGGY]  Node  addingRoot  =  addingRoot.getFirstChild();  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  addingRoot  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  addingRoot  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	97	None	replace
486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  adder  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	Node  adder  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
487	[BUG]  [BUGGY]  Node  adder  =  addingRoot.getFirstChild();  [FE]  AssertionFailedError  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  adder  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  adder  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	97	9	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
489	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	91	None	add
490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(externs);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	91	9	add
491	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	91	9	add
492	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	91	None	add
493	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(addedRoot,  addingRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  NodeUtil.removeChild(addedRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    NodeUtil.removeChild(addedRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	91	None	add
494	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(adjustedRoot));  [CE]  cannot  find  symbol  adjustedRoot  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(adjustedRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(adjustedRoot));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	43	None	replace
495	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(tokenCost));  [CE]  cannot  find  symbol  tokenCost  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(tokenCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(tokenCost));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  tokenCost	43	None	replace
496	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(root));  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(root));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(root));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	43	None	replace
497	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  contributingRoot);	  addingRoot.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	3	None	replace
498	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(saving);	  addingRoot.addChildrenToFront(problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	52	None	replace
499	[BUG]  [BUGGY]  addingRoot.addChildToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(creatingRoot);	  addingRoot.addChildToBack(reducing);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	109	None	replace
500	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot,  addingRoot);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	49	None	replace
501	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  addingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reducingRoot,  addingRoot);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	49	None	replace
502	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(addingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addingRoot,  reduction);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
503	[BUG]  [BUGGY]  addingRoot.addChildToFront(externs,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(externs,  reduction);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	77	None	replace
504	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  externs);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  externs);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	77	None	replace
505	[BUG]  [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  externs);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(problemCodeCost,  externs);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	77	None	replace
506	[BUG]  [BUGGY]  addingRoot.addChildToFront(null,  externs);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(null,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(null,  externs);	  addingRoot.addChildToFront(reduction,    externs);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	77	None	replace
507	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(externs);	  addingRoot.addChildToFront(helperCode);    	compilable	  [FE]  IllegalArgumentException  	88	9	replace
508	[BUG]  [BUGGY]  addingRoot.addChildToFront(externs);  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(externs);	  addingRoot.addChildToFront(helperCode);    	compilable	  [FE]  IllegalArgumentException  	88	9	replace
509	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reduction.getFirstChild()));  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reduction.getFirstChild()));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reduction.getFirstChild()));	  addingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	88	None	replace
510	[BUG]  [BUGGY]  addingRoot.addChildToFront(creator,  reduction);  [CE]  cannot  find  symbol  creator  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(creator,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(creator,  reduction);	  addingRoot.addChildToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	10	None	replace
511	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  saving);  [CE]  cannot  find  symbol  saving  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  saving);	  addingRoot.addChildToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	10	None	replace
512	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  pruning);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  pruning);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  pruning);	  addingRoot.addChildToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
513	[BUG]  [BUGGY]  removingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  removingRoot  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  removingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	removingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	56	None	replace
514	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  IllegalArgumentException  	75	9	add
515	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  IllegalArgumentException  	75	9	add
516	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	75	None	add
517	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	75	None	add
518	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	75	None	add
519	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.addChildrenToFront(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	75	None	add
520	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  helperCode);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  helperCode);	  addingRoot.addChildrenToFront(reduction,    helperCode);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
521	[BUG]  [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  reductions);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(problemCodeCost,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	122	None	replace
522	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getParent();  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  extras  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	Node  extras  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	compilable	  [FE]  AssertionFailedError  	99	9	replace
524	[BUG]  [BUGGY]  Node  extras  =  addingRoot.getParent();  [FE]  AssertionFailedError  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  extras  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  extras  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	compilable	  [FE]  AssertionFailedError  	99	9	replace
525	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	NodeUtil.removeChild(externs,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  RuntimeException  	26	9	replace
526	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(externs,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  RuntimeException  	26	9	replace
527	[BUG]  [BUGGY]  NodeUtil.removeChild(namingRoot,  addingRoot);  [CE]  cannot  find  symbol  namingRoot  [FE]                        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(namingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(namingRoot,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  namingRoot	26	None	replace
528	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.replaceChild(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.replaceChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.replaceChild(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
529	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.getNodeForCodeInsertion(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.getNodeForCodeInsertion(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.getNodeForCodeInsertion(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
530	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChild(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChild(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
531	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.copyChild(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.copyChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.copyChild(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
532	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(externs);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  NodeUtil.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
533	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeUtil.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeUtil.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeUtil.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
534	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildrenToFront(externs);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);  NodeUtil.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
535	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(addedRoot);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	59	None	replace
536	[BUG]  [BUGGY]  NodeUtil.addChildrenToFront(addedRoot,  externs);  [CE]  cannot  find  symbol  addedRoot  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.addChildrenToFront(addedRoot,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.addChildrenToFront(addedRoot,  externs);	  addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	59	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  reduction,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	25	None	replace
538	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  reducingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  reducingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    reducingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  reducingRoot	102	None	add
539	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.replaceChild(addingRoot,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	102	None	add
540	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.replaceChild(addingRoot);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	add
541	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  AddingRoot  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	55	None	replace
542	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(null);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	compilable	  [FE]  NullPointerException  	55	9	replace
543	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(null);  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(null);	  addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);    	compilable	  [FE]  NullPointerException  	55	9	replace
544	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(addedRoot);	  addingRoot.addChildrenToBack(saving);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	84	None	replace
545	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(helperCodeCost);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(helperCodeCost);	  addingRoot.addChildrenToBack(saving);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
546	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  helperCode);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
547	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(savings,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savings,  helpingRoot);	  addingRoot.addChildrenToFront(reduction,    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	6	None	replace
548	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  helperCodeCost  =  addingRoot.getParent();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  helperCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Node  helperCodeCost  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	add
549	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    NodeHelperCode  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
550	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  addingRoot.getParent();  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Node  HelperCodeCost  helperCodeCost  =  addingRoot.getParent();	  	non-compiled	[CE]  ';'  expected	42	None	add
551	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode  helperCodeCost  =  addingRoot.getParent();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  NodeHelperCode  helperCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    NodeHelperCode  helperCodeCost  =  addingRoot.getParent();	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
552	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  HelperCodeCost  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Node  HelperCodeCost  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  ';'  expected	42	None	add
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	86	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  creatingRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  creatingRoot,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	86	None	replace
555	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCode,  reductions));  [CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCode,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCode,  reductions));	  addingRoot.addChildToFront(reductions);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)	37	None	replace
556	[BUG]  [BUGGY]  NodeUtil.removeChild(growingRoot,  contributingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(growingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(growingRoot,  contributingRoot);	          NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	19	None	replace
557	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
558	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(helperCode,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(helperCode,  reduction);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
559	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saving,  reduction);  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(saving,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(saving,  reduction);	  addingRoot.addChildrenToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	106	None	replace
560	[BUG]  [BUGGY]  addingRoot.replaceChild(null,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(null,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(null,  reduction);	  addingRoot.removeChild(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	35	None	replace
561	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
562	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions);  NodeTraversal.traverse(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	57	None	replace
563	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  externs,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	57	None	replace
564	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
565	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  externs);  NodeTraversal.traverse(compiler,  root,  reductions);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	57	None	replace
566	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	11	None	replace
567	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	11	None	replace
568	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(addingRoot);  [CE]  cannot  find  symbol  AddingRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(addingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	41	None	replace
569	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(addedRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	41	None	replace
570	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helpingCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helpingCodeCost);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
571	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCode.addChildToFront(helperCode);  [CE]  cannot  find  symbol  NodeHelperCode  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCode.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    NodeHelperCode.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	87	None	add
572	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCodehelperCode  =  addingRoot.getFirstChild();  [CE]  cannot  find  symbol  NodeHelperCodehelperCode  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCodehelperCode  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    NodeHelperCodehelperCode  =  addingRoot.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCodehelperCode	87	None	add
573	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCode  helperCode  =  addingRoot.getParent();  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  NodeHelperCode  helperCode  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    NodeHelperCode  helperCode  =  addingRoot.getParent();	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
574	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Node  helperCode  =  addingRoot.getFirstChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Node  helperCode  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Node  helperCode  =  addingRoot.getFirstChild();	  	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	87	None	add
575	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Node  helperCode  =  addingRoot.getParent();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]            IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Node  helperCode  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Node  helperCode  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	87	None	add
576	[BUG]  [BUGGY]  addingRoot.removeChild(externs,  helperCodeCost);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs,  helperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	27	None	replace
577	[BUG]  [BUGGY]  addingRoot.removeChild(adjustedRoot,  helperCodeCost);  [CE]  cannot  find  symbol  adjustedRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(adjustedRoot,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adjustedRoot,  helperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	27	None	replace
578	[BUG]  [BUGGY]  addingRoot.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCodeCost,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCodeCost,  reduction);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
579	[BUG]  [BUGGY]  addingRoot.removeChild(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(reduction,  helperCodeCost);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
580	[BUG]  [BUGGY]  addingRoot.removeChild(adjustedRoot,  helpingRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(adjustedRoot,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adjustedRoot,  helpingRoot);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	27	None	replace
581	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(addedRoot));  [CE]  cannot  find  symbol  addedRoot  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(addedRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(addedRoot));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  addedRoot	69	None	replace
582	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(adjustedRoot,  reduction));  [CE]  cannot  find  symbol  adjustedRoot  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(adjustedRoot,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(adjustedRoot,  reduction));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	69	None	replace
583	[BUG]  [BUGGY]  addingRoot.replaceChild(externs,  reducer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(externs,  reducer);	  addingRoot.removeChild(helperCode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	29	None	replace
584	[BUG]  [BUGGY]  addingRoot.replaceChild(externs,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(externs,  savingRoot);	  addingRoot.removeChild(helperCode);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	29	None	replace
585	[BUG]  [BUGGY]  AddingRoot.addChildToBack(addingRoot);  [CE]  cannot  find  symbol  AddingRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(addingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	72	None	replace
586	[BUG]  [BUGGY]  AddingRoot.addChildToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(addedRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	72	None	replace
587	[BUG]  [BUGGY]  AddingRoot.addChildToBack(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(reducingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(reducingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	72	None	replace
588	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(removingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(removingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(removingRoot);	  AddingRoot.addChildrenToFront(growingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	47	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(reductionRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reductionRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(reductionRoot.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(reductionRoot.getType()  ==  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reductionRoot	112	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(addedRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  addedRoot  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(addedRoot.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(addedRoot.getType()  ==  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	112	None	replace
591	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	30	None	add
592	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	add
593	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  IllegalArgumentException  	125	9	add
594	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  IllegalArgumentException  	125	9	add
595	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	125	None	add
596	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	125	None	add
597	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	125	None	add
598	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]            IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	125	None	add
599	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helperCode);	  addingRoot.addChildToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
600	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(null);	  addingRoot.addChildToFront(creator);    	compilable	  [FE]  NullPointerException  	133	9	replace
601	[BUG]  [BUGGY]  addingRoot.addChildToFront(null);  [FE]  NullPointerException  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(null);	  addingRoot.addChildToFront(creator);    	compilable	  [FE]  NullPointerException  	133	9	replace
602	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(growingRoot,  savingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(growingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(growingRoot,  savingRoot);	  AddingRoot.addChildrenToFront(reduction,    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	48	None	replace
603	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>,int)	64	None	replace
604	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions,  HELPER_SOURCE));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	64	None	replace
605	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(root,  reductions));  [CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(root,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(root,  reductions));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)	64	None	replace
606	[BUG]  [BUGGY]  addingRoot.addChildToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(addedRoot);	  addingRoot.addChildToFront(saving);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	89	None	replace
607	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getNodeForCodeInsertion();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getNodeForCodeInsertion();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getNodeForCodeInsertion();	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	110	None	replace
608	[BUG]  [BUGGY]  Node  helperCode  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  addingRoot.getNodeForCodeInsertion(null);	          Node    helperCode    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	110	None	replace
609	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.replaceChild(externs,  root);	  addingRoot.removeChild(root);    	compilable	  [FE]  IllegalArgumentException  	31	9	replace
610	[BUG]  [BUGGY]  addingRoot.replaceChild(externs,  root);  [FE]  IllegalArgumentException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(externs,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(externs,  root);	  addingRoot.removeChild(root);    	compilable	  [FE]  IllegalArgumentException  	31	9	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savingRoot);	          NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	24	None	replace
612	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(root,  reductions));  [CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(root,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(root,  reductions));	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Collection<FunctionRewriter.Reduction>)	9	None	replace
613	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction.getFirstChild()));  [CE]  cannot  find  symbol  reduction  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction.getFirstChild()));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction.getFirstChild()));	  addingRoot.addChildrenToBack(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	83	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                      IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  helperCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  contributingRoot);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs,  contributingRoot);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(reduction);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addedRoot.addChildrenToFront(externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	61	None	replace
618	[BUG]  [BUGGY]  AddingRoot.addChildToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(addedRoot);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	16	None	replace
619	[BUG]  [BUGGY]  AddingRoot.addChildToFront(creation);  [CE]  cannot  find  symbol  creation  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(creation);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(creation);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creation	16	None	replace
620	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  adjustment);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  adjustment);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  adjustment);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
621	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  eliminating);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  eliminating);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  eliminating);	  addingRoot.addChildToFront(adjustedRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	101	None	replace
622	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reduction,  savings);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(adjustedRoot,  reduction,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	8	None	replace
623	[BUG]  [BUGGY]  addingRoot.addChildToFront(extras,  root,  savings);  [CE]  cannot  find  symbol  extras  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(extras,  root,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(extras,  root,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  extras	8	None	replace
624	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creator,  reduction);  [CE]  cannot  find  symbol  creator  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creator,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creator,  reduction);	  addingRoot.addChildrenToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	65	None	replace
625	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  saving);  [CE]  cannot  find  symbol  creatingRoot  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatingRoot,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatingRoot,  saving);	  addingRoot.addChildrenToFront(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	65	None	replace
626	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(helperCode);  NodeTraversal.traverse(compiler,  root,  reduction);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	96	None	replace
627	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  saving);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  saving);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	96	None	replace
628	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminating);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminating);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  eliminating);	  addingRoot.addChildrenToFront(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
629	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reducer));  [CE]  no  suitable  constructor  found  for  Node(int,Reducer)  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reducer));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reducer));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Reducer)	67	None	replace
630	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	82	None	add
631	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  contributingRoot);  [CE]  cannot  find  symbol  reducings  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  contributingRoot);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	66	None	replace
632	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adder);  [CE]  cannot  find  symbol  adder  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adder);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(adder);	  	non-compiled	[CE]  cannot  find  symbol  adder	34	None	add
633	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(null);    addingRoot.removeChild(addingRoot);	  	compilable	  [FE]  NullPointerException  	34	9	add
634	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(addingRoot);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(addingRoot);	  	compilable	  [FE]  NullPointerException  	34	9	add
635	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]        NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	34	None	add
636	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adders);  [CE]  cannot  find  symbol  adders  [FE]          NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(adders);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(adders);	  	non-compiled	[CE]  cannot  find  symbol  adders	34	None	add
637	[BUG]  [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(adder);  [CE]  cannot  find  symbol  adder  [FE]            NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  AddingRoot.removeChild(adder);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    AddingRoot.removeChild(adder);	  	non-compiled	[CE]  cannot  find  symbol  adder	34	None	add
638	[BUG]  [BUGGY]  addingRoot.removeChild(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	add
639	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  reduction);	  addingRoot.addChildrenToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	74	None	replace
640	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  externs);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  externs);	  addingRoot.addChildrenToFront(reduction,    externs);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	74	None	replace
641	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  externs);  [CE]  cannot  find  symbol  problemCodeCost  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(problemCodeCost,  externs);	  addingRoot.addChildrenToFront(reduction,    externs);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	74	None	replace
642	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(null,  externs);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(null,  externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(null,  externs);	  addingRoot.addChildrenToFront(reduction,    externs);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	74	None	replace
643	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,reducingRoot,  reductions);  [CE]  cannot  find  symbol  reducingRoot  [FE]              AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,reducingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,reducingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	22	None	replace
644	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  decreasingRoot,  reductions);  [CE]  cannot  find  symbol  decreasingRoot  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  decreasingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  decreasingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	22	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  eliminatingRoot,  reductions);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  eliminatingRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  eliminatingRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	22	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  pruningRoot,  reductions);  [CE]  cannot  find  symbol  pruningRoot  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  pruningRoot,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  pruningRoot,  reductions);	          NodeTraversal.traverse(compiler,    addingRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	22	None	replace
647	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reducer));  [CE]  no  suitable  constructor  found  for  Node(int,Reducer)  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reducer));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reducer));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Reducer)	12	None	replace
648	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  savingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  savingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  savingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    savingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  savingRoot	28	None	add
649	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.removeChild(addingRoot);  [CE]  cannot  find  symbol  Savings  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  Savings	28	None	add
650	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  NodeHelperCode.removeChild(addingRoot);  [CE]  cannot  find  symbol  NodeHelperCode  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  NodeHelperCode.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    NodeHelperCode.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  NodeHelperCode	28	None	add
651	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.removeChild(helperCode);  [CE]  cannot  find  symbol  Savings  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  Savings	28	None	add
652	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeHelper.addChildrenToFront(externs);  [CE]  cannot  find  symbol  NodeHelper  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeHelper.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);  NodeHelper.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  NodeHelper	98	None	replace
653	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeHelper.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeHelper.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeHelper.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	98	None	replace
654	[BUG]  [BUGGY]  NodeHelper.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeHelper.addChildrenToFront(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeHelper.addChildrenToFront(addedRoot);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	98	None	replace
655	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction);  NodeHelper.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction);  NodeHelper.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction);  NodeHelper.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	98	None	replace
656	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saverCode);  [CE]  cannot  find  symbol  saverCode  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(saverCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(saverCode);	  addingRoot.addChildrenToFront(saverCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCode	78	None	replace
657	[BUG]  [BUGGY]  addingRoot.addChildToBack(helperCodeCost);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(helperCodeCost);	  addingRoot.addChildToBack(saving);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	108	None	replace
658	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToBack(null);	  addingRoot.addChildToBack(saving);    	compilable	  [FE]  NullPointerException  	108	9	replace
659	[BUG]  [BUGGY]  addingRoot.addChildToBack(null);  [FE]  NullPointerException  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(null);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(null);	  addingRoot.addChildToBack(saving);    	compilable	  [FE]  NullPointerException  	108	9	replace
660	[BUG]  [BUGGY]  addingRoot.addChildToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(addedRoot);	  addingRoot.addChildToBack(saving);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	108	None	replace
661	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent()  -  1;  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent()  -  1;  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCodeCost  =  addingRoot.getParent()  -  1;	          Node    helperCodeCost    =    addingRoot.getParent();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	23	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  pruningRoot  [FE]                    AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  helperCodeCost);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  helperCodeCost);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	25	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCode);  [CE]  cannot  find  symbol  contributingRoot  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  contributingRoot,  reduction,  helperCode);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	25	None	replace
664	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(HelperCodeCost,  reductions));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(HelperCodeCost,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(HelperCodeCost,  reductions));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	12	None	replace
665	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helpingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reduction,  helpingRoot));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
666	[BUG]  [BUGGY]  addingRoot.addChildToFront(creatorCode);  [CE]  cannot  find  symbol  creatorCode  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(creatorCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(creatorCode);	  addingRoot.addChildToFront(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  creatorCode	116	None	replace
667	[BUG]  [BUGGY]  addingRoot.addChildToBack(saved);  [CE]  cannot  find  symbol  saved  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(saved);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(saved);	  addingRoot.addChildToBack(reducing);    	non-compiled	[CE]  cannot  find  symbol  saved	109	None	replace
668	[BUG]  [BUGGY]  addingRoot.addChildToBack(reductions);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(reductions);	  addingRoot.addChildToBack(reducing);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	109	None	replace
669	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  reducer);	  addingRoot.addChildToFront(reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
670	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helping);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helping);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helping);	  addingRoot.addChildToFront(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	121	None	replace
671	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  helpingerCode);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  helpingerCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  helpingerCode);	  addingRoot.addChildToFront(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	121	None	replace
672	[BUG]  [BUGGY]  addingRoot.replaceChild(root,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(root,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(root,  savingRoot);	  addingRoot.removeChild(helperCode);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	29	None	replace
673	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  savingRoot));  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction,  savingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction,  savingRoot));	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
674	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction);  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction);	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  ')'  expected	69	None	replace
675	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction),  saving);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction),  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction),  saving);	  addingRoot.addChildToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
676	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing,  saving);  [CE]  cannot  find  symbol  reducing  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducing,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducing,  saving);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	100	None	replace
677	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing,  contributingRoot);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducing,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducing,  contributingRoot);	  addingRoot.addChildToFront(problemCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	100	None	replace
678	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Node  helpingCodeCost  =  addingRoot.getParent();	  	compilable	  [FE]  IllegalStateException  	42	9	add
679	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Node  helpingCodeCost  =  addingRoot.getParent();	  	compilable	  [FE]  IllegalStateException  	42	9	add
680	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new    Node(helperCodeCost));    Savings.checkState(reduction.getType()  ==  Token.COST);	  	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	add
681	[BUG]  [BUGGY]  AddingRoot.addChildToBack(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToBack(reduction,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(reduction,  contributingRoot);	  AddingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(reducingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reducingRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Preconditions.checkState(reducingRoot.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Preconditions.checkState(reducingRoot.getType()  ==  Token.NAME);	          Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	112	None	replace
683	[BUG]  [BUGGY]  addingRoot.removeChild(workingRoot);  [CE]  cannot  find  symbol  workingRoot  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(workingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(workingRoot);	  addingRoot.removeChild(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  workingRoot	128	None	replace
684	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  savings);  [CE]  cannot  find  symbol  reducings  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  savings);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	66	None	replace
685	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducingr,  reductions);  [CE]  cannot  find  symbol  reducingr  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducingr,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducingr,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducingr	66	None	replace
686	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  reductions);  [CE]  cannot  find  symbol  reducings  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	66	None	replace
687	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  reductions);	  addingRoot.addChildrenToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
688	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  savingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  savingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    savingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  savingRoot	102	None	add
689	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  retiringRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  retiringRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  retiringRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    retiringRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  retiringRoot	102	None	add
690	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  replacingRoot.removeChild(addingRoot);  [CE]  cannot  find  symbol  replacingRoot  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  replacingRoot.removeChild(addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    replacingRoot.removeChild(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  replacingRoot	102	None	add
691	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(addingRoot);  addingRoot.replaceChild(addingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);    addingRoot.replaceChild(addingRoot,  savingRoot);	  	non-compiled	[CE]  cannot  find  symbol  savingRoot	102	None	add
692	[BUG]  [BUGGY]  if(addedRoot!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [CE]  cannot  find  symbol  addedRoot  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(addedRoot!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(addedRoot!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	54	None	replace
693	[BUG]  [BUGGY]  if(reduction  ==  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [CE]  cannot  find  symbol  reduction  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction  ==  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction  ==  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
694	[BUG]  [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  reducers.add(null);  }  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  reducers.add(null);  }  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	if(reduction!=  null)  {  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  }  else  {  reducers.add(null);  }	  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
695	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  contributingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reducingRoot,  contributingRoot);	  AddingRoot.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	49	None	replace
696	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  helpingerCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  helpingerCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	58	None	replace
697	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  helperCode);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  helperCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
698	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	53	None	add
699	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  saved  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  saved	53	None	add
700	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(saved);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);        addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(saved);  addingRoot.addChildrenToFront(saved);	  	non-compiled	[CE]  cannot  find  symbol  saved	53	None	add
701	[BUG]  [BUGGY]  addingRoot.addChildToFront(creatingRoot,  reduction);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(creatingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(creatingRoot,  reduction);	  addingRoot.addChildToFront(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	36	None	replace
702	[BUG]  [BUGGY]  addingRoot.removeChild(root);  pruningRoot.removeChild(root);  [CE]  cannot  find  symbol  pruningRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  pruningRoot.removeChild(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    pruningRoot.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol  pruningRoot	30	None	add
703	[BUG]  [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(root);  NodeUtil.removeChild(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);    NodeUtil.removeChild(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	30	None	add
704	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  reductions);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
705	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reducingRoot,  reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reducingRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reducingRoot,  reduction);	  addingRoot.addChildrenToBack(savings);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	44	None	replace
706	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  HelperCodeCost));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  HelperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reductions,  HelperCodeCost));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	71	None	replace
707	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  helperCode));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reductions,  helperCode));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reductions,  helperCode));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)	71	None	replace
708	[BUG]  [BUGGY]  NodeUtil.removeChild(reducingRoot,  addingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(reducingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(reducingRoot,  addingRoot);	          NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	19	None	replace
709	[BUG]  [BUGGY]  replacingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  replacingRoot  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  replacingRoot.addChildrenToFront(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	replacingRoot.addChildrenToFront(externs);	  addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  replacingRoot	56	None	replace
710	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducingRoot,  saving);  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducingRoot,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducingRoot,  saving);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	79	None	replace
711	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducingRoot,  savingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducingRoot,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducingRoot,  savingRoot);	  addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	79	None	replace
712	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	75	None	add
713	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(root);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  eliminatingRoot.addChildrenToFront(root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    eliminatingRoot.addChildrenToFront(root);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	75	None	add
714	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.removeChild(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	75	None	add
715	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]          IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	75	None	add
716	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(reduction),  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(reduction),  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(reduction),  helpingRoot);	  addingRoot.addChildToBack(new    Node(helperCodeCost),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	73	None	replace
717	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(HelperCodeCost,  reductions));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(HelperCodeCost,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(HelperCodeCost,  reductions));	  addingRoot.addChildToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	67	None	replace
718	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(new  Node(helperCode,  reduction));	  	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	add
719	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.removeChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.removeChildrenToBack(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.removeChildrenToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	add
720	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]        NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(null);  addingRoot.addChildrenToBack(savedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);    addingRoot.addChildrenToBack(savedRoot);	  	non-compiled	[CE]  cannot  find  symbol  savedRoot	82	None	add
721	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  savingRoot);	  addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
722	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  pruningRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  pruningRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  pruningRoot,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
723	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  reduction,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
724	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  eliminatingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  eliminatingRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  eliminatingRoot,  savings);	  addingRoot.addChildToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
725	[BUG]  [BUGGY]  Node  helperCode  =  contributingRoot.getFirstChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  Node  helperCode  =  contributingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	Node  helperCode  =  contributingRoot.getFirstChild();	          Node    helperCode    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	111	None	replace
726	[BUG]  [BUGGY]  addingRoot.removeChild(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(reduction,  helpingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(reduction,  helpingRoot);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
727	[BUG]  [BUGGY]  addingRoot.removeChild(adjustedRoot,  reduction);  [CE]  cannot  find  symbol  adjustedRoot  [FE]              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(adjustedRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adjustedRoot,  reduction);	  addingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	27	None	replace
728	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions,  reducer);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reductions,  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions,  reducer);	  addingRoot.addChildrenToFront(reductions);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
729	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reductions));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(HelperCodeCost,  reductions));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	39	None	replace
730	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(root,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.replaceChild(root,  addingRoot);	  addingRoot.removeChild(addingRoot);    	compilable	  [FE]  IllegalArgumentException  	103	9	replace
731	[BUG]  [BUGGY]  addingRoot.replaceChild(root,  addingRoot);  [FE]  IllegalArgumentException  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(root,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(root,  addingRoot);	  addingRoot.removeChild(addingRoot);    	compilable	  [FE]  IllegalArgumentException  	103	9	replace
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.detachFromParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.detachFromParent();	  addingRoot.removeChild(addingRoot);    	compilable	  [FE]  AssertionFailedError  	103	9	replace
733	[BUG]  [BUGGY]  addingRoot.detachFromParent();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.detachFromParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.detachFromParent();	  addingRoot.removeChild(addingRoot);    	compilable	  [FE]  AssertionFailedError  	103	9	replace
734	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  pruningRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  pruningRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  pruningRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    pruningRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  pruningRoot	28	None	add
735	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  helpingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  helpingRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  helpingRoot.removeChild(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    helpingRoot.removeChild(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  helpingRoot	28	None	add
736	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]        RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.COST);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
737	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]          RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);    Savings.checkState(reduction.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
738	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]    IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	125	None	add
739	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]      IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(addedRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.removeChild(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	125	None	add
740	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]        IllegalArgumentException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(root);  NodeUtil.removeChild(creatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);    NodeUtil.removeChild(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	125	None	add
741	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addedRoot,  reducer);  [CE]  cannot  find  symbol  addedRoot  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(addedRoot,  reducer);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addedRoot,  reducer);	  AddingRoot.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	93	None	replace
742	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatorCode,  contributingRoot);  [CE]  cannot  find  symbol  creatorCode  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatorCode,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatorCode,  contributingRoot);	  addingRoot.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatorCode	3	None	replace
743	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(saved);  [CE]  cannot  find  symbol  saved  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(saved);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(saved);	  addingRoot.addChildrenToBack(rededuction);    	non-compiled	[CE]  cannot  find  symbol  saved	131	None	replace
744	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(creator);  [CE]  cannot  find  symbol  creator  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(creator);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(creator);	  addingRoot.addChildrenToBack(saving);    	non-compiled	[CE]  cannot  find  symbol  creator	84	None	replace
745	[BUG]  [BUGGY]  addingRoot.removeChild(null);  pruningRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  pruningRoot.removeChild(reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    pruningRoot.removeChild(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	add
746	[BUG]  [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(creator);  [CE]  cannot  find  symbol  creator  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(null);  addingRoot.removeChild(creator);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);    addingRoot.removeChild(creator);	  	non-compiled	[CE]  cannot  find  symbol  creator	34	None	add
747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	57	None	replace
748	[BUG]  [BUGGY]  addingRoot.addChildToBack(creatorCode);  [CE]  cannot  find  symbol  creatorCode  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(creatorCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(creatorCode);	  addingRoot.addChildToBack(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  creatorCode	70	None	replace
749	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToBack(reduction,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(reduction,  contributingRoot);	  AddingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	41	None	replace
750	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(reducing);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reducing);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	16	None	replace
751	[BUG]  [BUGGY]  AddingRoot.addChildToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildToFront(creator);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(creator);	  AddingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	16	None	replace
752	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(adjustingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  AddingRoot.addChildrenToFront(adjustingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(adjustingRoot);	  AddingRoot.addChildrenToFront(growingRoot);    	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	47	None	replace
753	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducingr,  reductions);  [CE]  cannot  find  symbol  reducingr  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducingr,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducingr,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducingr	122	None	replace
754	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducings,  contributingRoot);  [CE]  cannot  find  symbol  reducings  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducings,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducings,  contributingRoot);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	122	None	replace
755	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducings,  reductions);  [CE]  cannot  find  symbol  reducings  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reducings,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reducings,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	122	None	replace
756	[BUG]  [BUGGY]  addingRoot.addChildToFront(reductions,  reductions);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reductions,  reductions);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reductions,  reductions);	  addingRoot.addChildToFront(adjustedRoot,    reductions);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	122	None	replace
757	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  helpingCode);  [CE]  cannot  find  symbol  helpingCode  [FE]                      AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeUtil.removeChild(addingRoot,  helpingCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeUtil.removeChild(addingRoot,  helpingCode);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  helpingCode	26	None	replace
758	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  pruningRoot);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,  pruningRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  pruningRoot);	  addingRoot.addChildToFront(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
759	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helpingerCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reduction,  helpingerCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reduction,  helpingerCodeCost));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
760	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  HelperCodeCost));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  HelperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reductions,  HelperCodeCost));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	11	None	replace
761	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  helperCode));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)  [FE]                                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(new  Node(reductions,  helperCode));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(reductions,  helperCode));	  addingRoot.addChildToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)	11	None	replace
762	[BUG]  [BUGGY]  addingRoot.replaceChild(null,  eliminatingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]    NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(null,  eliminatingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(null,  eliminatingRoot);	  addingRoot.removeChild(null);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	35	None	replace
763	[BUG]  [BUGGY]  addingRoot.replaceChild(null,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]      NullPointerException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.replaceChild(null,  savingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.replaceChild(null,  savingRoot);	  addingRoot.removeChild(null);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	35	None	replace
764	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]        AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	18	None	replace
765	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot);	          NodeTraversal.traverse(compiler,    addingRoot,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
766	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToFront(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToFront(addingRoot,  addingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildToFront(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
767	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatorCode);  [CE]  cannot  find  symbol  creatorCode  [FE]            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(creatorCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatorCode);	  addingRoot.addChildrenToFront(savedRoot);    	non-compiled	[CE]  cannot  find  symbol  creatorCode	129	None	replace
768	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(rereducing);  [CE]  cannot  find  symbol  rereducing  [FE]                IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(rereducing);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(rereducing);	  addingRoot.addChildrenToBack(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  rereducing	81	None	replace
769	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,reducings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(reduction,reducings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,reducings);	  addingRoot.addChildToFront(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	123	None	replace
770	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  HelperCodeCost));  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  HelperCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reductions,  HelperCodeCost));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	64	None	replace
771	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  helperCode));  [CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)  [FE]                          IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reductions,  helperCode));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reductions,  helperCode));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Collection<FunctionRewriter.Reduction>,Node)	64	None	replace
772	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helpingerCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(reduction,  helpingerCodeCost));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(reduction,  helpingerCodeCost));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
773	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(tokens,  reductions));  [CE]  cannot  find  symbol  tokens  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(new  Node(tokens,  reductions));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(tokens,  reductions));	  addingRoot.addChildrenToFront(new    Node(helperCodeCost,    reductions));    	non-compiled	[CE]  cannot  find  symbol  tokens	64	None	replace
774	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  savingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  savingRoot  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  savingRoot.addChildToFront(helperCode);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    savingRoot.addChildToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  savingRoot	87	None	add
775	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Savings.checkState(reduction.getType()  ==  Token.COST);	  	non-compiled	[CE]  cannot  find  symbol  reduction	87	None	add
776	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToFront(helperCode);  Savings.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);    Savings.checkState(reduction.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  reduction	87	None	add
777	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToBack(new    Node(helperCodeCost));    Node  helpingCodeCost  =  addingRoot.getParent();	  	compilable	  [FE]  IllegalStateException  	68	9	add
778	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Node  helpingCodeCost  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    Node  helpingCodeCost  =  addingRoot.getParent();	  	compilable	  [FE]  IllegalStateException  	68	9	add
779	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  Savings.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new    Node(helperCodeCost));    Savings.checkState(reduction.getType()  ==  Token.COST);	  	non-compiled	[CE]  cannot  find  symbol  reduction	68	None	add
780	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  reduction);  [CE]  cannot  find  symbol  reducings  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  reduction);	  addingRoot.addChildrenToFront(allReductions,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	120	None	replace
781	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  saving);  [CE]  cannot  find  symbol  reducings  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  saving);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  saving);	  addingRoot.addChildrenToFront(allReductions,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	120	None	replace
782	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  pruningRoot  [FE]          AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  new  ReductionGatherer());  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  reduction,  new  ReductionGatherer());	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	86	None	replace
783	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer(),  reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]            AssertionFailedError      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer(),  reduction);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  eliminatingRoot,  new  ReductionGatherer(),  reduction);	          NodeTraversal.traverse(compiler,    addingRoot,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	86	None	replace
784	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  replacingRoot.removeChild(externs);  [CE]  cannot  find  symbol  replacingRoot  [FE]    RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  replacingRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    replacingRoot.removeChild(externs);	  	non-compiled	[CE]  cannot  find  symbol  replacingRoot	91	None	add
785	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  pruningRoot.removeChild(externs);  [CE]  cannot  find  symbol  pruningRoot  [FE]      RuntimeException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.removeChild(externs);  pruningRoot.removeChild(externs);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);    pruningRoot.removeChild(externs);	  	non-compiled	[CE]  cannot  find  symbol  pruningRoot	91	None	add
786	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  helping);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  helping);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  helping);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
787	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  eliminating);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(reduction,  eliminating);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  eliminating);	  addingRoot.addChildrenToBack(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
788	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  savingRoot));  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToBack(new  Node(reduction,  savingRoot));  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(reduction,  savingRoot));	  addingRoot.addChildrenToBack(new    Node(helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
789	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducings,  root);  [CE]  cannot  find  symbol  reducings  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reducings,  root);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducings,  root);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducings	63	None	replace
790	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruningRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruningRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  pruningRoot);	  addingRoot.addChildrenToFront(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
791	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruningRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  pruningRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  pruningRoot,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
792	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  reduction,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reduction,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
793	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminatingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,  eliminatingRoot,  savings);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  eliminatingRoot,  savings);	  addingRoot.addChildrenToFront(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
794	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,reducing);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction,reducing);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,reducing);	  addingRoot.addChildrenToFront(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
795	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(null);  Node  externs  =  addingRoot.getParent();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(null);  Node  externs  =  addingRoot.getParent();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(null);  Node  externs  =  addingRoot.getParent();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	99	None	replace
796	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getNext();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getNext();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getNext();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getParent();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	99	None	replace
797	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getFirstChild();  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs,  root);  Node  externs  =  addingRoot.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	97	None	replace
798	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  root.getFirstChild();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]            IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  root.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);  Node  externs  =  root.getFirstChild();	  addingRoot.addChildrenToFront(externs);    Node    externs    =    addingRoot.getFirstChild();    	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	97	None	replace
799	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException      [CONTEXT]      }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);      [BUGGY]  addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [BUGGY]      compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction);  NodeTraversal.traverse(compiler,  root,  contributingRoot);	  addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	96	None	replace
