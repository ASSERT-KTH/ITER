bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reduction);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
2	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reductions);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
3	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  contributingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  contributingRoot);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
4	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  saving);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  saving);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
5	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  helperCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  helperCodeCost);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
6	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  helpingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  helpingRoot);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
7	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(reduction,  savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  savings);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
8	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(root,  savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  savings);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
9	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reductions);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(root,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reductions);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
10	[BUG]  [BUGGY]  addingRoot.addChildToFront(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(root,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root,  reduction);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
11	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reductions));	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	6	None	replace
12	[BUG]  [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
13	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCodeCost);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
14	[BUG]  [BUGGY]  addingRoot.addChildToFront(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(saverCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(saverCodeCost);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	2	None	replace
15	[BUG]  [BUGGY]  addingRoot.addChildToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(problemCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(problemCodeCost);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	2	None	replace
16	[BUG]  [BUGGY]  AddingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildToFront(reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToFront(reduction);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
17	[BUG]  [BUGGY]  addingRoot.addChildToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(saver);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(saver);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	2	None	replace
18	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  addingRoot,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	add
19	[BUG]  [BUGGY]      NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]      AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	8	None	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	        NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	8	9	add
21	[BUG]  [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	8	9	add
22	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]          AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  addingRoot,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	8	None	add
23	[BUG]  [BUGGY]      Node  helperCodeCost  =  addingRoot.getParent();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      Node  helperCodeCost  =  addingRoot.getParent();  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        Node  helperCodeCost  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	8	None	add
24	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]              AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	8	None	add
25	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  reduction,  savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  addingRoot,  reduction,  savings);	  	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	add
26	[BUG]  [BUGGY]      NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeUtil.removeChild(addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	8	None	add
27	[BUG]  [BUGGY]  addingRoot.removeChild(helperCodeCost);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(helperCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCodeCost);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(helperCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(helperCode);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
29	[BUG]  [BUGGY]  addingRoot.removeChild(helperCode);  [FE]  RuntimeException  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(helperCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(helperCode);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(root);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
31	[BUG]  [BUGGY]  addingRoot.removeChild(root);  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(root);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
32	[BUG]  [BUGGY]  addingRoot.removeChild(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(problemCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(problemCodeCost);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	14	None	replace
33	[BUG]  [BUGGY]  addingRoot.removeChild(saving);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(saving);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(saving);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	14	None	replace
34	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(null);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(null);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  NullPointerException  	14	9	replace
35	[BUG]  [BUGGY]  addingRoot.removeChild(null);  [FE]  NullPointerException  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(null);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(null);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  NullPointerException  	14	9	replace
36	[BUG]  [BUGGY]  addingRoot.addChildToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(creatingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(creatingRoot);	  addingRoot.addChildToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	15	None	replace
37	[BUG]  [BUGGY]  addingRoot.addChildToFront(reductions);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reductions);	  addingRoot.addChildToFront(reducing);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
38	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(savedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(savedRoot);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	12	None	replace
39	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
40	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(reduction,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reduction,  reduction);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
41	[BUG]  [BUGGY]  AddingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToBack(reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToBack(reduction);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
42	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  addingRoot.addChildrenToBack(reduction);    	compilable	  [FE]  IllegalStateException  	12	9	replace
43	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(new  Node(helperCodeCost));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(new  Node(helperCodeCost));	  addingRoot.addChildrenToBack(reduction);    	compilable	  [FE]  IllegalStateException  	12	9	replace
44	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(savings);  [CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(savings);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  method  addChildrenToBack  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
45	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(creatingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creatingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	4	None	replace
46	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addingRoot);  [CE]  cannot  find  symbol  AddingRoot  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  AddingRoot	4	None	replace
47	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(growingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(growingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	4	None	replace
48	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(reduction,  savingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  savingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
49	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(reduction,  addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reduction,  addingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
50	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reductions);	  addingRoot.addChildrenToFront(reducing);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
51	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(creatingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creatingRoot);	  addingRoot.addChildrenToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	13	None	replace
52	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(problemCodeCost);	  addingRoot.addChildrenToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	13	None	replace
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	10	9	add
54	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  addingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    addingRoot.addChildrenToFront(externs);	  	compilable	  [FE]  IllegalArgumentException  	10	9	add
55	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  AddingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  AddingRoot  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  AddingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    AddingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  AddingRoot	10	None	add
56	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  eliminatingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]        IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  eliminatingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    eliminatingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	10	None	add
57	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]          IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	10	None	add
58	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]            IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reductions);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	10	None	add
59	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeUtil.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeUtil.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
60	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reduction);  addingRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	add
61	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reductions);  addedRoot.addChildrenToFront(externs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	10	None	add
62	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(root,  savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  savings);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
63	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reductions);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(root,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reductions);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
64	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(new  Node(helperCodeCost,  reductions));	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	5	None	replace
65	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(root,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root,  reduction);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
66	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reductions);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(adjustedRoot,  reductions);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	5	None	replace
67	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reduction));	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToBack(new  Node(helperCodeCost));	  addingRoot.addChildToBack(reduction);    	compilable	  [FE]  IllegalStateException  	3	9	replace
69	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost));	  addingRoot.addChildToBack(reduction);    	compilable	  [FE]  IllegalStateException  	3	9	replace
70	[BUG]  [BUGGY]  addingRoot.addChildToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(savedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(savedRoot);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	3	None	replace
71	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions));  [CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions));  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost,  reductions));	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,Collection<FunctionRewriter.Reduction>)	3	None	replace
72	[BUG]  [BUGGY]  AddingRoot.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildToBack(reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildToBack(reduction);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
73	[BUG]  [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(new  Node(helperCodeCost),  reduction);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
74	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  externs);	  addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
75	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToFront(root);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  IllegalArgumentException  	11	9	replace
76	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(root);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(root);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  IllegalArgumentException  	11	9	replace
77	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  externs);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(reduction,  externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  externs);	  addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
78	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(saverCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(saverCodeCost);	  addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	1	None	replace
79	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(helperCodeCost);	  addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
80	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reducing);  [CE]  cannot  find  symbol  reducing  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(reducing);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(reducing);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	12	None	replace
81	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(creatingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(creatingRoot);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	12	None	replace
82	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(null);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildrenToBack(null);	  addingRoot.addChildrenToBack(reduction);    	compilable	  [FE]  NullPointerException  	12	9	replace
83	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(null);  [FE]  NullPointerException  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(null);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(null);	  addingRoot.addChildrenToBack(reduction);    	compilable	  [FE]  NullPointerException  	12	9	replace
84	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(saving);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(saving);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(saving);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	12	None	replace
85	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]    AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  new  GetterReducer());  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  addingRoot,  new  GetterReducer());	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	8	None	add
86	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      NodeTraversal.traverse(compiler,  addingRoot,  new  ReductionGatherer());  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        NodeTraversal.traverse(compiler,  addingRoot,  new  ReductionGatherer());	  	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	add
87	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(helperCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(helperCode);	  addingRoot.addChildToFront(reduction);    	compilable	  [FE]  IllegalStateException  	2	1	replace
88	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(helperCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(helperCode);	  addingRoot.addChildToFront(reduction);    	compilable	  [FE]  IllegalStateException  	2	1	replace
89	[BUG]  [BUGGY]  addingRoot.addChildToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(saving);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(saving);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	2	None	replace
90	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  helperCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  helperCode);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(externs);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  RuntimeException  	11	9	replace
92	[BUG]  [BUGGY]  addingRoot.removeChild(externs);  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(externs);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  RuntimeException  	11	9	replace
93	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(addedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(addedRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	4	None	replace
94	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(reducingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reducingRoot);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	4	None	replace
95	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creation);  [CE]  cannot  find  symbol  creation  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(creation);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creation);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creation	4	None	replace
96	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	add
97	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getFirstChild();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getFirstChild();  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    Node  externs  =  addingRoot.getFirstChild();	  	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	10	None	add
98	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeHelper.addChildrenToFront(externs);  [CE]  cannot  find  symbol  NodeHelper  [FE]        IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  NodeHelper.addChildrenToFront(externs);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    NodeHelper.addChildrenToFront(externs);	  	non-compiled	[CE]  cannot  find  symbol  NodeHelper	10	None	add
99	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getParent();  [CE]  variable  externs  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(externs);  Node  externs  =  addingRoot.getParent();  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(externs);    Node  externs  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  externs  is  already  defined  in  method  process(Node,Node)	10	None	add
100	[BUG]  [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  reduction);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(problemCodeCost,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(problemCodeCost,  reduction);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	6	None	replace
101	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reduction);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(adjustedRoot,  reduction);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	6	None	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.removeChild(addingRoot);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
103	[BUG]  [BUGGY]  addingRoot.removeChild(addingRoot);  [FE]  RuntimeException  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(addingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addingRoot);	  addingRoot.removeChild(reduction);    	compilable	  [FE]  RuntimeException  	14	9	replace
104	[BUG]  [BUGGY]  addingRoot.removeChild(adder);  [CE]  cannot  find  symbol  adder  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(adder);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adder);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  adder	14	None	replace
105	[BUG]  [BUGGY]  addingRoot.removeChild(adderCode);  [CE]  cannot  find  symbol  adderCode  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(adderCode);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(adderCode);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  adderCode	14	None	replace
106	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  reduction);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(problemCodeCost,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(problemCodeCost,  reduction);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	5	None	replace
107	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reduction);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(adjustedRoot,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(adjustedRoot,  reduction);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	5	None	replace
108	[BUG]  [BUGGY]  addingRoot.addChildToBack(saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(saving);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(saving);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	3	None	replace
109	[BUG]  [BUGGY]  addingRoot.addChildToBack(reducing);  [CE]  cannot  find  symbol  reducing  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(reducing);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(reducing);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	3	None	replace
110	[BUG]  [BUGGY]      Node  helperCode  =  addingRoot.getParent();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      Node  helperCode  =  addingRoot.getParent();  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        Node  helperCode  =  addingRoot.getParent();	  	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	add
111	[BUG]  [BUGGY]      Node  helperCode  =  addingRoot.getFirstChild();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      Node  helperCode  =  addingRoot.getFirstChild();  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        Node  helperCode  =  addingRoot.getFirstChild();	  	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	add
112	[BUG]  [BUGGY]      Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]      Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	        Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	add
113	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(reducing);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(reducing);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	4	None	replace
114	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  AddingRoot.addChildrenToFront(creator);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	AddingRoot.addChildrenToFront(creator);	  AddingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	4	None	replace
115	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(adjustedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(adjustedRoot);	  addingRoot.addChildToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	15	None	replace
116	[BUG]  [BUGGY]  addingRoot.addChildToFront(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(savedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(savedRoot);	  addingRoot.addChildToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	15	None	replace
117	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]              IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(adjustingRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(adjustingRoot);	  addingRoot.addChildToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	15	None	replace
118	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing,  savings);  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reducing,  savings);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reducing,  savings);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reducing	7	None	replace
119	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(reduction,  reducer);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(reduction,  reducer);	  addingRoot.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
120	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(allReductions,  reduction);  [CE]  cannot  find  symbol  allReductions  [FE]                IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(allReductions,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(allReductions,  reduction);	  addingRoot.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  allReductions	5	None	replace
121	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(reduction,  reduction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  reduction);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
122	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reductions);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                    IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(adjustedRoot,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(adjustedRoot,  reductions);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	6	None	replace
123	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(reduction,  reductions);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(reduction,  reductions);	  addingRoot.addChildToFront(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
124	[BUG]  [BUGGY]  addingRoot.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]    IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(addedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(addedRoot);	  addingRoot.addChildrenToFront(externs);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	11	None	replace
125	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	addingRoot.addChildToFront(root);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  IllegalArgumentException  	11	9	replace
126	[BUG]  [BUGGY]  addingRoot.addChildToFront(root);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(root);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(root);	  addingRoot.addChildrenToFront(externs);    	compilable	  [FE]  IllegalArgumentException  	11	9	replace
127	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(creator);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(creator);	  addingRoot.addChildrenToFront(reducing);    	non-compiled	[CE]  cannot  find  symbol  creator	13	None	replace
128	[BUG]  [BUGGY]  addingRoot.removeChild(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.removeChild(savedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.removeChild(savedRoot);	  addingRoot.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	14	None	replace
129	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]        IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToFront(savedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToFront(savedRoot);	  addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	1	None	replace
130	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(adjustedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(adjustedRoot);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	12	None	replace
131	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildrenToBack(rededuction);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildrenToBack(rededuction);	  addingRoot.addChildrenToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  rededuction	12	None	replace
132	[BUG]  [BUGGY]  addingRoot.addChildToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]            IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToBack(adjustedRoot);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToBack(adjustedRoot);	  addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	3	None	replace
133	[BUG]  [BUGGY]  addingRoot.addChildToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]          IllegalStateException    [CONTEXT]    }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);    [BUGGY]  addingRoot.addChildToFront(creator);  [BUGGY]    compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	addingRoot.addChildToFront(creator);	  addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	2	None	replace
