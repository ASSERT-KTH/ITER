bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    ||    i    <    len)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
2	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  c);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  quote  for  input,  c);  }	  if(c    ==    ''    ||    i    <    len)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
3	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  =  end)  {	  if(c    ==    ''    &&    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  char  c  =  input.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  char  c  =  input.charAt(i  +  1);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	char  c  =  input.charAt(i  +  1);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  char  c  =  input.charAt(0);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  char  c  =  input.charAt(0);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	char  c  =  input.charAt(0);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  String  c  =  input.charAt(i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  String  c  =  input.charAt(i);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	String  c  =  input.charAt(i);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
11	[BUG]  [BUGGY]  if(i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
12	[BUG]  [BUGGY]  if(i  >=  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >=  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >=  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
13	[BUG]  [BUGGY]  _matchingPropertyName.setLength(0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName.setLength(0);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName.setLength(0);	  _matchingPropertyName.append(c);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  _matchingPropertyName.append('/');  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName.append('/');  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName.append('/');	  _matchingPropertyName.append(c);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  _matchingPropertyName.append(c,  input);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName.append(c,  input);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName.append(c,  input);	  _matchingPropertyName.append(c);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
17	[BUG]  [BUGGY]  if(i  <  len  ||  c  ==  '')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len  ||  c  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len  ||  c  ==  '')  {	  if(i    <    end    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
18	[BUG]  [BUGGY]  if(i  <  end  &&  c  ==  '')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  &&  c  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  &&  c  ==  '')  {	  if(i    <    end    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
19	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  1);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(0,  i  +  1);	  _matchingPropertyName    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
21	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  2);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  2);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(0,  i  +  2);	  _matchingPropertyName    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
22	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  end);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(0,  end);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(0,  end);	  _matchingPropertyName    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
23	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c!=  't')  {	  if(c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
28	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  't'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c!=  't'  ||  c  ==  'r')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c!=  't'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
29	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
30	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'A')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'A')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
31	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '-')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '-')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if(c!=  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'e'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
35	[BUG]  [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
36	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  JsonPointer.QUOTE_FIELD_NAMES)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  JsonPointer.QUOTE_FIELD_NAMES)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  JsonPointer.QUOTE_FIELD_NAMES)  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
37	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  c);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  c);  }	  if(i    <    =    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
41	[BUG]  [BUGGY]  if(i  >=  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >=  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >=  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }	  if(i    <    =    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
42	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
43	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
44	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
46	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
47	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  len);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  len);	  _matchingPropertyName    =    input.substring(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  '/');  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  '/');  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  '/');  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/');  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/');  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  '/');  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  if(i  <  len)  {  return  _parseQuotedTail(input,  '/');  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  return  _parseQuotedTail(input,  '/');  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  return  _parseQuotedTail(input,  '/');  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  ==  '')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  ==  '')  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  ==  end)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  ==  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  ==  end)  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
53	[BUG]  [BUGGY]  if(i  ==  ''  &&  c  ==  '')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  ''  &&  c  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  ''  &&  c  ==  '')  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
54	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  =  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
55	[BUG]  [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
59	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
60	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
61	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i,  c);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i,  c);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i,  c);	  _matchingPropertyName    =    input.substring(i);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '.')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
63	[BUG]  [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '/'  ||  c  ==  '+')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
66	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
67	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  =  end)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  =  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  =  end)  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  len)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  len)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  len)  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
69	[BUG]  [BUGGY]  if(i  ==  'e'  ||  c  ==  'e'  ||  c  <  end)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  'e'  ||  c  ==  'e'  ||  c  <  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  'e'  ||  c  ==  'e'  ||  c  <  end)  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
70	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  c  ==  '')  {	  if(c    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '/')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  c  ==  '/')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  c  ==  '/')  {	  if(c    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  if(i  <  =  end  ||  c  ==  '')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  =  end  ||  c  ==  '')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  =  end  ||  c  ==  '')  {	  if(c    ==    ''    ||    i    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
73	[BUG]  [BUGGY]  if(i  ==  ''  ||  c  <  =  end)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  ''  ||  c  <  =  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  ''  ||  c  <  =  end)  {	  if(c    ==    ''    ||    i    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
74	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  c);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  _asString  =  input.substring(0,  i  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  i  +  1);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  i  +  1);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
77	[BUG]  [BUGGY]  _asString  =  input.substring(0,  i  +  2);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  i  +  2);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  i  +  2);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
78	[BUG]  [BUGGY]  _asString  =  input.substring(0,  end);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  end);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  end);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
79	[BUG]  [BUGGY]  _asString  =  input.substring(0,  i  +  1,  c);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  i  +  1,  c);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  i  +  1,  c);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
80	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c  +  1);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c  +  1);	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
81	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  _asString);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  _asString);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c,  _asString);	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
82	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  _nextSegment);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c,  _nextSegment);	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
83	[BUG]  [BUGGY]  if(i  <  len)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
84	[BUG]  [BUGGY]  if(i  >=  end)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >=  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >=  end)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
85	[BUG]  [BUGGY]  if(i  ==  end)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  end)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
86	[BUG]  [BUGGY]  if(i  <  =  end)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  =  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  =  end)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
87	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'a')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
89	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  '0')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  '0')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  '0')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
90	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
91	[BUG]  [BUGGY]  if(c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
92	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
95	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
96	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
97	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  3);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  3);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  3);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
98	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  'e')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  'e')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  'e')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
99	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  len)  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
100	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
101	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i  +  1);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  i  +  1);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  &&  i  <  len)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  &&  i  <  len)  {	  if(c    ==    ''    ||    i    <    len)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
104	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  >=  len)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  >=  len)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  >=  len)  {	  if(c    ==    ''    ||    i    <    len)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
105	[BUG]  [BUGGY]  if(i  >=  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >=  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >=  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  if(c  ==  '')  {  if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '')  {  if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '')  {  if(i  <  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
107	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  JsonPointer.DEFAULT_TITLE_FONT);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  JsonPointer.DEFAULT_TITLE_FONT);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  JsonPointer.DEFAULT_TITLE_FONT);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
109	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(i    <    end    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
110	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  'n'  ||  c  ==  't')  {	  if(i    <    end    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
111	[BUG]  [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  'e'  ||  c  ==  'E')  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
112	[BUG]  [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  'n'  ||  c  ==  'r')  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input  =  _parseQuotedTail(input,  c);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input  =  _parseQuotedTail(input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  //  possibly,  quote  quote  for  input  =  _parseQuotedTail(input,  c);  }	  if(i    <    =    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
115	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
116	[BUG]  [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c;  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  2);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  2);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  2);	  _matchingPropertyName    =    input.substring(i);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
118	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
119	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
120	[BUG]  [BUGGY]  if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
121	[BUG]  [BUGGY]  if(c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
122	[BUG]  [BUGGY]  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
123	[BUG]  [BUGGY]  if(i  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
124	[BUG]  [BUGGY]  _asString  =  input.substring(0,  i  +  3);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  i  +  3);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  i  +  3);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
125	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
126	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toLowerCase();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toLowerCase();  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toLowerCase();  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
127	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toCharArray();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toCharArray();  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  '/').toCharArray();  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
128	[BUG]  [BUGGY]  if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
129	[BUG]  [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  //  possibly,  quote  quote  for  input,  c);  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
130	[BUG]  [BUGGY]  if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  >=  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
132	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c)+  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c)+  1;  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c)+  1;	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
133	[BUG]  [BUGGY]  if(c  ==  '>')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '>')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '>')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
134	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
135	[BUG]  [BUGGY]  if(i  ==  'e'  ||  i  <  end)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  'e'  ||  i  <  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  'e'  ||  i  <  end)  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
136	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
137	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ':')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
138	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
139	[BUG]  [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i++);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  _parseQuotedTail(input,  i++);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  _parseQuotedTail(input,  i++);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
141	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'A'  ||  c  ==  'E')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
142	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
144	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  c  ==  '')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    ||    i    <    len)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
145	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
146	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
147	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c!=  'E')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c!=  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c!=  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
148	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
149	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  '9')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  '9')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
150	[BUG]  [BUGGY]  if(i  >  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  end)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
151	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  3);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  3);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(0,  i  +  3);	  _matchingPropertyName    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
152	[BUG]  [BUGGY]  _matchingPropertyName.append('n');  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName.append('n');  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName.append('n');	  _matchingPropertyName.append(c);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
153	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  end)  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
154	[BUG]  [BUGGY]  if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '')  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
155	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
156	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  =  'E')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  =  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  =  'E')  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
157	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  'e')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  'e')  {	  if(c    ==    'e'    ||    i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
158	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  11);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(0,  i  +  11);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(0,  i  +  11);	  _matchingPropertyName    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
159	[BUG]  [BUGGY]  if(i  <  end  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(i    <    end    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
160	[BUG]  [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
161	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'E'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
162	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  if(i  <  end)  {  return  input.substring(0,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  end)  {  return  input.substring(0,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  end)  {  return  input.substring(0,  i);  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
164	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input  type;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input  type;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  quote  for  input  type;  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
166	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
167	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    &&    i    <    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
168	[BUG]  [BUGGY]  if(i  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(i    ==    ''    ||    c    ==    '')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
169	[BUG]  [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  but  got  a  segment  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  but  got  a  segment  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  but  got  a  segment	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    c);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/');  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/');  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/');  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/';  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/';  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  <  len)  {  //  possibly,  quote  quote  for  input,  '/';  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
172	[BUG]  [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  '/';  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  '/';  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  0)  {  //  possibly,  quote  quote  in  the  input,  '/';  }	  if(i    <    end)    {    //    possibly,    quote    return    _parseQuotedTail(input,    '/');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
173	[BUG]  [BUGGY]  if(c  ==  'N'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'N'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'N'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
174	[BUG]  [BUGGY]  _asString  =  input.substring(0,  i  +  11);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _asString  =  input.substring(0,  i  +  11);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_asString  =  input.substring(0,  i  +  11);	  _asString    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
175	[BUG]  [BUGGY]  if(c  ==  'e'  ||  i  <  =  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'e'  ||  i  <  =  'E')  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'e'  ||  i  <  =  'E')  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    'e'    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
176	[BUG]  [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '/'  ||  c  ==  '*')  {  if(_matchingPropertyName!=  null)  {  return  EMPTY;  }	  if(c    ==    '/')    {    if(_matchingPropertyName!=    null)    {    return    EMPTY;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
177	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i;  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
178	[BUG]  [BUGGY]  if(i  >  0  ||  i  <  end)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  0  ||  i  <  end)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  0  ||  i  <  end)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
179	[BUG]  [BUGGY]  if(i  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  0)  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  0)  {	  if(i    <    end)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
180	[BUG]  [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
181	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'u'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'u'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    't'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
182	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  c);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c,  c);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c,  c);	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
183	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c).trim();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  c).trim();  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  c).trim();	  _matchingPropertyName    =    input.substring(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
184	[BUG]  [BUGGY]  c  =  _matchingPropertyName.charAt(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  c  =  _matchingPropertyName.charAt(i);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	c  =  _matchingPropertyName.charAt(i);	  _matchingPropertyName.append(c);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
185	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  end);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  end);  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  end);	  _matchingPropertyName    =    input.substring(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
186	[BUG]  [BUGGY]  if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  ''  ||  i  <  =  end)  {  //  possibly,  quote  quote  for  input,  i);  }	  if(c    ==    ''    ||    i    <    end)    {    //    possibly,    quote    quote    for    input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
187	[BUG]  [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'T'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(i  >  0)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(i  >  0)  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
189	[BUG]  [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  '/'  ||  c  ==  '*')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  '/'  ||  c  ==  '*')  {  //  possibly,  quote  quote  for  input  to  be  empty;  }	  if(c    ==    ''    &&    i    <    end)    {    //    possibly,    quote    quote    for    input    to    be    empty;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
190	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        for  (int  i  =  1;  i  <  end;  )  {  char  c  =  input.charAt(i);  if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;        [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      return  _parseQuotedTail(input,  i);  }  }  return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	219	220	1	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c!=    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
