bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  char  c  =  input.charAt(i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  char  c  =  input.charAt(i);  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	char  c  =  input.charAt(i);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  if(i  <  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  c));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  c));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  c));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  while(c  ==  '')  {  input  =  input.substring(0,  i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  while(c  ==  '')  {  input  =  input.substring(0,  i);  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(c  ==  '')  {  input  =  input.substring(0,  i);	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }      [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]      return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
