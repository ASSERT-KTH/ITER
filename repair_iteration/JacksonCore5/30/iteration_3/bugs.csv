bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(0,    i)));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(0,    i)));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(0,    i)));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
14	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
15	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  while(i  <  end)  {  input  =  input.substring(0,  i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  end)  {  input  =  input.substring(0,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  end)  {  input  =  input.substring(0,  i);	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
19	[BUG]  [BUGGY]  pendSegment(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  pendSegment(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	pendSegment(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
20	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(input,  i,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMismatch(input,  i,  _matchingPropertyName);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMismatch(input,  i,  _matchingPropertyName);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
21	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingPropertyName(input,  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMissingPropertyName(input,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMissingPropertyName(input,  i);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
22	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMissingException( " ");	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingPropertyName(input);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMissingPropertyName(input);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMissingPropertyName(input);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
24	[BUG]  [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
25	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
26	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _matchingPropertyName);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
27	[BUG]  [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    input.length())    {    if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    input.length())    {    if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  input.length())  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  while(i    <    input.length())    {    if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
33	[BUG]  [BUGGY]  while(i!=  end)  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i!=  end)  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i!=  end)  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
35	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
36	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
37	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
38	[BUG]  [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
39	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
40	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
41	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  while(i  >=  end)  {  input  =  input.substring(0,  i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  >=  end)  {  input  =  input.substring(0,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  >=  end)  {  input  =  input.substring(0,  i);	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i));  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  while(i  ==  '')  {  input  =  input.substring(0,  i);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  ==  '')  {  input  =  input.substring(0,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  ==  '')  {  input  =  input.substring(0,  i);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  c),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  c),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  c),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    end),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
48	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
50	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
51	[BUG]  [BUGGY]  if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
52	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
53	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
54	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
55	[BUG]  [BUGGY]  if(i  ==  end  ||  c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end  ||  c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end  ||  c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
56	[BUG]  [BUGGY]  if(i  ==  end  ||  c  ==  'e')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end  ||  c  ==  'e')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end  ||  c  ==  'e')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
57	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
58	[BUG]  [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
59	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
60	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
66	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
67	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
68	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
69	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  &&  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
70	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
71	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
73	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
74	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
75	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
77	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
78	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
79	[BUG]  [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
82	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
83	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
84	[BUG]  [BUGGY]  if(c  ==  'n')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  if(c  ==  '.')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '.')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '.')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
88	[BUG]  [BUGGY]  if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
90	[BUG]  [BUGGY]  if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
92	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
93	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
94	[BUG]  [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
95	[BUG]  [BUGGY]  String  c  =  input.charAt(i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  String  c  =  input.charAt(i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	String  c  =  input.charAt(i);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  char  c  =  input.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  char  c  =  input.charAt(i  +  1);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	char  c  =  input.charAt(i  +  1);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  char  c  =  input.charAt(i++);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  char  c  =  input.charAt(i++);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	char  c  =  input.charAt(i++);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(2,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
99	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName(input.substring(i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(input,  i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMissingValue(input,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMissingValue(input,  i);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    c));    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(input,  i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  aughtExceptionHandler.handleMatcher(input,  i);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	aughtExceptionHandler.handleMatcher(input,  i);	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    c));    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  c));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  c));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  c));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
104	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
105	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName(input.substring(0,  i)));  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
106	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
107	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
108	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    >=    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
109	[BUG]  [BUGGY]  while(i  ==  '')  {  input  =  input.substring(0,  c);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  ==  '')  {  input  =  input.substring(0,  c);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  ==  '')  {  input  =  input.substring(0,  c);	  while(c    ==    '')    {    input    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
110	[BUG]  [BUGGY]  while(c  ==  '')  {  input  =  input.substring(0,  i  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(c  ==  '')  {  input  =  input.substring(0,  i  +  1);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(c  ==  '')  {  input  =  input.substring(0,  i  +  1);	  while(c    ==    '')    {    input    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  while(i!=  '')  {  input  =  input.substring(0,  c);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i!=  '')  {  input  =  input.substring(0,  c);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i!=  '')  {  input  =  input.substring(0,  c);	  while(c    ==    '')    {    input    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    c);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
114	[BUG]  [BUGGY]  if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i!=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    c);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
115	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    c);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
116	[BUG]  [BUGGY]  if(c  ==  '')  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingElementIndex);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingElementIndex);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if(i  ==  _matchingPropertyName)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingElementIndex);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    c);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
118	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
119	[BUG]  [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
120	[BUG]  [BUGGY]  if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    >=    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
124	[BUG]  [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    >=    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
125	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
126	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
127	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(i    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
129	[BUG]  [BUGGY]  if(i  >  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
130	[BUG]  [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
131	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
132	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  end),  _matchingPropertyName);  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    end),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
133	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
134	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
135	[BUG]  [BUGGY]  if(c  ==  '')  {  int  len  =  input.length();  if(len  <  end)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  int  len  =  input.length();  if(len  <  end)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  int  len  =  input.length();  if(len  <  end)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
136	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
137	[BUG]  [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
138	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
139	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }	  if(i    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
140	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
141	[BUG]  [BUGGY]  pendSegment(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  pendSegment(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	pendSegment(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    ==    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
142	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i  +  1)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
144	[BUG]  [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
145	[BUG]  [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if('')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
146	[BUG]  [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
147	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(0,    i)));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(0,    i)));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
149	[BUG]  [BUGGY]  if(i  ==  _matchingElementIndex)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  _matchingElementIndex)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  _matchingElementIndex)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
150	[BUG]  [BUGGY]  if(i  ==  _matchingElement)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  _matchingElement)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  _matchingElement)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
151	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
152	[BUG]  [BUGGY]  pendSegment(i)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  pendSegment(i)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	pendSegment(i)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
153	[BUG]  [BUGGY]  while(i  >=  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  >=  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  >=  end)  {  if(c  ==  '')  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
154	[BUG]  [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
155	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
156	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  EMPTY);  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
157	[BUG]  [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  len)  {  if(c  ==  '')  {  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  while(i    <    end)    {    if(c    ==    '')    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
158	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
159	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  if(c    ==    ''    &&    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
160	[BUG]  [BUGGY]  if(i  ==  end)  {  if(''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  end)  {  if(''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  end)  {  if(''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
161	[BUG]  [BUGGY]  char  c  =  input.charAt(0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  char  c  =  input.charAt(0);  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	char  c  =  input.charAt(0);	  char    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
162	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
163	[BUG]  [BUGGY]  if(c  ==  ':')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  ':')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  ':')  {  int  len  =  input.length();  if(len  <  len)  {  return  new  JsonPointer(input,  len);  }	  if(c    ==    '')    {    int    len    =    input.length();    if(len    <    len)    {    return    new    JsonPointer(input,    len);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
164	[BUG]  [BUGGY]  if(i  >=  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  len)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
165	[BUG]  [BUGGY]  if(i  <  len)  {  if(''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
166	[BUG]  [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
167	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _asString);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
168	[BUG]  [BUGGY]  if(i  ==  '')  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  if(c  ==  ''  ||  c  ==  '')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
169	[BUG]  [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  'n'  ||  c  ==  'r')  {  input  =  input.substring(0,  i);  return  new  JsonPointer(input,  input.substring(1,  i));  }	  if(c    ==    ''    ||    c    ==    '')    {    input    =    input.substring(0,    i);    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
170	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
171	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _matchingPropertyName);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
172	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  EMPTY);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  EMPTY);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(1,  i),  EMPTY);  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
173	[BUG]  [BUGGY]  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(0,  i),  _matchingPropertyName);  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(0,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
174	[BUG]  [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  end)  {  if(c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i));  }	  while(i    <    input.length())    {    if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
175	[BUG]  [BUGGY]  while(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  while(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	while(i  <  end)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i));  }	  while(i    <    input.length())    {    if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(0,    i));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
176	[BUG]  [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  c));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  c));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  c));  }	  if(c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i));    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
177	[BUG]  [BUGGY]  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
178	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(0,  i),  c);  }	  if(i    ==    _matchingPropertyName)    {    return    new    JsonPointer(input,    input.substring(0,    i),    c);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
179	[BUG]  [BUGGY]  if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  if(i  <  len)  {  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  if(i  >  0)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  len)  {  if(i  <  end)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(0,  i)));  }	  if(i    <    len)    {    if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
182	[BUG]  [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >=  end)  {  return  new  JsonPointer(input,  input.substring(1,  i  +  1),  _matchingPropertyName);  }	  if(i    >=    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  if(i  ==  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  ==  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  ==  len)  {  if('')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
184	[BUG]  [BUGGY]  if(c  ==  '')  {  if('>')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  '')  {  if('>')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  '')  {  if('>')  {  return  new  JsonPointer(input,  input.substring(0,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    if('')    {    return    new    JsonPointer(input,    input.substring(0,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
185	[BUG]  [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  <  len)  {  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }	  if(i    <    end)    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
186	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(i)));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(i)));  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  new  JsonPointer(input,  input.substring(2,  i),  _parseTail(input.substring(i)));  }	  if(c    ==    'e'    ||    c    ==    'E')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _parseTail(input.substring(i)));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
187	[BUG]  [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }        [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }  [BUGGY]        return  new  JsonPointer(input,  input.substring(1),  EMPTY);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	223	223	1	replace	if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  new  JsonPointer(input,  input.substring(1,  i),  _matchingPropertyName);  }	  if(i    ==    end)    {    if(c    ==    ''    ||    c    ==    '')    {    return    new    JsonPointer(input,    input.substring(1,    i),    _matchingPropertyName);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
