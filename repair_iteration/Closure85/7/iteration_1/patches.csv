bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	9	None	replace
2	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	9	None	replace
5	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
6	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
7	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
8	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
9	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	8	None	replace
11	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode));  [CE]  cannot  find  symbol  outCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol  outCfgNode	8	None	replace
12	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
13	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  ')'  expected	4	None	replace
14	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
15	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
16	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
17	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
18	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
19	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  first);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  first);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
20	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first));  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
21	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  cfgStack));  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	5	None	replace
22	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
23	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	5	None	replace
24	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	5	None	replace
25	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	5	None	replace
26	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack));  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
27	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
28	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	6	None	replace
29	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
30	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	6	None	replace
31	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
32	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next));  [CE]  cannot  find  symbol  next  [FE]                            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  cannot  find  symbol  next	6	None	replace
33	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();	      	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
34	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  fallThrough  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
35	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);	      	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
36	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [CE]  cannot  find  symbol  fallThrough  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
37	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  cannot  find  symbol  fallThrough  [FE]                            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getLastChild();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
38	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  fallThrough  [FE]                              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
39	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  cannot  find  symbol  fallThrough  [FE]                                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getNext();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
40	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  'void'  type  not  allowed  here	3	None	replace
41	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	3	None	replace
44	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  first));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  first));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
46	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
47	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));  [CE]  cannot  find  symbol  first  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  first	1	None	replace
48	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
49	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	1	None	replace
50	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
51	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
52	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack);  [CE]  cannot  find  symbol  curCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	2	None	replace
53	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
54	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack);  [CE]  cannot  find  symbol  cfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	2	None	replace
55	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	2	None	replace
56	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  rootNode	2	None	replace
57	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
58	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek()));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek()));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
59	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
60	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack.peek());  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	10	None	replace
61	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	10	None	replace
62	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
63	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek());  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  first	10	None	replace
64	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	2	None	replace
65	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack);  [CE]  cannot  find  symbol  rootNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  rootNode	2	None	replace
66	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [CE]  cannot  find  symbol  fallThrough  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  outEdges.get(0).getDestination().getValue();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDestination().getValue();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
67	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                      AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	      	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	7	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
69	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  fallThrough  [FE]                          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  outEdges.get(1).getDestination().getValue();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDestination().getValue();	      	non-compiled	[CE]  cannot  find  symbol  fallThrough	7	None	replace
70	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination();  [CE]  incompatible  types  [FE]                            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  first  =  outEdges.get(0).getDestination();  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDestination();	      	non-compiled	[CE]  incompatible  types	7	None	replace
71	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
72	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
73	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
74	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack.peek());  [CE]  cannot  find  symbol  root  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  root	10	None	replace
75	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack.peek());  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
76	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  nextCfgNode);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	10	None	replace
77	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
78	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
79	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	5	None	replace
80	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough));  [CE]  cannot  find  symbol  failThrough  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  failThrough	5	None	replace
81	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	6	None	replace
82	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse));  [CE]  cannot  find  symbol  collapse  [FE]                    AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first));    	non-compiled	[CE]  cannot  find  symbol  collapse	6	None	replace
83	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
84	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
85	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
86	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
87	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  first));  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  first));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol  first	9	None	replace
88	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  nextCfgNode);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	2	None	replace
89	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack);  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	2	None	replace
90	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	4	None	replace
91	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  outEdges);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
92	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
93	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	5	None	replace
94	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	5	None	replace
95	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
96	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	10	None	replace
97	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);    [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n);  [BUGGY]    Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
