bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgNode));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
2	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack));  [CE]  cannot  find  symbol  curCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	23	None	replace
3	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  cfgStack));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	23	None	replace
4	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	23	None	replace
5	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
6	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  gNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  gNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
7	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	53	None	replace
8	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	53	None	replace
9	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  gNode,  cfgStack);  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  gNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	53	None	replace
10	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	53	None	replace
11	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  null);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  null);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  null);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
12	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
13	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  first);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
14	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  curCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
15	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
16	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	17	None	replace
17	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	17	None	replace
18	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode,  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	17	None	replace
19	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	17	None	replace
20	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges,  first);  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	17	None	replace
21	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	17	None	replace
22	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	17	None	replace
23	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	89	None	replace
24	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	89	None	replace
25	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack);  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  last	89	None	replace
26	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	89	None	replace
27	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	89	None	replace
28	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	89	None	replace
29	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getDestination()).getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getDestination()).getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
30	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination(),  n.getValue();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDestination(),  n.getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDestination(),  n.getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	69	None	replace
31	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDeadExprStatement().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDeadExprStatement().getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
32	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDeestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDeestination().getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
33	[BUG]  [BUGGY]  Node  first  =  outEdges.get(2).getDestination().getValue();  [CE]  cannot  find  symbol  fallThrough  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(2).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(2).getDestination().getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	69	None	replace
34	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(curCfgNode,  n,  cfgStack));  [CE]  cannot  find  symbol  curCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(curCfgNode,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(curCfgNode,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first,    n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	26	None	replace
35	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  firstCfgNode,  cfgStack));  [CE]  cannot  find  symbol  firstCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  firstCfgNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  firstCfgNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first,    n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	26	None	replace
36	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(last,  n,  cfgStack));  [CE]  cannot  find  symbol  last  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(last,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(last,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first,    n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  last	26	None	replace
37	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(n));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
38	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  cfgStack);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
39	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  n);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
40	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  gNode);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  gNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  gNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
41	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(n));  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
42	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  fallThrough);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
43	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges.get(n));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges.get(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges.get(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
44	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  outEdges);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
45	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  curCfgNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
46	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  rootNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
47	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  first);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
48	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
49	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  outEdges);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
50	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
51	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	57	None	replace
52	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  outEdges.peek());  [CE]  cannot  find  symbol  curCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  curCfgNode,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	57	None	replace
53	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  outEdges.peek());  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol  root	57	None	replace
54	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
55	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgStack.peek());  [CE]  cannot  find  symbol  curCfgStack  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	57	None	replace
56	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	27	None	replace
57	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	27	None	replace
58	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	27	None	replace
59	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));  [CE]  cannot  find  symbol  cfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	27	None	replace
60	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	27	None	replace
61	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	27	None	replace
62	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
63	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDestination(n));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDestination(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDestination(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
64	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  first));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol  first	2	None	replace
65	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDestination(n));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDestination(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDestination(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
66	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  n));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
67	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  incompatible  types	70	None	replace
68	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination(),  n);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination(),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDestination(),  n);	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  ';'  expected	70	None	replace
69	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDeadExprStatement();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDeadExprStatement();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDeadExprStatement();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
70	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getFirstChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getFirstChild();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
71	[BUG]  [BUGGY]  Node  first  =  n.getDestination();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
72	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDeestination();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDeestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDeestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
73	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	94	None	replace
74	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges));  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	94	None	replace
75	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	94	None	replace
76	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges));  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	94	None	replace
77	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	94	None	replace
78	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	94	None	replace
79	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges));  [CE]  cannot  find  symbol  rootNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  rootNode	94	None	replace
80	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	60	None	replace
81	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	60	None	replace
82	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack.peek());  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  first	60	None	replace
83	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack.peek());  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	60	None	replace
84	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges.peek());  [CE]  cannot  find  symbol  cfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  cfgNode	60	None	replace
85	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack.peek());  [CE]  cannot  find  symbol  rootNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  rootNode	60	None	replace
86	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  fallThrough  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	36	None	replace
87	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [CE]  cannot  find  symbol  fallThrough  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	36	None	replace
88	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  n.getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  n.getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
89	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
90	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  firstCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  firstCfgNode);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	36	None	replace
91	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  first);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  first	1	None	replace
92	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	1	None	replace
93	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  firstCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	1	None	replace
94	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	1	None	replace
95	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	1	None	replace
96	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	1	None	replace
97	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  secondCfgNode);  [CE]  cannot  find  symbol  secondCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  secondCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  secondCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  secondCfgNode	1	None	replace
98	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	55	None	replace
99	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downCfgNode);  [CE]  cannot  find  symbol  downCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  cannot  find  symbol  downCfgNode	55	None	replace
100	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  null);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  null);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	55	None	replace
101	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootCfgNode);  [CE]  cannot  find  symbol  rootCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    rootNode);    	non-compiled	[CE]  cannot  find  symbol  rootCfgNode	56	None	replace
102	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
103	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
104	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges));  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	31	None	replace
105	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	31	None	replace
106	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  outEdges));  [CE]  cannot  find  symbol  cfgNode  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	31	None	replace
107	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  outEdges));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	31	None	replace
108	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  first));  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol  first	8	None	replace
109	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	8	None	replace
110	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	8	None	replace
111	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
112	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  cfgStack);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
113	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	8	None	replace
114	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  first));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  cannot  find  symbol  first	93	None	replace
115	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  first,  n));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  first,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  first,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  cannot  find  symbol  first	93	None	replace
116	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	93	None	replace
117	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  rootNode));  [CE]  cannot  find  symbol  rootNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  rootNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  rootNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  cannot  find  symbol  rootNode	93	None	replace
118	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	93	None	replace
119	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	93	None	replace
120	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
121	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  removeNoOpStatements);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  removeNoOpStatements);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  removeNoOpStatements);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
122	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  first);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
123	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
124	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  n));	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
125	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
126	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.get(0));	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
127	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.size()  -  1);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.size()  -  1);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges.size()  -  1);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
128	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first,  n);  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first,  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first,  n);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol  first	6	None	replace
129	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  nextCfgNode);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	6	None	replace
130	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  ')'  expected	77	None	replace
131	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	77	None	replace
132	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  n,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
133	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	77	None	replace
134	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  nextCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	77	None	replace
135	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	77	None	replace
136	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
137	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  removeDeadExprStatementSafely(n));  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  removeDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  removeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
138	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeCfgNode(n));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeCfgNode(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeCfgNode(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
139	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  curCfgNode,  removeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  curCfgNode,  removeDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  curCfgNode,  removeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	40	None	replace
140	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  cfgStack);  [CE]  'void'  type  not  allowed  here  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
141	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatements(n));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatements(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatements(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
142	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  removeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  removeDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  removeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	40	None	replace
143	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  fallThrough);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
144	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  fallThrough);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	64	None	replace
145	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	64	None	replace
146	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  ')'  expected	64	None	replace
147	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack),  fallThrough);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	64	None	replace
148	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  cannot  find  symbol  first	64	None	replace
149	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
150	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	81	None	replace
151	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
152	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	81	None	replace
153	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));  [CE]  cannot  find  symbol  cfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	81	None	replace
154	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgNode));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	81	None	replace
155	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	81	None	replace
156	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	81	None	replace
157	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(0));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(0));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(0));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
158	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
159	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(1));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  outEdges.get(1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
160	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
161	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
162	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.getFirst());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.getFirst());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.getFirst());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
163	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
164	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last));  [CE]  cannot  find  symbol  last  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    next));    	non-compiled	[CE]  cannot  find  symbol  last	32	None	replace
165	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second));  [CE]  cannot  find  symbol  second  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    next));    	non-compiled	[CE]  cannot  find  symbol  second	32	None	replace
166	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  outEdges);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
167	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
168	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  cfgStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
169	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	83	None	replace
170	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	83	None	replace
171	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	72	None	replace
172	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  noOpStatements));  [CE]  cannot  find  symbol  noOpStatements  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  noOpStatements));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  noOpStatements));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	72	None	replace
173	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  rootNode));  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  rootNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  rootNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  rootNode	72	None	replace
174	[BUG]  [BUGGY]  Node  first  =  n.getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getDestination().getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
175	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDeestination().getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
176	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDestination(),  n.getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDestination(),  n.getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDestination(),  n.getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
177	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n).getDestination().getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	66	None	replace
178	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	91	None	replace
179	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	91	None	replace
180	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	91	None	replace
181	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
182	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges);  [CE]  cannot  find  symbol  cfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	91	None	replace
183	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  firstCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	88	None	replace
184	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  edge);  [CE]  cannot  find  symbol  edge  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  edge);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  edge);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  edge	88	None	replace
185	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
186	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  nextCfgNode);  [CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  removeDeadExprStatementSafely(n,  nextCfgNode);	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  method  removeDeadExprStatementSafely  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	35	None	replace
187	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
188	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(n);  [CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  variable  nextCfgNode  is  already  defined  in  method  tryRemoveUnconditionalBranching(Node)	35	None	replace
189	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(n.getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()!=  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.size()  >  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.size()  >  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.size()  >  1  &&  outEdges.get(0).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext().getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext().getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  n.getNext().getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
196	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    first));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
197	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n.getNext()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n.getNext()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  n.getNext()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    first));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
198	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    first));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
199	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
200	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
201	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
202	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  n));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
203	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeFallThrough(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeFallThrough(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
204	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  first));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  first	46	None	replace
205	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  ')'  expected	59	None	replace
206	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgStack.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	59	None	replace
207	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size()  -  1);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size()  -  1);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size()  -  1);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	59	None	replace
208	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	59	None	replace
209	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges.size());  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	59	None	replace
210	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack,  outEdges.size());  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  first	59	None	replace
211	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	59	None	replace
212	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  fallThrough);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
213	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
214	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
215	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  n));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
216	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	45	None	replace
217	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  next));  [CE]  cannot  find  symbol  next  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  next));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  next));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  next	45	None	replace
218	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	45	None	replace
219	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    failThrough));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	80	None	replace
220	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode));  [CE]  cannot  find  symbol  rootNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    failThrough));    	non-compiled	[CE]  cannot  find  symbol  rootNode	80	None	replace
221	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    failThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	80	None	replace
222	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  this));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  this));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  this));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    failThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	80	None	replace
223	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	52	None	replace
224	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	52	None	replace
225	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  nextCfgNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	52	None	replace
226	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	52	None	replace
227	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	50	None	replace
228	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	50	None	replace
229	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  first);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
230	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  n);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
231	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  cfgStack);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
232	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  outEdges);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
233	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
234	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
235	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
236	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
237	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  outEdges);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
238	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  outEdges);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
239	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	75	None	replace
240	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack.peek());  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  first	75	None	replace
241	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack.peek());  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	75	None	replace
242	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n.peek());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
243	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack.peek());  [CE]  cannot  find  symbol  nextCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	75	None	replace
244	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges.peek());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  ')'  expected	75	None	replace
245	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  first);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
246	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
247	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first),  n);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  first),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol  first	9	None	replace
248	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  lastCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
249	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	90	None	replace
250	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	90	None	replace
251	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  outEdges);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	90	None	replace
252	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  outEdges);  [CE]  cannot  find  symbol  last  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  last	90	None	replace
253	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	90	None	replace
254	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    first));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	20	None	replace
255	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  collapse));  [CE]  cannot  find  symbol  collapse  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  collapse));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  collapse));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    first));    	non-compiled	[CE]  cannot  find  symbol  collapse	20	None	replace
256	[BUG]  [BUGGY]  Node  first  =  outEdges.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
257	[BUG]  [BUGGY]  Node  first  =  noOpStatements.getFirstChild();  [CE]  cannot  find  symbol  noOpStatements  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  noOpStatements.getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  noOpStatements.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	38	None	replace
258	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild();  [CE]  cannot  find  symbol  fallThrough  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  next  =  n.getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  next  =  n.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	38	None	replace
259	[BUG]  [BUGGY]  Node  first  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  nodes.getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  nodes.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	38	None	replace
260	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgNode));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	30	None	replace
261	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n,  outEdges);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  ')'  expected	62	None	replace
262	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	62	None	replace
263	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
264	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek(),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek(),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek(),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	62	None	replace
265	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	62	None	replace
266	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges,  first);  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	62	None	replace
267	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	62	None	replace
268	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  ')'  expected	14	None	replace
269	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
270	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  gNode);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  gNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  gNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
271	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  first);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
272	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	14	None	replace
273	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  gNode,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
274	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode,  outEdges);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  ')'  expected	14	None	replace
275	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  n));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    n));    	non-compiled	[CE]  cannot  find  symbol  first	29	None	replace
276	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    n));    	non-compiled	[CE]  cannot  find  symbol  first	29	None	replace
277	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n));  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    n));    	non-compiled	[CE]  cannot  find  symbol  first	29	None	replace
278	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  first));  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    n));    	non-compiled	[CE]  cannot  find  symbol  first	29	None	replace
279	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  fallThrough));  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	24	None	replace
280	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  fallThrough));  [CE]  cannot  find  symbol  curCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	24	None	replace
281	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  first));  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	24	None	replace
282	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack,  fallThrough));  [CE]  cannot  find  symbol  curCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	24	None	replace
283	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode,  fallThrough));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	24	None	replace
284	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  fallThrough));  [CE]  cannot  find  symbol  first  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	24	None	replace
285	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack,  fallThrough));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	24	None	replace
286	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	76	None	replace
287	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	76	None	replace
288	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  rootNode	76	None	replace
289	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	76	None	replace
290	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  ')'  expected	95	None	replace
291	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
292	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()  -  1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
293	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  +  1));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  +  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  +  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
294	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
295	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	87	None	replace
296	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  n));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
297	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
298	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	87	None	replace
299	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  gNode));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  gNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  gNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
300	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  next));  [CE]  cannot  find  symbol  next  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  next));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  next));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol  next	87	None	replace
301	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges);	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
302	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outEdges));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  ';'  expected	12	None	replace
303	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
304	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outputFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outputFallThrough(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler,  outputFallThrough(outEdges));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
305	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges),  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compiler.computeFallThrough(outEdges),  n);	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
306	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges),  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges),  n);	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
307	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges,  n));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(compileFallThrough(outEdges,  n));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
308	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  curCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
309	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
310	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	84	None	replace
311	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	84	None	replace
312	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	18	None	replace
313	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  outEdges);  [CE]  cannot  find  symbol  cfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	18	None	replace
314	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	28	None	replace
315	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
316	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack.peek());  [CE]  cannot  find  symbol  cfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  cfgNode	63	None	replace
317	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
318	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack.peek());  [CE]  cannot  find  symbol  last  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  last	63	None	replace
319	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  curCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  curCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  curCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    first));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	10	None	replace
320	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  fallThrough));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    first));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
321	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  last));  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  last));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  last));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    first));    	non-compiled	[CE]  cannot  find  symbol  last	10	None	replace
322	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	61	None	replace
323	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack.peek());  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	61	None	replace
324	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek());  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	61	None	replace
325	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack.peek());  [CE]  cannot  find  symbol  second  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  second	61	None	replace
326	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
327	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode,  cfgStack));  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	25	None	replace
328	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode));  [CE]  cannot  find  symbol  cfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	25	None	replace
329	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  gNode,  cfgStack));  [CE]  cannot  find  symbol  curCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  gNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  gNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	25	None	replace
330	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  first));  [CE]  cannot  find  symbol  cfgNode  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  cfgNode	25	None	replace
331	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
332	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
333	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges,  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
334	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
335	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  nextCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	3	None	replace
336	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  rootNode,  outEdges);  [CE]  cannot  find  symbol  rootNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  rootNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  rootNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  rootNode	3	None	replace
337	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
338	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  curCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	78	None	replace
339	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
340	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  nextCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	78	None	replace
341	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	78	None	replace
342	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack));  [CE]  cannot  find  symbol  rootNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  rootNode	21	None	replace
343	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	22	None	replace
344	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
345	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	48	None	replace
346	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
347	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  curCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  curCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  curCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	48	None	replace
348	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
349	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeestination().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
350	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
351	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
352	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  curCfgNode));  [CE]  cannot  find  symbol  curCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  curCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  curCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	43	None	replace
353	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  outEdges));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
354	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  second));  [CE]  cannot  find  symbol  second  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  second));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  second));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  second	43	None	replace
355	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  ')'  expected	96	None	replace
356	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  first);  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  first	96	None	replace
357	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  n);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  cfgStack.peek(),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  first	96	None	replace
358	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	96	None	replace
359	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  n);  [CE]  cannot  find  symbol  curCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode),  cfgStack.peek(),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	96	None	replace
360	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  firstCfgNode);  [CE]  cannot  find  symbol  firstCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  n,  firstCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  firstCfgNode	96	None	replace
361	[BUG]  [BUGGY]  Node  first  =  outEdges.getNext();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.getNext();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
362	[BUG]  [BUGGY]  Node  first  =  noOpStatements.getNext();  [CE]  cannot  find  symbol  noOpStatements  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  noOpStatements.getNext();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  noOpStatements.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	39	None	replace
363	[BUG]  [BUGGY]  Node  first  =  nextCfgNode.getNext();  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  nextCfgNode.getNext();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  nextCfgNode.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	39	None	replace
364	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [CE]  cannot  find  symbol  fallThrough  [FE]                                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  next  =  n.getNext();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  next  =  n.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	39	None	replace
365	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
366	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  compiler.computeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
367	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
368	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
369	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	44	None	replace
370	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  first));  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol  first	44	None	replace
371	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    rootNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	65	None	replace
372	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootCfgNode,  cfgStack);  [CE]  cannot  find  symbol  rootCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootCfgNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  rootCfgNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    rootNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  rootCfgNode	65	None	replace
373	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n));  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(first,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	49	None	replace
374	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
375	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFollowNode(outEdges));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFollowNode(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFollowNode(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
376	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  outEdges));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
377	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeFollowNode(outEdges));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeFollowNode(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeFollowNode(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
378	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFollowNode(outEdges));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFollowNode(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFollowNode(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
379	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n,  outEdges);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  ')'  expected	15	None	replace
380	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  outEdges);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  ')'  expected	15	None	replace
381	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  n,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	15	None	replace
382	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  n,  outEdges);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  ')'  expected	15	None	replace
383	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  n,  outEdges);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  ')'  expected	15	None	replace
384	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
385	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  n,  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	15	None	replace
386	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  first);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  first);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  first	7	None	replace
387	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  outEdges);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  outEdges);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
388	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  nextCfgNode);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	7	None	replace
389	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  lastCfgNode);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	7	None	replace
390	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  rootNode);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  rootNode	7	None	replace
391	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  nextCfgNode));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	79	None	replace
392	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgStack,  nextCfgNode));  [CE]  cannot  find  symbol  curCfgStack  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgStack,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgStack,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  curCfgStack	79	None	replace
393	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDeadExprStatement().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
394	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getNext().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
395	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	67	None	replace
396	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getParent().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
397	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination().getValue());	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
398	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	51	None	replace
399	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  cfgStack);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
400	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgNode);  [CE]  cannot  find  symbol  curCfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	19	None	replace
401	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  n);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
402	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  removeNoOpStatements);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  removeNoOpStatements);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
403	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  lastCfgNode);  [CE]  cannot  find  symbol  lastCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	19	None	replace
404	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  null);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  null);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  null);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
405	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode,  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  cfgNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
406	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgNode);  [CE]  cannot  find  symbol  cfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	54	None	replace
407	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
408	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  curCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  curCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  curCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
409	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
410	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgStack));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
411	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	86	None	replace
412	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [CE]  cannot  find  symbol  fallThrough  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(1).getDestination().getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	34	None	replace
413	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getDestination()).getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(n.getDestination()).getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
414	[BUG]  [BUGGY]  Node  firstCfgNode  =  n.getDestination().getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  n.getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  n.getDestination().getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
415	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDeestination().getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
416	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination(),  n.getValue();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(0).getDestination(),  n.getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(0).getDestination(),  n.getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	34	None	replace
417	[BUG]  [BUGGY]  Node  first  =  outEdges.getLastChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.getLastChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
418	[BUG]  [BUGGY]  Node  first  =  noOpStatements.getLastChild();  [CE]  cannot  find  symbol  noOpStatements  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  noOpStatements.getLastChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  noOpStatements.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  noOpStatements	37	None	replace
419	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  [CE]  cannot  find  symbol  fallThrough  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  next  =  n.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	37	None	replace
420	[BUG]  [BUGGY]  Node  first  =  nodes.getLastChild();  [CE]  cannot  find  symbol  nodes  [FE]                                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  nodes.getLastChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  nodes.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	37	None	replace
421	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
422	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
423	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  fallThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
424	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode),  outEdges);  [CE]  cannot  find  symbol  cfgNode  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	16	None	replace
425	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  gNode),  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	16	None	replace
426	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  gNode),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
427	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  nextCfgNode),  outEdges);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  nextCfgNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  nextCfgNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	16	None	replace
428	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.peek()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
429	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  outEdges.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	58	None	replace
430	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n.peek()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  n.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
431	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack.peek()));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	58	None	replace
432	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack.peek()));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
433	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack.peek()));  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  curCfgNode,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	58	None	replace
434	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges.peek()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
435	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
436	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode.size()));  [CE]  cannot  find  symbol  outCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNode.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol  outCfgNode	71	None	replace
437	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNodes.size()));  [CE]  cannot  find  symbol  outCfgNodes  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNodes.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outCfgNodes.size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol  outCfgNodes	71	None	replace
438	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0)));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0)));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(0)));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
439	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
440	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
441	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(n).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(n).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(n).getDestination().getValue();	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	34	None	replace
442	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  cfgStack.peek());  [CE]  cannot  find  symbol  next  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    root),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  next	74	None	replace
443	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    root),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	74	None	replace
444	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack));  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  root	22	None	replace
445	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack.peek());  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  first	61	None	replace
446	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
447	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  getDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  getDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  getDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
448	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  outEdges);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
449	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  this);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  this);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  this);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
450	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  gNode,  cfgStack);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  gNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n),  gNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  first	53	None	replace
451	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack);  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  rootNode	53	None	replace
452	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  first);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
453	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough),  outEdges);  [CE]  cannot  find  symbol  failThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  failThrough	78	None	replace
454	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootEdges),  outEdges);  [CE]  cannot  find  symbol  rootEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootEdges),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootEdges),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  rootEdges	78	None	replace
455	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges,  first);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	78	None	replace
456	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  second);  [CE]  cannot  find  symbol  second  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  second);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  second);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  second	7	None	replace
457	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  null);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(compiler,  n,  null);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [CE]  cannot  find  symbol  fallThrough  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(1));	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(2).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND,  outEdges.get(2).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
460	[BUG]  [BUGGY]  Node  first  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getPrevious();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getPrevious();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
461	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges),  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
462	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	73	None	replace
463	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  n));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
464	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
465	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  second);  [CE]  cannot  find  symbol  second  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  second);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n,  second);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  second	1	None	replace
466	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  outEdges);  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
467	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatementSafely(n));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeNoOpStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
468	[BUG]  [BUGGY]  Node  first  =  n.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getLastChild()  +  1;  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getLastChild()  +  1;	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	37	None	replace
469	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
470	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  gNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  gNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  gNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
471	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  cfgStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
472	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfg);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfg);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  curCfg);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
473	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
474	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  first);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  fallThrough,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
475	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallCfgNode));  [CE]  cannot  find  symbol  fallCfgNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fallCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  fallCfgNode	45	None	replace
476	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fall));  [CE]  cannot  find  symbol  fall  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fall));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  fall));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  fall	45	None	replace
477	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementsafely(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementsafely(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementsafely(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
478	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  gNode,  n));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  gNode,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  gNode,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
479	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(gNode,  n,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(gNode,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(gNode,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	25	None	replace
480	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  compiler);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  compiler);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges),  compiler);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
481	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	17	None	replace
482	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode,  outEdges);  [CE]  cannot  find  symbol  rootNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  rootNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  rootNode	17	None	replace
483	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	17	None	replace
484	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getNext()).getDestination();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getNext()).getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getNext()).getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
485	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getFirst()).getDestination();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getFirst()).getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getFirst()).getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
486	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n).getDestination();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n).getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n).getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	70	None	replace
487	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  outEdges));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
488	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  collapse));  [CE]  cannot  find  symbol  collapse  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  collapse));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  collapse));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol  collapse	87	None	replace
489	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  null));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  null));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n,  null));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n,    first));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
490	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  n);	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
491	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  n));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  n));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
492	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  first));  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  first));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	12	None	replace
493	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
494	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  cfgStack);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges),  cfgStack);	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
495	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  fallThrough);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
496	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  first);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
497	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack,  first));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges,  cfgStack,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    first));    	non-compiled	[CE]  cannot  find  symbol  first	20	None	replace
498	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  collapse));  [CE]  cannot  find  symbol  collapse  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  collapse));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  collapse));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    first));    	non-compiled	[CE]  cannot  find  symbol  collapse	10	None	replace
499	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
500	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  fallThrough,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	77	None	replace
501	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  fallThrough,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	77	None	replace
502	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    fallThrough,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	77	None	replace
503	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges.size());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
504	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  first);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
505	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	62	None	replace
506	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode,  outEdges);  [CE]  cannot  find  symbol  curCfgNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  curCfgNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  curCfgNode	62	None	replace
507	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
508	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root));  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    collapse));    	non-compiled	[CE]  cannot  find  symbol  root	82	None	replace
509	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
510	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  n,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	15	None	replace
511	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  outEdges));  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  first	31	None	replace
512	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges),  cfgStack);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  outEdges),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    outEdges));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	31	None	replace
513	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  cannot  find  symbol  fallThrough  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	38	None	replace
514	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getFirstChild()  +  1;  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getFirstChild()  +  1;	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
515	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  n);  [CE]  cannot  find  symbol  first  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  first,  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    n);    	non-compiled	[CE]  cannot  find  symbol  first	96	None	replace
516	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  outEdges);  [CE]  cannot  find  symbol  second  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  second	90	None	replace
517	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  fallThrough,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
518	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	14	None	replace
519	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	14	None	replace
520	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  gNode,  outEdges);  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  gNode,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  gNode,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	14	None	replace
521	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    first));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
522	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  collapse));  [CE]  cannot  find  symbol  collapse  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  collapse));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  collapse));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    first));    	non-compiled	[CE]  cannot  find  symbol  collapse	47	None	replace
523	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  cfgStack);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
524	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
525	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.peek());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
526	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack.peek());  [CE]  cannot  find  symbol  rootNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  rootNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  rootNode	75	None	replace
527	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  cfgStack.peek());  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  root	75	None	replace
528	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	93	None	replace
529	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	93	None	replace
530	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	93	None	replace
531	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  last));  [CE]  cannot  find  symbol  last  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  last));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  last));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  last	49	None	replace
532	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  rootNode));  [CE]  cannot  find  symbol  rootNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  rootNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  rootNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  rootNode	49	None	replace
533	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
534	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
535	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue()  +  1;	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	67	None	replace
536	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  root));  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  root));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  root));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  root	48	None	replace
537	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack),  outEdges);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
538	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  failThrough));  [CE]  cannot  find  symbol  failThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  failThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  failThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  failThrough	48	None	replace
539	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outputEdges);  [CE]  cannot  find  symbol  outputEdges  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outputEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallThrough,  outputEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  outputEdges	91	None	replace
540	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  failThrough);  [CE]  cannot  find  symbol  failThrough  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  failThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  failThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    rootNode);    	non-compiled	[CE]  cannot  find  symbol  failThrough	56	None	replace
541	[BUG]  [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  firstCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  removeDeadExprStatementSafely(firstCfgNode);	  Node    firstCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(firstCfgNode);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	36	None	replace
542	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse),  cfgStack.peek());  [CE]  cannot  find  symbol  collapse  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  collapse),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  collapse	63	None	replace
543	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  root);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  root);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  root);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
544	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.size());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
545	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough));  [CE]  cannot  find  symbol  rootNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  rootNode,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  rootNode	24	None	replace
546	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  null,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	24	None	replace
547	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough,  nextCfgNode));  [CE]  cannot  find  symbol  failThrough  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  failThrough,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  failThrough	24	None	replace
548	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  outEdges));  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges));    	non-compiled	[CE]  cannot  find  symbol  root	94	None	replace
549	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  null));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  null));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  null));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outCfgNode));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
550	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  next));  [CE]  cannot  find  symbol  next  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  next));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  next));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outCfgNode));    	non-compiled	[CE]  cannot  find  symbol  next	11	None	replace
551	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDeadExprStatementSafely(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeDeadExprStatementSafely(n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
552	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  fallThrough));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n,  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDeadExprStatementSafely(n));    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
553	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  cfgStack,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	3	None	replace
554	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack);  [CE]  cannot  find  symbol  second  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  second	89	None	replace
555	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  root	89	None	replace
556	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	89	None	replace
557	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.length);  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.length);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.length);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
558	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.get(0));  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.get(0));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.get(0));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	57	None	replace
559	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(outEdges,  n,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(outEdges,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(outEdges,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first,    n,    cfgStack));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	26	None	replace
560	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  compiler);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  compiler);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  compiler);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
561	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  this);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  this);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  fallThrough),  this);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
562	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  ')'  expected	95	None	replace
563	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges.size()  -  1));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(outEdges,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
564	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()  -  1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
565	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()  -  1));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
566	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	58	None	replace
567	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  fallThrough));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	58	None	replace
568	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack.peek()));  [CE]  cannot  find  symbol  rootNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  rootNode,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  rootNode	58	None	replace
569	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack.peek()));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n,  cfgStack.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
570	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	81	None	replace
571	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	81	None	replace
572	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  nextCfgNode));  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root,  cfgStack,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  root	79	None	replace
573	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  downCfgNode);  [CE]  cannot  find  symbol  downCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  downCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek(),  downCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  downCfgNode	76	None	replace
574	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  root);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  root);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  root);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
575	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  rootNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
576	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getNext()).getDestination().getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	66	None	replace
577	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  n.computeFallThrough(outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
578	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	55	None	replace
579	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downEdges);  [CE]  cannot  find  symbol  downEdges  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  downEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  cannot  find  symbol  downEdges	55	None	replace
580	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  fallThrough);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(1),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	4	None	replace
581	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
582	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  gNode),  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  gNode),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n,  gNode),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
583	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges,  first);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  n),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
584	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  fallThrough,  outEdges);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  fallThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode),  fallThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	16	None	replace
585	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack,  outEdges.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	59	None	replace
586	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack,  outEdges.size());  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  root	59	None	replace
587	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges.size());  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  root),  cfgStack,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  root	59	None	replace
588	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
589	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  fallThrough,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
590	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(first),  nextCfgNode);  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(first),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(first),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol  first	92	None	replace
591	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
592	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1)));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1)));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.get(1)));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
593	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.keySet()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.keySet()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.keySet()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
594	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  rootDestination(n));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  rootDestination(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  rootDestination(n));	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
595	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  getDestination(n));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  getDestination(n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  getDestination(n));	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
596	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first);  [CE]  cannot  find  symbol  first  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  first);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol  first	6	None	replace
597	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compiler,  outEdges));	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
598	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  rootNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  rootNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  rootNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
599	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges),    n);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
600	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  root);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  root);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  root);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
601	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  outEdges.size());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
602	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  first);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
603	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  lastCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.peek(),  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.peek());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
604	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getDestination()).getDestination();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getDestination()).getDestination();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getDestination()).getDestination();	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
605	[BUG]  [BUGGY]  Node  first  =  outEdges.get(n.getDestination());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(n.getDestination());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(n.getDestination());	  Node    first    =    outEdges.get(0).getDestination();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
606	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  outEdges,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
607	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));  [CE]  cannot  find  symbol  lastCfgNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  lastCfgNode));	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  lastCfgNode	81	None	replace
608	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	81	None	replace
609	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  removeDeadExprStatementSafely(n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  removeDeadExprStatementSafely(n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  removeDeadExprStatementSafely(n);	  Node    nextCfgNode    =    outEdges.get(0).getDestination().getValue();    removeDeadExprStatementSafely(n);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
610	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  outEdges));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeDestination(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
611	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek(),  outEdges);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek(),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges.peek(),  cfgStack.peek(),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
612	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges,  first);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  outEdges,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack.peek(),    outEdges);    	non-compiled	[CE]  ')'  expected	62	None	replace
613	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	23	None	replace
614	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgStack));  [CE]  cannot  find  symbol  last  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  last	23	None	replace
615	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgNode));  [CE]  cannot  find  symbol  last  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  last,  cfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  last	23	None	replace
616	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
617	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  next);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  next);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  next);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
618	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n.getParent());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n.getParent());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  n.getParent());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    n);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
619	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	28	None	replace
620	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n));  [CE]  cannot  find  symbol  first  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(first,  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	28	None	replace
621	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
622	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()  -  1));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.values().size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()    -    1));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
623	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  n));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	58	None	replace
624	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	58	None	replace
625	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  first));  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack.peek(),  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
626	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first.peek()));  [CE]  cannot  find  symbol  first  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack.peek()));    	non-compiled	[CE]  cannot  find  symbol  first	58	None	replace
627	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  last));  [CE]  cannot  find  symbol  last  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  last));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  last));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  last	43	None	replace
628	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  first	27	None	replace
629	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  root),  outEdges);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  root),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  root),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  root	78	None	replace
630	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  third));  [CE]  cannot  find  symbol  third  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  third));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  third));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    next));    	non-compiled	[CE]  cannot  find  symbol  third	32	None	replace
631	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
632	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
633	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  cfgStack,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	13	None	replace
634	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second,  cfgStack));  [CE]  cannot  find  symbol  second  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  second,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  second	21	None	replace
635	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  n),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    n));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
636	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  nextCfgNode);  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  removeDeadExprStatementSafely(n),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    removeDeadExprStatementSafely(n));    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
637	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()  -  1));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()  -  1));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  outEdges.size()  -  1));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
638	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
639	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  first);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
640	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  compiler);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  compiler);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  fallThrough),  compiler);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack),    fallThrough);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	64	None	replace
641	[BUG]  [BUGGY]  Node  first  =  n.getParent();  [CE]  cannot  find  symbol  fallThrough  [FE]                                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getParent();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getParent();	  Node    first    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  fallThrough	39	None	replace
642	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.computeUnconditionalBranching(computeFallThrough(outEdges,  outEdges.size()));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
643	[BUG]  [BUGGY]  Node  fallThrough  =  outEdges.computeUnconditionalBranching(computeFallThrough(compiler));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  outEdges.computeUnconditionalBranching(computeFallThrough(compiler));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  outEdges.computeUnconditionalBranching(computeFallThrough(compiler));	  Node    fallThrough    =    compiler.computeUnconditionalBranching(computeFallThrough(outEdges));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
644	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  cfgStack.peek());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  ')'  expected	75	None	replace
645	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.peek());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
646	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  n,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack.peek());    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	75	None	replace
647	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
648	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  n);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  n);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
649	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(computeDestination(n),  outEdges);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
650	[BUG]  [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compileDestination(n),  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compileDestination(n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  compiler.tryRemoveUnconditionalBranching(compileDestination(n),  n);	  Node    fallThrough    =    compiler.tryRemoveUnconditionalBranching(computeDestination(n));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
651	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  cfgStack));  [CE]  cannot  find  symbol  first  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first,  n,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  first	25	None	replace
652	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  first	59	None	replace
653	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  outEdges.size(),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	59	None	replace
654	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges.size());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges.size());    	non-compiled	[CE]  ')'  expected	59	None	replace
655	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    rootNode,    cfgStack);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	65	None	replace
656	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallsThrough,  outEdges);  [CE]  cannot  find  symbol  fallsThrough  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallsThrough,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  fallsThrough,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    first,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  fallsThrough	91	None	replace
657	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(n,  compiler);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(n,  compiler);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(n,  compiler);	  Node    fallThrough    =    attemptRemoveUnconditionalBranching(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
658	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  fallThrough);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  fallThrough);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  fallThrough);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
659	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  nextCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
660	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  gNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  ')'  expected	53	None	replace
661	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  lastCfgNode);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  lastCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack),  gNode,  lastCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    cfgStack);    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	53	None	replace
662	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  first),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  first),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  gNode,  first),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    gNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	16	None	replace
663	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  nextCfgNode);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(n),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(n));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	5	None	replace
664	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.pop());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.pop());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.pop());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
665	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.push());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.push());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  fallThrough),  cfgStack.push());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	63	None	replace
666	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  nextCfgNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges));    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
667	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  outEdges,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
668	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	90	None	replace
669	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  second));  [CE]  cannot  find  symbol  second  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  second));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  second));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  second	49	None	replace
670	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
671	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  first));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  first	49	None	replace
672	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next,  cfgStack));  [CE]  cannot  find  symbol  next  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next,  cfgStack));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next,  cfgStack));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(first,    n,    cfgStack));    	non-compiled	[CE]  cannot  find  symbol  next	26	None	replace
673	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  outEdges);  [CE]  cannot  find  symbol  next  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    first),    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	18	None	replace
674	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    outEdges);    	non-compiled	[CE]  ')'  expected	17	None	replace
675	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  outEdges.get(0),  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	4	None	replace
676	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(0));  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(0));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler,  first,  outEdges.get(0));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler,    outEdges.get(0));    	non-compiled	[CE]  cannot  find  symbol  first	4	None	replace
677	[BUG]  [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  attemptRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	83	None	replace
678	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  next));  [CE]  cannot  find  symbol  next  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  next));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  next));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n,    fallThrough));    	non-compiled	[CE]  cannot  find  symbol  next	83	None	replace
679	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgNode),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	89	None	replace
680	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgNode);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  root	54	None	replace
681	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  nextCfgNode,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    nextCfgNode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
682	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  removeNoOpStatements);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  removeNoOpStatements);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack,  removeNoOpStatements);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    cfgStack,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	55	None	replace
683	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
684	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.peek());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
685	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
686	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges.size());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges.size());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  outEdges.size());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	19	None	replace
687	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  pruneNoOpStatements);  [CE]  cannot  find  symbol  pruneNoOpStatements  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  pruneNoOpStatements);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges,  pruneNoOpStatements);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    outEdges,    first);    	non-compiled	[CE]  cannot  find  symbol  pruneNoOpStatements	19	None	replace
688	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  n);  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  n);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(cfgStack,  n),  n);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(cfgStack,    n));    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	93	None	replace
689	[BUG]  [BUGGY]  Node  first  =  outEdges.get(0).getDeserialization().getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(0).getDeserialization().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(0).getDeserialization().getValue();	  Node    first    =    outEdges.get(0).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
690	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
691	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  root);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  root);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack,  root);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
692	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack.peek());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDestination(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
693	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(1).getFirstChild().getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
694	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();	  Node    nextCfgNode    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
695	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  root));  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  root));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  root));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outCfgNode));    	non-compiled	[CE]  cannot  find  symbol  root	11	None	replace
696	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n),  outEdges);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n),  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowNode(n),  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowNode(outEdges));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
697	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDestination(),  n.getNext().getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDestination(),  n.getNext().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDestination(),  n.getNext().getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  ';'  expected	69	None	replace
698	[BUG]  [BUGGY]  Node  first  =  outEdges.get(1).getDeserialization().getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  outEdges.get(1).getDeserialization().getValue();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  outEdges.get(1).getDeserialization().getValue();	  Node    first    =    outEdges.get(1).getDestination().getValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
699	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  node.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  fallThrough  [FE]                            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND  ||  outEdges.get(1).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  fallThrough	68	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(inEdges.get(0).getValue()  ==  Branch.UNCOND);  [CE]  cannot  find  symbol  inEdges  [FE]                              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Preconditions.checkState(inEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Preconditions.checkState(inEdges.get(0).getValue()  ==  Branch.UNCOND);	  Preconditions.checkState(outEdges.get(0).getValue()    ==    Branch.UNCOND);    	non-compiled	[CE]  cannot  find  symbol  inEdges	68	None	replace
702	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges,  outEdges.peek()));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(outEdges,    outEdges.size()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
703	[BUG]  [BUGGY]  Node  first  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  first  =  n.getfirstChild();  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  first  =  n.getfirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
704	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  n,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  first,  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	15	None	replace
705	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  n,  outEdges);  [CE]  cannot  find  symbol  next  [FE]                        AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  n,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  next),  n,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    n,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  next	15	None	replace
706	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  first);  [CE]  cannot  find  symbol  cfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  first);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  first);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	52	None	replace
707	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  root	52	None	replace
708	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  last));  [CE]  cannot  find  symbol  last  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  last));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack,  last));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    cfgStack,    nextCfgNode));    	non-compiled	[CE]  cannot  find  symbol  last	79	None	replace
709	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  outEdges));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  outEdges));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  outEdges));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
710	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  nextCfgNode));  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  nextCfgNode));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(compiler.computeFallThrough(n,  nextCfgNode));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(compiler.computeFallThrough(n));    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	46	None	replace
711	[BUG]  [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  nextCfgNode  =  tryRemoveUnconditionalBranching(computeFollowing(n,  nextCfgNode),  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n,    nextCfgNode),    cfgStack.peek());    	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	61	None	replace
712	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  outEdges,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    outEdges);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
713	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfg));  [CE]  cannot  find  symbol  nextCfg  [FE]                          AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfg));  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,  nextCfg));	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n,    first));    	non-compiled	[CE]  cannot  find  symbol  nextCfg	45	None	replace
714	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode),  cfgStack);  [CE]  cannot  find  symbol  nextCfgNode  [FE]              AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode),  cfgStack);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n,  nextCfgNode),  cfgStack);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	84	None	replace
715	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  nextCfgNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
716	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  root);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  root);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n),  cfgStack,  root);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFallThrough(n),    cfgStack);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
717	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack.peek());  [CE]  cannot  find  symbol  cfgNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgNode,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  cfgNode	60	None	replace
718	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack.peek());  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack.peek());  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  root,  cfgStack.peek());	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    curCfgNode,    cfgStack.peek());    	non-compiled	[CE]  cannot  find  symbol  root	60	None	replace
719	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  nextCfgNode);  [CE]  cannot  find  symbol  nextCfgNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  nextCfgNode);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  n,  outEdges,  nextCfgNode);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	14	None	replace
720	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  first,  outEdges);  [CE]  cannot  find  symbol  first  [FE]                      AssertionFailedError      [CONTEXT]      if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);      [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  first,  outEdges);  [BUGGY]      Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  gNode,  first,  outEdges);	  Node    fallThrough    =    tryRemoveUnconditionalBranching(computeFollowing(n),    gNode,    outEdges);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
