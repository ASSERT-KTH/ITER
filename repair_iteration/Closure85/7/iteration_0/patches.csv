bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(n));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack);  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack);	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
3	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDeadExprStatementSafely(n));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
4	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  outEdges);	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
5	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  cfgStack));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  method  computeFollowing  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
6	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  [CE]  cannot  find  symbol  first  [FE]              AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n,  first));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol  first	13	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  fallThrough  [FE]                AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]    [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	  	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol  fallThrough	13	None	replace
8	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFallThrough(outEdges));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
9	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeDestination(n));	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
10	[BUG]  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  [BUGGY]  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	183	183	2	replace	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n),  cfgStack.peek());	Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  	non-compiled	[CE]  method  tryRemoveUnconditionalBranching  in  class  UnreachableCodeElimination  cannot  be  applied  to  given  types;	13	None	replace
