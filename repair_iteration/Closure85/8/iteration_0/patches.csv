bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getNext().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatement().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getParent().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	add	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	15	10	replace
5	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]          AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(1).getDestination().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	15	10	replace
6	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getFirstChild().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
7	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getDeadExprStatements().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  nextCfgNode  [FE]                AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]    [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	  	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol  nextCfgNode	15	None	replace
9	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getNext()).getDestination().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	15	None	replace
10	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n).getDestination().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	15	None	replace
11	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(n.getDestination()).getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
12	[BUG]  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (outEdges.size()  ==  1  &&  (n.getNext()  ==  null  ||  n.getNext().getType()  ==  Token.FUNCTION))  {  Preconditions.checkState(outEdges.get(0).getValue()  ==  Branch.UNCOND);  Node  fallThrough  =  tryRemoveUnconditionalBranching(computeFollowing(n));  [BUGGY]  Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();  [BUGGY]  if  (nextCfgNode  ==  fallThrough)  {  removeDeadExprStatementSafely(n);  return  fallThrough;  }  }  [CLASS]  UnreachableCodeElimination  [METHOD]  tryRemoveUnconditionalBranching  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  gNode  boolean  removeNoOpStatements  ControlFlowGraph  curCfg  Node  fallThrough  first  n  nextCfgNode  List  outEdges  Logger  logger  Deque  cfgStack  	projects/Closure85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	0.4472135954999579	184	184	2	replace	Node  nextCfgNode  =  outEdges.get(0).getEntry().getValue();	Node  nextCfgNode  =  outEdges.get(0).getDestination().getValue();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
